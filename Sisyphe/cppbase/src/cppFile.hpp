/* 
 * cppFile.hpp
 *
 *
 * @date 25-06-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFILE_HPP_
#define _CPPFILE_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _CppFileAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _CppFunction;

template <class EncodingT>
class _CppFunction;

template <class EncodingT>
class _CppClass;

template <class EncodingT>
class _CppInclude;

template <class EncodingT>
class _CppVariable;

template <class EncodingT>
class _CppEnum;

template <class EncodingT>
class _CMacro;

template <class EncodingT>
class _CppNotice;

template <class EncodingT>
class _TextFile;

template <class EncodingT>
class _CppFileType;

/// cppFile table represents a file.
template <class EncodingT>
class  _CppFile {
private :
	long long	m_identifier;
	boost::shared_ptr< _TextFile<EncodingT> >	m_textFile;
	typename EncodingT::string_t	m_path;
	typename EncodingT::string_t	m_name;
	boost::shared_ptr< _CppFileType<EncodingT> >	m_cppFileType;
	long long	m_linesCount;
	long long	m_hash;
	long long	m_analyzed;
	typedef std::vector< boost::shared_ptr< _CppFunction<EncodingT> > >	vector_cppDeclarationFunction;
	vector_cppDeclarationFunction	m_cppDeclarationFunctions;
	typedef std::vector< boost::shared_ptr< _CppFunction<EncodingT> > >	vector_cppDefinitionFunction;
	vector_cppDefinitionFunction	m_cppDefinitionFunctions;
	typedef std::vector< boost::shared_ptr< _CppClass<EncodingT> > >	vector_cppClass;
	vector_cppClass	m_cppClasss;
	typedef std::vector< boost::shared_ptr< _CppInclude<EncodingT> > >	vector_cppInclude;
	vector_cppInclude	m_cppIncludes;
	typedef std::vector< boost::shared_ptr< _CppVariable<EncodingT> > >	vector_cppVariable;
	vector_cppVariable	m_cppVariables;
	typedef std::vector< boost::shared_ptr< _CppEnum<EncodingT> > >	vector_cppEnum;
	vector_cppEnum	m_cppEnums;
	typedef std::vector< boost::shared_ptr< _CMacro<EncodingT> > >	vector_cMacro;
	vector_cMacro	m_cMacros;
	typedef std::vector< boost::shared_ptr< _CppNotice<EncodingT> > >	vector_cppNotice;
	vector_cppNotice	m_cppNotices;
	Category*	m_logger;

protected :
	friend class data_access::_CppFileAccess<EncodingT>;

	/** Creates a new element CppFile.
	@param identifier 
	@param path 
	@param name 
	@param linesCount 
	@param hash 
	@param analyzed 
	*/
	_CppFile(long long identifier,
				const typename EncodingT::string_t& path,
				const typename EncodingT::string_t& name,
				long long linesCount,
				long long hash,
				long long analyzed)
	: m_identifier(identifier),
	  m_path(path),
	  m_name(name),
	  m_linesCount(linesCount),
	  m_hash(hash),
	  m_analyzed(analyzed)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppFile "
				<< m_identifier << ' '
				<< A(m_path) << ' '
				<< A(m_name) << ' '
				<< m_linesCount << ' '
				<< m_hash << ' '
				<< m_analyzed << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in CppFile.
	@param identifier 
	*/
	void setIdentifier(long long identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element CppFile.
	*/
	_CppFile()
	: m_identifier(-1),
	  m_path(EncodingT::EMPTY),
	  m_name(EncodingT::EMPTY),
	  m_linesCount(0),
	  m_hash(0),
	  m_analyzed(0)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppFile ";
	}

	/** Creates a new element CppFile.
	@param path 
	@param name 
	@param linesCount 
	@param hash 
	@param analyzed 
	*/
	_CppFile(const typename EncodingT::string_t& path,
				const typename EncodingT::string_t& name,
				long long linesCount,
				long long hash,
				long long analyzed)
	: m_identifier(-1),
	  m_path(path),
	  m_name(name),
	  m_linesCount(linesCount),
	  m_hash(hash),
	  m_analyzed(analyzed)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppFile "
				<< m_identifier << ' '
				<< A(m_path) << ' '
				<< A(m_name) << ' '
				<< m_linesCount << ' '
				<< m_hash << ' '
				<< m_analyzed << ' ';
	}

	/** Returns a const reference to the element <i>identifier</i> in CppFile.
	@return 
	*/
	long long getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>textFile</i> in CppFile.
	@return 
	*/
	boost::shared_ptr< _TextFile<EncodingT> > getTextFile() const 
	{
		return m_textFile;
	}

	/** Sets a value of the element <i>textFile</i> in CppFile.
	@param textFile 
	*/
	void setTextFile(boost::shared_ptr< _TextFile<EncodingT> > textFile)  
	{
		m_textFile = textFile;
	}

	/** Returns whether the element <i>textFile</i> in CppFile is NULL.
	@return True if the element <i>textFile</i> is NULL, false otherwise.
	*/
	bool isNullTextFile() const 
	{
		return !m_textFile;
	}

	/** Removes from CppFile an element <i>textFile</i>.
	*/
	void eraseTextFile()  
	{
		m_textFile.reset();
	}

	/** Returns a const reference to the element <i>path</i> in CppFile.
	@return 
	*/
	const typename EncodingT::string_t& getPath() const 
	{
		return m_path;
	}

	/** Sets a value of the element <i>path</i> in CppFile.
	@param path 
	*/
	void setPath(const typename EncodingT::string_t& path)  
	{
		m_path = path;
	}

	/** Returns a const reference to the element <i>name</i> in CppFile.
	@return 
	*/
	const typename EncodingT::string_t& getName() const 
	{
		return m_name;
	}

	/** Sets a value of the element <i>name</i> in CppFile.
	@param name 
	*/
	void setName(const typename EncodingT::string_t& name)  
	{
		m_name = name;
	}

	/** Returns a const reference to the element <i>cppFileType</i> in CppFile.
	@return 
	*/
	boost::shared_ptr< _CppFileType<EncodingT> > getCppFileType() const 
	{
		return m_cppFileType;
	}

	/** Sets a value of the element <i>cppFileType</i> in CppFile.
	@param cppFileType 
	*/
	void setCppFileType(boost::shared_ptr< _CppFileType<EncodingT> > cppFileType)  
	{
		m_cppFileType = cppFileType;
	}

	/** Returns whether the element <i>cppFileType</i> in CppFile is NULL.
	@return True if the element <i>cppFileType</i> is NULL, false otherwise.
	*/
	bool isNullCppFileType() const 
	{
		return !m_cppFileType;
	}

	/** Removes from CppFile an element <i>cppFileType</i>.
	*/
	void eraseCppFileType()  
	{
		m_cppFileType.reset();
	}

	/** Returns a const reference to the element <i>linesCount</i> in CppFile.
	@return 
	*/
	long long getLinesCount() const 
	{
		return m_linesCount;
	}

	/** Sets a value of the element <i>linesCount</i> in CppFile.
	@param linesCount 
	*/
	void setLinesCount(long long linesCount)  
	{
		m_linesCount = linesCount;
	}

	/** Returns a const reference to the element <i>hash</i> in CppFile.
	@return 
	*/
	long long getHash() const 
	{
		return m_hash;
	}

	/** Sets a value of the element <i>hash</i> in CppFile.
	@param hash 
	*/
	void setHash(long long hash)  
	{
		m_hash = hash;
	}

	/** Returns a const reference to the element <i>analyzed</i> in CppFile.
	@return 
	*/
	long long getAnalyzed() const 
	{
		return m_analyzed;
	}

	/** Sets a value of the element <i>analyzed</i> in CppFile.
	@param analyzed 
	*/
	void setAnalyzed(long long analyzed)  
	{
		m_analyzed = analyzed;
	}

	/// Random access iterator types for CppDeclarationFunction vector.
	typedef typename vector_cppDeclarationFunction::iterator	CppDeclarationFunctionIterator;
	typedef typename vector_cppDeclarationFunction::const_iterator	CppDeclarationFunctionConstIterator;

	/// Random access iterator types for CppDefinitionFunction vector.
	typedef typename vector_cppDefinitionFunction::iterator	CppDefinitionFunctionIterator;
	typedef typename vector_cppDefinitionFunction::const_iterator	CppDefinitionFunctionConstIterator;

	/// Random access iterator types for CppClass vector.
	typedef typename vector_cppClass::iterator	CppClassIterator;
	typedef typename vector_cppClass::const_iterator	CppClassConstIterator;

	/// Random access iterator types for CppInclude vector.
	typedef typename vector_cppInclude::iterator	CppIncludeIterator;
	typedef typename vector_cppInclude::const_iterator	CppIncludeConstIterator;

	/// Random access iterator types for CppVariable vector.
	typedef typename vector_cppVariable::iterator	CppVariableIterator;
	typedef typename vector_cppVariable::const_iterator	CppVariableConstIterator;

	/// Random access iterator types for CppEnum vector.
	typedef typename vector_cppEnum::iterator	CppEnumIterator;
	typedef typename vector_cppEnum::const_iterator	CppEnumConstIterator;

	/// Random access iterator types for CMacro vector.
	typedef typename vector_cMacro::iterator	CMacroIterator;
	typedef typename vector_cMacro::const_iterator	CMacroConstIterator;

	/// Random access iterator types for CppNotice vector.
	typedef typename vector_cppNotice::iterator	CppNoticeIterator;
	typedef typename vector_cppNotice::const_iterator	CppNoticeConstIterator;

	/** Returns an iterator referring to the first element in the vector container CppDeclarationFunction.
	@return An iterator to the beginning of the sequence.
	*/
	CppDeclarationFunctionIterator getCppDeclarationFunctionsBeginning()  
	{
		return m_cppDeclarationFunctions.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppDeclarationFunction.
	@return An iterator to the element past the end of the sequence.
	*/
	CppDeclarationFunctionIterator getCppDeclarationFunctionsEnd()  
	{
		return m_cppDeclarationFunctions.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppDeclarationFunction.
	@return A const iterator to the beginning of the sequence.
	*/
	CppDeclarationFunctionConstIterator getCppDeclarationFunctionsBeginning() const 
	{
		return m_cppDeclarationFunctions.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppDeclarationFunction.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppDeclarationFunctionConstIterator getCppDeclarationFunctionsEnd() const 
	{
		return m_cppDeclarationFunctions.end();
	}

	/** Returns a reference to the element at position n in the vector CppDeclarationFunction.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppFunction<EncodingT> >& getCppDeclarationFunctionAt(size_t n)  
	{
		return m_cppDeclarationFunctions.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppDeclarationFunction.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppFunction<EncodingT> > getCppDeclarationFunctionAt(size_t n) const 
	{
		return m_cppDeclarationFunctions.at(n);
	}

	/** Returns the number of elements in the vector container CppDeclarationFunction.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppDeclarationFunctionsSize() const 
	{
		return m_cppDeclarationFunctions.size();
	}

	/** Returns whether the vector container CppDeclarationFunction is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppDeclarationFunctionsEmpty() const 
	{
		return m_cppDeclarationFunctions.empty();
	}

	/** Adds a new element at the end of the vector CppDeclarationFunction, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppDeclarationFunction(boost::shared_ptr< _CppFunction<EncodingT> > o)  
	{
		m_cppDeclarationFunctions.push_back(copy_ptr(o));
	}

	/** The vector CppDeclarationFunction is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppDeclarationFunctionIterator insertCppDeclarationFunction(CppDeclarationFunctionIterator pos, boost::shared_ptr< _CppFunction<EncodingT> > o)  
	{
		return m_cppDeclarationFunctions.insert(pos, copy_ptr(o));
	}

	/** The vector CppDeclarationFunction is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppDeclarationFunction(CppDeclarationFunctionIterator pos, CppDeclarationFunctionIterator first, CppDeclarationFunctionIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppDeclarationFunctions, pos), static_cast< boost::shared_ptr< _CppFunction<EncodingT> >(*)(boost::shared_ptr< _CppFunction<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppDeclarationFunction a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppDeclarationFunctionIterator eraseCppDeclarationFunction(CppDeclarationFunctionIterator pos)  
	{
		return m_cppDeclarationFunctions.erase(pos);
	}

	/** Removes from the vector container CppDeclarationFunction a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppDeclarationFunctionIterator eraseCppDeclarationFunction(CppDeclarationFunctionIterator first, CppDeclarationFunctionIterator last)  
	{
		return m_cppDeclarationFunctions.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppDeclarationFunction, leaving the container with a size of 0.
	*/
	void clearCppDeclarationFunctions()  
	{
		m_cppDeclarationFunctions.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CppDefinitionFunction.
	@return An iterator to the beginning of the sequence.
	*/
	CppDefinitionFunctionIterator getCppDefinitionFunctionsBeginning()  
	{
		return m_cppDefinitionFunctions.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppDefinitionFunction.
	@return An iterator to the element past the end of the sequence.
	*/
	CppDefinitionFunctionIterator getCppDefinitionFunctionsEnd()  
	{
		return m_cppDefinitionFunctions.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppDefinitionFunction.
	@return A const iterator to the beginning of the sequence.
	*/
	CppDefinitionFunctionConstIterator getCppDefinitionFunctionsBeginning() const 
	{
		return m_cppDefinitionFunctions.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppDefinitionFunction.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppDefinitionFunctionConstIterator getCppDefinitionFunctionsEnd() const 
	{
		return m_cppDefinitionFunctions.end();
	}

	/** Returns a reference to the element at position n in the vector CppDefinitionFunction.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppFunction<EncodingT> >& getCppDefinitionFunctionAt(size_t n)  
	{
		return m_cppDefinitionFunctions.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppDefinitionFunction.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppFunction<EncodingT> > getCppDefinitionFunctionAt(size_t n) const 
	{
		return m_cppDefinitionFunctions.at(n);
	}

	/** Returns the number of elements in the vector container CppDefinitionFunction.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppDefinitionFunctionsSize() const 
	{
		return m_cppDefinitionFunctions.size();
	}

	/** Returns whether the vector container CppDefinitionFunction is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppDefinitionFunctionsEmpty() const 
	{
		return m_cppDefinitionFunctions.empty();
	}

	/** Adds a new element at the end of the vector CppDefinitionFunction, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppDefinitionFunction(boost::shared_ptr< _CppFunction<EncodingT> > o)  
	{
		m_cppDefinitionFunctions.push_back(copy_ptr(o));
	}

	/** The vector CppDefinitionFunction is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppDefinitionFunctionIterator insertCppDefinitionFunction(CppDefinitionFunctionIterator pos, boost::shared_ptr< _CppFunction<EncodingT> > o)  
	{
		return m_cppDefinitionFunctions.insert(pos, copy_ptr(o));
	}

	/** The vector CppDefinitionFunction is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppDefinitionFunction(CppDefinitionFunctionIterator pos, CppDefinitionFunctionIterator first, CppDefinitionFunctionIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppDefinitionFunctions, pos), static_cast< boost::shared_ptr< _CppFunction<EncodingT> >(*)(boost::shared_ptr< _CppFunction<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppDefinitionFunction a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppDefinitionFunctionIterator eraseCppDefinitionFunction(CppDefinitionFunctionIterator pos)  
	{
		return m_cppDefinitionFunctions.erase(pos);
	}

	/** Removes from the vector container CppDefinitionFunction a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppDefinitionFunctionIterator eraseCppDefinitionFunction(CppDefinitionFunctionIterator first, CppDefinitionFunctionIterator last)  
	{
		return m_cppDefinitionFunctions.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppDefinitionFunction, leaving the container with a size of 0.
	*/
	void clearCppDefinitionFunctions()  
	{
		m_cppDefinitionFunctions.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CppClass.
	@return An iterator to the beginning of the sequence.
	*/
	CppClassIterator getCppClasssBeginning()  
	{
		return m_cppClasss.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppClass.
	@return An iterator to the element past the end of the sequence.
	*/
	CppClassIterator getCppClasssEnd()  
	{
		return m_cppClasss.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppClass.
	@return A const iterator to the beginning of the sequence.
	*/
	CppClassConstIterator getCppClasssBeginning() const 
	{
		return m_cppClasss.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppClass.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppClassConstIterator getCppClasssEnd() const 
	{
		return m_cppClasss.end();
	}

	/** Returns a reference to the element at position n in the vector CppClass.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppClass<EncodingT> >& getCppClassAt(size_t n)  
	{
		return m_cppClasss.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppClass.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppClass<EncodingT> > getCppClassAt(size_t n) const 
	{
		return m_cppClasss.at(n);
	}

	/** Returns the number of elements in the vector container CppClass.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppClasssSize() const 
	{
		return m_cppClasss.size();
	}

	/** Returns whether the vector container CppClass is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppClasssEmpty() const 
	{
		return m_cppClasss.empty();
	}

	/** Adds a new element at the end of the vector CppClass, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppClass(boost::shared_ptr< _CppClass<EncodingT> > o)  
	{
		m_cppClasss.push_back(copy_ptr(o));
	}

	/** The vector CppClass is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppClassIterator insertCppClass(CppClassIterator pos, boost::shared_ptr< _CppClass<EncodingT> > o)  
	{
		return m_cppClasss.insert(pos, copy_ptr(o));
	}

	/** The vector CppClass is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppClass(CppClassIterator pos, CppClassIterator first, CppClassIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppClasss, pos), static_cast< boost::shared_ptr< _CppClass<EncodingT> >(*)(boost::shared_ptr< _CppClass<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppClass a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppClassIterator eraseCppClass(CppClassIterator pos)  
	{
		return m_cppClasss.erase(pos);
	}

	/** Removes from the vector container CppClass a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppClassIterator eraseCppClass(CppClassIterator first, CppClassIterator last)  
	{
		return m_cppClasss.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppClass, leaving the container with a size of 0.
	*/
	void clearCppClasss()  
	{
		m_cppClasss.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CppInclude.
	@return An iterator to the beginning of the sequence.
	*/
	CppIncludeIterator getCppIncludesBeginning()  
	{
		return m_cppIncludes.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppInclude.
	@return An iterator to the element past the end of the sequence.
	*/
	CppIncludeIterator getCppIncludesEnd()  
	{
		return m_cppIncludes.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppInclude.
	@return A const iterator to the beginning of the sequence.
	*/
	CppIncludeConstIterator getCppIncludesBeginning() const 
	{
		return m_cppIncludes.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppInclude.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppIncludeConstIterator getCppIncludesEnd() const 
	{
		return m_cppIncludes.end();
	}

	/** Returns a reference to the element at position n in the vector CppInclude.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppInclude<EncodingT> >& getCppIncludeAt(size_t n)  
	{
		return m_cppIncludes.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppInclude.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppInclude<EncodingT> > getCppIncludeAt(size_t n) const 
	{
		return m_cppIncludes.at(n);
	}

	/** Returns the number of elements in the vector container CppInclude.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppIncludesSize() const 
	{
		return m_cppIncludes.size();
	}

	/** Returns whether the vector container CppInclude is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppIncludesEmpty() const 
	{
		return m_cppIncludes.empty();
	}

	/** Adds a new element at the end of the vector CppInclude, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppInclude(boost::shared_ptr< _CppInclude<EncodingT> > o)  
	{
		m_cppIncludes.push_back(copy_ptr(o));
	}

	/** The vector CppInclude is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppIncludeIterator insertCppInclude(CppIncludeIterator pos, boost::shared_ptr< _CppInclude<EncodingT> > o)  
	{
		return m_cppIncludes.insert(pos, copy_ptr(o));
	}

	/** The vector CppInclude is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppInclude(CppIncludeIterator pos, CppIncludeIterator first, CppIncludeIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppIncludes, pos), static_cast< boost::shared_ptr< _CppInclude<EncodingT> >(*)(boost::shared_ptr< _CppInclude<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppInclude a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppIncludeIterator eraseCppInclude(CppIncludeIterator pos)  
	{
		return m_cppIncludes.erase(pos);
	}

	/** Removes from the vector container CppInclude a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppIncludeIterator eraseCppInclude(CppIncludeIterator first, CppIncludeIterator last)  
	{
		return m_cppIncludes.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppInclude, leaving the container with a size of 0.
	*/
	void clearCppIncludes()  
	{
		m_cppIncludes.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CppVariable.
	@return An iterator to the beginning of the sequence.
	*/
	CppVariableIterator getCppVariablesBeginning()  
	{
		return m_cppVariables.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppVariable.
	@return An iterator to the element past the end of the sequence.
	*/
	CppVariableIterator getCppVariablesEnd()  
	{
		return m_cppVariables.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppVariable.
	@return A const iterator to the beginning of the sequence.
	*/
	CppVariableConstIterator getCppVariablesBeginning() const 
	{
		return m_cppVariables.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppVariable.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppVariableConstIterator getCppVariablesEnd() const 
	{
		return m_cppVariables.end();
	}

	/** Returns a reference to the element at position n in the vector CppVariable.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppVariable<EncodingT> >& getCppVariableAt(size_t n)  
	{
		return m_cppVariables.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppVariable.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppVariable<EncodingT> > getCppVariableAt(size_t n) const 
	{
		return m_cppVariables.at(n);
	}

	/** Returns the number of elements in the vector container CppVariable.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppVariablesSize() const 
	{
		return m_cppVariables.size();
	}

	/** Returns whether the vector container CppVariable is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppVariablesEmpty() const 
	{
		return m_cppVariables.empty();
	}

	/** Adds a new element at the end of the vector CppVariable, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppVariable(boost::shared_ptr< _CppVariable<EncodingT> > o)  
	{
		m_cppVariables.push_back(copy_ptr(o));
	}

	/** The vector CppVariable is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppVariableIterator insertCppVariable(CppVariableIterator pos, boost::shared_ptr< _CppVariable<EncodingT> > o)  
	{
		return m_cppVariables.insert(pos, copy_ptr(o));
	}

	/** The vector CppVariable is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppVariable(CppVariableIterator pos, CppVariableIterator first, CppVariableIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppVariables, pos), static_cast< boost::shared_ptr< _CppVariable<EncodingT> >(*)(boost::shared_ptr< _CppVariable<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppVariable a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppVariableIterator eraseCppVariable(CppVariableIterator pos)  
	{
		return m_cppVariables.erase(pos);
	}

	/** Removes from the vector container CppVariable a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppVariableIterator eraseCppVariable(CppVariableIterator first, CppVariableIterator last)  
	{
		return m_cppVariables.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppVariable, leaving the container with a size of 0.
	*/
	void clearCppVariables()  
	{
		m_cppVariables.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CppEnum.
	@return An iterator to the beginning of the sequence.
	*/
	CppEnumIterator getCppEnumsBeginning()  
	{
		return m_cppEnums.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppEnum.
	@return An iterator to the element past the end of the sequence.
	*/
	CppEnumIterator getCppEnumsEnd()  
	{
		return m_cppEnums.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppEnum.
	@return A const iterator to the beginning of the sequence.
	*/
	CppEnumConstIterator getCppEnumsBeginning() const 
	{
		return m_cppEnums.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppEnum.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppEnumConstIterator getCppEnumsEnd() const 
	{
		return m_cppEnums.end();
	}

	/** Returns a reference to the element at position n in the vector CppEnum.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppEnum<EncodingT> >& getCppEnumAt(size_t n)  
	{
		return m_cppEnums.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppEnum.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppEnum<EncodingT> > getCppEnumAt(size_t n) const 
	{
		return m_cppEnums.at(n);
	}

	/** Returns the number of elements in the vector container CppEnum.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppEnumsSize() const 
	{
		return m_cppEnums.size();
	}

	/** Returns whether the vector container CppEnum is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppEnumsEmpty() const 
	{
		return m_cppEnums.empty();
	}

	/** Adds a new element at the end of the vector CppEnum, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > o)  
	{
		m_cppEnums.push_back(copy_ptr(o));
	}

	/** The vector CppEnum is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppEnumIterator insertCppEnum(CppEnumIterator pos, boost::shared_ptr< _CppEnum<EncodingT> > o)  
	{
		return m_cppEnums.insert(pos, copy_ptr(o));
	}

	/** The vector CppEnum is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppEnum(CppEnumIterator pos, CppEnumIterator first, CppEnumIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppEnums, pos), static_cast< boost::shared_ptr< _CppEnum<EncodingT> >(*)(boost::shared_ptr< _CppEnum<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppEnum a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppEnumIterator eraseCppEnum(CppEnumIterator pos)  
	{
		return m_cppEnums.erase(pos);
	}

	/** Removes from the vector container CppEnum a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppEnumIterator eraseCppEnum(CppEnumIterator first, CppEnumIterator last)  
	{
		return m_cppEnums.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppEnum, leaving the container with a size of 0.
	*/
	void clearCppEnums()  
	{
		m_cppEnums.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CMacro.
	@return An iterator to the beginning of the sequence.
	*/
	CMacroIterator getCMacrosBeginning()  
	{
		return m_cMacros.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CMacro.
	@return An iterator to the element past the end of the sequence.
	*/
	CMacroIterator getCMacrosEnd()  
	{
		return m_cMacros.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CMacro.
	@return A const iterator to the beginning of the sequence.
	*/
	CMacroConstIterator getCMacrosBeginning() const 
	{
		return m_cMacros.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CMacro.
	@return A const iterator to the element past the end of the sequence.
	*/
	CMacroConstIterator getCMacrosEnd() const 
	{
		return m_cMacros.end();
	}

	/** Returns a reference to the element at position n in the vector CMacro.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CMacro<EncodingT> >& getCMacroAt(size_t n)  
	{
		return m_cMacros.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CMacro.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CMacro<EncodingT> > getCMacroAt(size_t n) const 
	{
		return m_cMacros.at(n);
	}

	/** Returns the number of elements in the vector container CMacro.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCMacrosSize() const 
	{
		return m_cMacros.size();
	}

	/** Returns whether the vector container CMacro is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCMacrosEmpty() const 
	{
		return m_cMacros.empty();
	}

	/** Adds a new element at the end of the vector CMacro, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCMacro(boost::shared_ptr< _CMacro<EncodingT> > o)  
	{
		m_cMacros.push_back(copy_ptr(o));
	}

	/** The vector CMacro is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CMacroIterator insertCMacro(CMacroIterator pos, boost::shared_ptr< _CMacro<EncodingT> > o)  
	{
		return m_cMacros.insert(pos, copy_ptr(o));
	}

	/** The vector CMacro is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCMacro(CMacroIterator pos, CMacroIterator first, CMacroIterator last)  
	{
		std::transform(first, last, std::inserter(m_cMacros, pos), static_cast< boost::shared_ptr< _CMacro<EncodingT> >(*)(boost::shared_ptr< _CMacro<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CMacro a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CMacroIterator eraseCMacro(CMacroIterator pos)  
	{
		return m_cMacros.erase(pos);
	}

	/** Removes from the vector container CMacro a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CMacroIterator eraseCMacro(CMacroIterator first, CMacroIterator last)  
	{
		return m_cMacros.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CMacro, leaving the container with a size of 0.
	*/
	void clearCMacros()  
	{
		m_cMacros.clear();
	}

	/** Returns an iterator referring to the first element in the vector container CppNotice.
	@return An iterator to the beginning of the sequence.
	*/
	CppNoticeIterator getCppNoticesBeginning()  
	{
		return m_cppNotices.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container CppNotice.
	@return An iterator to the element past the end of the sequence.
	*/
	CppNoticeIterator getCppNoticesEnd()  
	{
		return m_cppNotices.end();
	}

	/** Returns a const iterator referring to the first element in the vector container CppNotice.
	@return A const iterator to the beginning of the sequence.
	*/
	CppNoticeConstIterator getCppNoticesBeginning() const 
	{
		return m_cppNotices.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container CppNotice.
	@return A const iterator to the element past the end of the sequence.
	*/
	CppNoticeConstIterator getCppNoticesEnd() const 
	{
		return m_cppNotices.end();
	}

	/** Returns a reference to the element at position n in the vector CppNotice.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppNotice<EncodingT> >& getCppNoticeAt(size_t n)  
	{
		return m_cppNotices.at(n);
	}

	/** Returns a const reference to the element at position n in the vector CppNotice.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _CppNotice<EncodingT> > getCppNoticeAt(size_t n) const 
	{
		return m_cppNotices.at(n);
	}

	/** Returns the number of elements in the vector container CppNotice.
	@return The number of elements that conform the vector's content.
	*/
	size_t getCppNoticesSize() const 
	{
		return m_cppNotices.size();
	}

	/** Returns whether the vector container CppNotice is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isCppNoticesEmpty() const 
	{
		return m_cppNotices.empty();
	}

	/** Adds a new element at the end of the vector CppNotice, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addCppNotice(boost::shared_ptr< _CppNotice<EncodingT> > o)  
	{
		m_cppNotices.push_back(copy_ptr(o));
	}

	/** The vector CppNotice is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	CppNoticeIterator insertCppNotice(CppNoticeIterator pos, boost::shared_ptr< _CppNotice<EncodingT> > o)  
	{
		return m_cppNotices.insert(pos, copy_ptr(o));
	}

	/** The vector CppNotice is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertCppNotice(CppNoticeIterator pos, CppNoticeIterator first, CppNoticeIterator last)  
	{
		std::transform(first, last, std::inserter(m_cppNotices, pos), static_cast< boost::shared_ptr< _CppNotice<EncodingT> >(*)(boost::shared_ptr< _CppNotice<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container CppNotice a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	CppNoticeIterator eraseCppNotice(CppNoticeIterator pos)  
	{
		return m_cppNotices.erase(pos);
	}

	/** Removes from the vector container CppNotice a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	CppNoticeIterator eraseCppNotice(CppNoticeIterator first, CppNoticeIterator last)  
	{
		return m_cppNotices.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container CppNotice, leaving the container with a size of 0.
	*/
	void clearCppNotices()  
	{
		m_cppNotices.clear();
	}

	/** Prints CppFile object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "CppFile" << endl
		         << "identifier : " << m_identifier << endl
		         << "path : " << A(m_path) << endl
		         << "name : " << A(m_name) << endl
		         << "linesCount : " << m_linesCount << endl
		         << "hash : " << m_hash << endl
		         << "analyzed : " << m_analyzed;
	}

	/** Defines <i> operator<< </i> for CppFile.
	@param o Reference of C++ stream object.
	@param elem Const reference of CppFile object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _CppFile<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class CppFileIDEquality;
	class PathEquality;
	class PathInferior;
	class PathSuperior;
	class NameEquality;
	class NameInferior;
	class NameSuperior;
	class LinesCountEquality;
	class LinesCountInferior;
	class LinesCountSuperior;
	class HashEquality;
	class HashInferior;
	class HashSuperior;
	class AnalyzedEquality;
	class AnalyzedInferior;
	class AnalyzedSuperior;
};

typedef _CppFile<ucs> UniCppFile;
typedef _CppFile<ansi> CppFile;

NAMESPACE_END

#undef C
#undef A

#include "cppFilePredicate.hpp"

#endif
