/* 
 * debugFileInfo.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGFILEINFO_HPP_
#define _DEBUGFILEINFO_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _DebugFileInfoAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _CppFile;

/// debugFileInfo table represents file information for debug.
template <class EncodingT>
class  _DebugFileInfo {
private :
	int	m_identifier;
	typename EncodingT::string_t	m_compilandPath;
	boost::container::vector<unsigned char>	m_checksum;
	boost::shared_ptr< _CppFile<EncodingT> >	m_cppFile;
	Category*	m_logger;

protected :
	friend class data_access::_DebugFileInfoAccess<EncodingT>;

	/** Creates a new element DebugFileInfo.
	@param identifier 
	@param compilandPath 
	@param checksum 
	*/
	_DebugFileInfo(int identifier,
				const typename EncodingT::string_t& compilandPath,
				const boost::container::vector<unsigned char>& checksum)
	: m_identifier(identifier),
	  m_compilandPath(compilandPath),
	  m_checksum(checksum)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFileInfo "
				<< m_identifier << ' '
				<< A(m_compilandPath) << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in DebugFileInfo.
	@param identifier 
	*/
	void setIdentifier(int identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element DebugFileInfo.
	*/
	_DebugFileInfo()
	: m_identifier(-1),
	  m_compilandPath(EncodingT::EMPTY)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFileInfo ";
	}

	/** Creates a new element DebugFileInfo.
	@param compilandPath 
	@param checksum 
	*/
	_DebugFileInfo(const typename EncodingT::string_t& compilandPath,
				const boost::container::vector<unsigned char>& checksum)
	: m_identifier(-1),
	  m_compilandPath(compilandPath),
	  m_checksum(checksum)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFileInfo "
				<< m_identifier << ' '
				<< A(m_compilandPath) << ' ';
	}

	/** Creates a copy of elem as the content for the DebugFileInfo object.
	@param elem A DebugFileInfo object containing elements of the same type.
	*/
	_DebugFileInfo(const _DebugFileInfo<EncodingT>& elem)
	: m_identifier(elem.m_identifier),
	  m_compilandPath(elem.m_compilandPath),
	  m_checksum(elem.m_checksum),
	  m_cppFile(elem.m_cppFile)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFileInfo " << ": copy";
	}

	/** Assigns a copy of elem as the new content for the DebugFileInfo object.
	@param elem A DebugFileInfo object containing elements of the same type.
	@return *this
	*/
	_DebugFileInfo<EncodingT>& operator=(const _DebugFileInfo<EncodingT>& elem)  
	{
		m_identifier = elem.m_identifier;
		m_compilandPath = elem.m_compilandPath;
		m_checksum = elem.m_checksum;
		m_cppFile = elem.m_cppFile;
		return *this;
	}

	/** Returns a const reference to the element <i>identifier</i> in DebugFileInfo.
	@return 
	*/
	int getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>compilandPath</i> in DebugFileInfo.
	@return 
	*/
	const typename EncodingT::string_t& getCompilandPath() const 
	{
		return m_compilandPath;
	}

	/** Sets a value of the element <i>compilandPath</i> in DebugFileInfo.
	@param compilandPath 
	*/
	void setCompilandPath(const typename EncodingT::string_t& compilandPath)  
	{
		m_compilandPath = compilandPath;
	}

	/** Returns a const reference to the element <i>checksum</i> in DebugFileInfo.
	@return 
	*/
	const boost::container::vector<unsigned char>& getChecksum() const 
	{
		return m_checksum;
	}

	/** Sets a value of the element <i>checksum</i> in DebugFileInfo.
	@param checksum 
	*/
	void setChecksum(const boost::container::vector<unsigned char>& checksum)  
	{
		m_checksum = checksum;
	}

	/** Returns a const reference to the element <i>cppFile</i> in DebugFileInfo.
	@return 
	*/
	boost::shared_ptr< _CppFile<EncodingT> > getCppFile() const 
	{
		return m_cppFile;
	}

	/** Sets a value of the element <i>cppFile</i> in DebugFileInfo.
	@param cppFile 
	*/
	void setCppFile(boost::shared_ptr< _CppFile<EncodingT> > cppFile)  
	{
		m_cppFile = cppFile;
	}

	/** Returns whether the element <i>cppFile</i> in DebugFileInfo is NULL.
	@return True if the element <i>cppFile</i> is NULL, false otherwise.
	*/
	bool isNullCppFile() const 
	{
		return !m_cppFile;
	}

	/** Removes from DebugFileInfo an element <i>cppFile</i>.
	*/
	void eraseCppFile()  
	{
		m_cppFile.reset();
	}

	/** Prints DebugFileInfo object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "DebugFileInfo" << endl
		         << "identifier : " << m_identifier << endl
		         << "compilandPath : " << A(m_compilandPath);
	}

	/** Defines <i> operator<< </i> for DebugFileInfo.
	@param o Reference of C++ stream object.
	@param elem Const reference of DebugFileInfo object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _DebugFileInfo<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class DebugFileInfoIDEquality;
	class CompilandPathEquality;
	class CompilandPathInferior;
	class CompilandPathSuperior;
	class ChecksumEquality;
};

typedef _DebugFileInfo<ucs> UniDebugFileInfo;
typedef _DebugFileInfo<ansi> DebugFileInfo;

NAMESPACE_END

#undef C
#undef A

#include "debugFileInfoPredicate.hpp"

#endif
