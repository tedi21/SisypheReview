/* 
 * textFile.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTFILE_HPP_
#define _TEXTFILE_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _TextFileAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _TextNotice;

/// Creation Virtual Table________________Table using FTS4 describes data type for source generation. These information are not used by sqlite.textFile table represents a text file
template <class EncodingT>
class  _TextFile {
private :
	long long	m_rowid;
	typename EncodingT::string_t	m_content;
	typedef std::vector< boost::shared_ptr< _TextNotice<EncodingT> > >	vector_textNotice;
	vector_textNotice	m_textNotices;
	Category*	m_logger;

protected :
	friend class data_access::_TextFileAccess<EncodingT>;

	/** Creates a new element TextFile.
	@param rowid 
	@param content 
	*/
	_TextFile(long long rowid,
				const typename EncodingT::string_t& content)
	: m_rowid(rowid),
	  m_content(content)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _TextFile "
				<< m_rowid << ' '
				<< A(m_content) << ' ';
	}

	/** Sets a value of the element <i>rowid</i> in TextFile.
	@param rowid 
	*/
	void setRowid(long long rowid)  
	{
		m_rowid = rowid;
	}

public :
	/** Creates a new element TextFile.
	*/
	_TextFile()
	: m_rowid(-1),
	  m_content(EncodingT::EMPTY)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _TextFile ";
	}

	/** Creates a new element TextFile.
	@param content 
	*/
	_TextFile(const typename EncodingT::string_t& content)
	: m_rowid(-1),
	  m_content(content)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _TextFile "
				<< m_rowid << ' '
				<< A(m_content) << ' ';
	}

	/** Creates a copy of elem as the content for the TextFile object.
	@param elem A TextFile object containing elements of the same type.
	*/
	_TextFile(const _TextFile<EncodingT>& elem)
	: m_rowid(elem.m_rowid),
	  m_content(elem.m_content),
	  m_textNotices(copy_ptr(elem.m_textNotices))
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _TextFile " << ": copy";
	}

	/** Assigns a copy of elem as the new content for the TextFile object.
	@param elem A TextFile object containing elements of the same type.
	@return *this
	*/
	_TextFile<EncodingT>& operator=(const _TextFile<EncodingT>& elem)  
	{
		m_rowid = elem.m_rowid;
		m_content = elem.m_content;
		m_textNotices = copy_ptr(elem.m_textNotices);
		return *this;
	}

	/** Returns a const reference to the element <i>rowid</i> in TextFile.
	@return 
	*/
	long long getRowid() const 
	{
		return m_rowid;
	}

	/** Returns a const reference to the element <i>content</i> in TextFile.
	@return 
	*/
	const typename EncodingT::string_t& getContent() const 
	{
		return m_content;
	}

	/** Sets a value of the element <i>content</i> in TextFile.
	@param content 
	*/
	void setContent(const typename EncodingT::string_t& content)  
	{
		m_content = content;
	}

	/// Random access iterator types for TextNotice vector.
	typedef typename vector_textNotice::iterator	TextNoticeIterator;
	typedef typename vector_textNotice::const_iterator	TextNoticeConstIterator;

	/** Returns an iterator referring to the first element in the vector container TextNotice.
	@return An iterator to the beginning of the sequence.
	*/
	TextNoticeIterator getTextNoticesBeginning()  
	{
		return m_textNotices.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container TextNotice.
	@return An iterator to the element past the end of the sequence.
	*/
	TextNoticeIterator getTextNoticesEnd()  
	{
		return m_textNotices.end();
	}

	/** Returns a const iterator referring to the first element in the vector container TextNotice.
	@return A const iterator to the beginning of the sequence.
	*/
	TextNoticeConstIterator getTextNoticesBeginning() const 
	{
		return m_textNotices.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container TextNotice.
	@return A const iterator to the element past the end of the sequence.
	*/
	TextNoticeConstIterator getTextNoticesEnd() const 
	{
		return m_textNotices.end();
	}

	/** Returns a reference to the element at position n in the vector TextNotice.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _TextNotice<EncodingT> >& getTextNoticeAt(size_t n)  
	{
		return m_textNotices.at(n);
	}

	/** Returns a const reference to the element at position n in the vector TextNotice.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _TextNotice<EncodingT> > getTextNoticeAt(size_t n) const 
	{
		return m_textNotices.at(n);
	}

	/** Returns the number of elements in the vector container TextNotice.
	@return The number of elements that conform the vector's content.
	*/
	size_t getTextNoticesSize() const 
	{
		return m_textNotices.size();
	}

	/** Returns whether the vector container TextNotice is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isTextNoticesEmpty() const 
	{
		return m_textNotices.empty();
	}

	/** Adds a new element at the end of the vector TextNotice, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addTextNotice(boost::shared_ptr< _TextNotice<EncodingT> > o)  
	{
		m_textNotices.push_back(copy_ptr(o));
	}

	/** The vector TextNotice is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	TextNoticeIterator insertTextNotice(TextNoticeIterator pos, boost::shared_ptr< _TextNotice<EncodingT> > o)  
	{
		return m_textNotices.insert(pos, copy_ptr(o));
	}

	/** The vector TextNotice is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertTextNotice(TextNoticeIterator pos, TextNoticeIterator first, TextNoticeIterator last)  
	{
		std::transform(first, last, std::inserter(m_textNotices, pos), static_cast< boost::shared_ptr< _TextNotice<EncodingT> >(*)(boost::shared_ptr< _TextNotice<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container TextNotice a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	TextNoticeIterator eraseTextNotice(TextNoticeIterator pos)  
	{
		return m_textNotices.erase(pos);
	}

	/** Removes from the vector container TextNotice a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	TextNoticeIterator eraseTextNotice(TextNoticeIterator first, TextNoticeIterator last)  
	{
		return m_textNotices.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container TextNotice, leaving the container with a size of 0.
	*/
	void clearTextNotices()  
	{
		m_textNotices.clear();
	}

	/** Prints TextFile object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "TextFile" << endl
		         << "rowid : " << m_rowid << endl
		         << "content : " << A(m_content);
	}

	/** Defines <i> operator<< </i> for TextFile.
	@param o Reference of C++ stream object.
	@param elem Const reference of TextFile object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _TextFile<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class TextFileIDEquality;
	class ContentEquality;
	class ContentInferior;
	class ContentSuperior;
};

typedef _TextFile<ucs> UniTextFile;
typedef _TextFile<ansi> TextFile;

NAMESPACE_END

#undef C
#undef A

#include "textFilePredicate.hpp"

#endif
