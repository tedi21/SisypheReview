/* 
 * cppClassAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPCLASS_ACCESS_HPP_
#define _CPPCLASS_ACCESS_HPP_

#include <boost/scoped_ptr.hpp>
#include <memory>
#include <boost/signals2.hpp>
#include <boost/any.hpp>
#include "cppBaseExport.hpp"
#include "cppClass.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

using namespace entity; 

/// Represents an access class for CppClass object.
/// This class is used to manage CppClass entity in database.
template <class EncodingT>
class CPPBASE_API  _CppClassAccess {
private :
	std::vector< shared_ptr< _CppClass<EncodingT> > > m_backup;
	// Is a transaction in progress before queries ?
	bool m_transactionOwner;
	static _CppClassAccess<EncodingT>* m_instance; 

public:
	typedef boost::signals2::signal<void (operation_access_t, typename EncodingT::string_t const&, boost::any const&)>  signal_t;
	typedef boost::signals2::signal<void (operation_access_t)>  signal_transaction_t;
	typedef boost::signals2::connection  connection_t;

private:
	signal_t m_insertSignal;
	signal_t m_updateSignal;
	signal_t m_deleteSignal;
	signal_transaction_t m_transactionSignal;

private:
	/** Creates a new element CppClassAccess.
	*/
	_CppClassAccess();
	/** Releases the CppClassAccess object.
	*/
	~_CppClassAccess();
	Category*	m_logger;

protected :
public :
	/** Returns CppClassAccess object.
	@return Instance of CppClassAccess.
	*/
	 static _CppClassAccess<EncodingT>* getInstance();
	/** Returns CppClass objects from database.
	@param filter Condition allowing to filter data.
	@return List of CppClass objects.
	*/
	 std::vector< shared_ptr< _CppClass<EncodingT> > > getManyCppClasss(typename EncodingT::string_t const&  filter) const;
	/** Returns all CppClass objects from database.
	@return List of CppClass objects.
	*/
	 std::vector< shared_ptr< _CppClass<EncodingT> > > getAllCppClasss() const;
	/** Returns CppClass object from database.
	@param identifier 
	@return The CppClass object.
	*/
	 shared_ptr< _CppClass<EncodingT> > getOneCppClass(int identifier) const;
	/** Returns CppClass objects from database. Data are locked for update.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	@return List of CppClass objects.
	*/
	 std::vector< shared_ptr< _CppClass<EncodingT> > > selectManyCppClasss(typename EncodingT::string_t const&  filter, bool nowait = false, bool addition = false);
	/** Returns CppClass object from database. Data are locked for update.
	@param identifier 
	@param nowait Asynchonous call.
	@return The CppClass object.
	*/
	 shared_ptr< _CppClass<EncodingT> > selectOneCppClass(int identifier, bool nowait = false, bool addition = false);
	/** Returns whether the data <i>CppClass</i> are selected.
	@param o The CppClass object.
	@return True if the data <i>CppClass</i> are selected.
	*/
	 bool isSelectedCppClass(shared_ptr< _CppClass<EncodingT> > o) const;
	/** Cancel the selection. The CppClass object cannot be updated or deleted from database.
	*/
	 void cancelSelection();
	/** Fills cppFile data from database.
	@param o The CppClass object.
	*/
	 void fillCppFile(shared_ptr< _CppClass<EncodingT> > o);
	/** Fills cppInheritance data from database.
	@param o The CppClass object.
	@param nowait Asynchronous call.
	*/
	 void fillAllCppInheritances(shared_ptr< _CppClass<EncodingT> > o, bool nowait = false);
	/** Fills cppInheritance data from database.
	@param o The CppClass object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneCppInheritance(shared_ptr< _CppClass<EncodingT> > o, int identifier, bool nowait = false);
	/** Fills cppInheritance data from database.
	@param o The CppClass object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyCppInheritances(shared_ptr< _CppClass<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Fills cppFunction data from database.
	@param o The CppClass object.
	@param nowait Asynchronous call.
	*/
	 void fillAllCppFunctions(shared_ptr< _CppClass<EncodingT> > o, bool nowait = false);
	/** Fills cppFunction data from database.
	@param o The CppClass object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneCppFunction(shared_ptr< _CppClass<EncodingT> > o, int identifier, bool nowait = false);
	/** Fills cppFunction data from database.
	@param o The CppClass object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyCppFunctions(shared_ptr< _CppClass<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Fills cppAttribute data from database.
	@param o The CppClass object.
	@param nowait Asynchronous call.
	*/
	 void fillAllCppAttributes(shared_ptr< _CppClass<EncodingT> > o, bool nowait = false);
	/** Fills cppAttribute data from database.
	@param o The CppClass object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneCppAttribute(shared_ptr< _CppClass<EncodingT> > o, int identifier, bool nowait = false);
	/** Fills cppAttribute data from database.
	@param o The CppClass object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyCppAttributes(shared_ptr< _CppClass<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Returns whether CppClass data are altered from database.
	@param o The CppClass object.
	@return True if data CppClass have been altered.
	*/
	 bool isModifiedCppClass(shared_ptr< _CppClass<EncodingT> > o) const;
	/** Updates CppClass data to database.
	@param o The CppClass object.
	*/
	 void updateCppClass(shared_ptr< _CppClass<EncodingT> > o);
	/** Inserts CppClass data to database.
	@param o The CppClass object.
	*/
	 void insertCppClass(shared_ptr< _CppClass<EncodingT> > o);
	/** Deletes CppClass data to database.
	@param o The CppClass object.
	*/
	 void deleteCppClass(shared_ptr< _CppClass<EncodingT> > o);
	/** Add signal for CppClass insertion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addInsertSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for CppClass update.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addUpdateSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for CppClass deletion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addDeleteSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for CppClass transaction result.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addTransactionSignal(typename signal_transaction_t::slot_function_type subscriber);
	/** Remove signal for CppClass insertion.
	@param connection The connection
	*/
	 void removeInsertSignal(connection_t connection);
	/** Remove signal for CppClass update.
	@param connection The connection
	*/
	 void removeUpdateSignal(connection_t connection);
	/** Remove signal for CppClass deletion.
	@param connection The connection
	*/
	 void removeDeleteSignal(connection_t connection);
	/** Remove signal for CppClass transaction result.
	@param connection The connection
	*/
	 void removeTransactionSignal(connection_t connection);
};

typedef _CppClassAccess<ucs> UniCppClassAccess;
typedef _CppClassAccess<ansi> CppClassAccess;

NAMESPACE_END

#undef C
#undef A

#if !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)
#include "cppClassAccess_impl.hpp"
#endif // !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)

#endif
