/* 
 * cppFilePredicate.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFILE_PREDICATE_HPP_
#define _CPPFILE_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for CppFile object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _CppFile<EncodingT>::CppFileIDEquality {
private :
	shared_ptr< _TextFile<EncodingT> >	m_textFile;
public :
	/** Creates a new functor allowing to find CppFile object.
	@param textFile 
	*/
	CppFileIDEquality(shared_ptr< _TextFile<EncodingT> > textFile)
	: m_textFile(textFile)
	{
	}

	CppFileIDEquality(const _CppFile<EncodingT>& elem)
	: m_textFile(elem.getTextFile())
	{
	}

	bool operator()(shared_ptr< _CppFile<EncodingT> > other) const 
	{
		bool eqTextFile = (other != NULL && m_textFile == NULL && other->isNullTextFile());
		if (other != NULL && !eqTextFile && m_textFile != NULL && !other->isNullTextFile())
		{
			eqTextFile = typename _TextFile<EncodingT>::TextFileIDEquality(*m_textFile)(other->getTextFile());
		}
		return (eqTextFile);
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to find an object with the same element <i>path</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::PathEquality {
private :
	typename EncodingT::string_t	m_path;
public :
	/** Creates a new functor allowing to find CppFile object.
	@param path 
	*/
	PathEquality(const typename EncodingT::string_t& path)
	: m_path(path)
	{
	}

	bool operator()(shared_ptr< _CppFile<EncodingT> > other) const 
	{
		return (other != NULL && m_path==other->getPath());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to sort objects by <i>path</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::PathInferior {
private :
public :
	bool operator()(shared_ptr< _CppFile<EncodingT> > elem1, shared_ptr< _CppFile<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getPath() < elem2->getPath());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to sort objects by <i>path</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::PathSuperior {
private :
public :
	bool operator()(shared_ptr< _CppFile<EncodingT> > elem1, shared_ptr< _CppFile<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getPath() > elem2->getPath());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to find an object with the same element <i>name</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::NameEquality {
private :
	typename EncodingT::string_t	m_name;
public :
	/** Creates a new functor allowing to find CppFile object.
	@param name 
	*/
	NameEquality(const typename EncodingT::string_t& name)
	: m_name(name)
	{
	}

	bool operator()(shared_ptr< _CppFile<EncodingT> > other) const 
	{
		return (other != NULL && m_name==other->getName());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::NameInferior {
private :
public :
	bool operator()(shared_ptr< _CppFile<EncodingT> > elem1, shared_ptr< _CppFile<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() < elem2->getName());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::NameSuperior {
private :
public :
	bool operator()(shared_ptr< _CppFile<EncodingT> > elem1, shared_ptr< _CppFile<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() > elem2->getName());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to find an object with the same element <i>linesCount</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::LinesCountEquality {
private :
	int	m_linesCount;
public :
	/** Creates a new functor allowing to find CppFile object.
	@param linesCount 
	*/
	LinesCountEquality(int linesCount)
	: m_linesCount(linesCount)
	{
	}

	bool operator()(shared_ptr< _CppFile<EncodingT> > other) const 
	{
		return (other != NULL && m_linesCount==other->getLinesCount());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to sort objects by <i>linesCount</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::LinesCountInferior {
private :
public :
	bool operator()(shared_ptr< _CppFile<EncodingT> > elem1, shared_ptr< _CppFile<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLinesCount() < elem2->getLinesCount());
	}

};

/// Represents a comparaison class for CppFile object.
/// This class is used to sort objects by <i>linesCount</i>.
template<class EncodingT>
class  _CppFile<EncodingT>::LinesCountSuperior {
private :
public :
	bool operator()(shared_ptr< _CppFile<EncodingT> > elem1, shared_ptr< _CppFile<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLinesCount() > elem2->getLinesCount());
	}

};

NAMESPACE_END

#endif
