/* 
 * debugTypeInfoPredicate.hpp
 *
 *
 * @date 31-07-2022
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGTYPEINFO_PREDICATE_HPP_
#define _DEBUGTYPEINFO_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::DebugTypeInfoIDEquality {
private :
	long long	m_identifier;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param identifier 
	*/
	DebugTypeInfoIDEquality(long long identifier)
	: m_identifier(identifier)
	{
	}

	DebugTypeInfoIDEquality(const _DebugTypeInfo<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by ID.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::DebugTypeInfoIDInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIdentifier() < elem2->getIdentifier());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isChar</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsCharEquality {
private :
	long long	m_isChar;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isChar 
	*/
	IsCharEquality(long long isChar)
	: m_isChar(isChar)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isChar==other->getIsChar());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isChar</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsCharInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsChar() < elem2->getIsChar());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isChar</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsCharSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsChar() > elem2->getIsChar());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isString</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsStringEquality {
private :
	long long	m_isString;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isString 
	*/
	IsStringEquality(long long isString)
	: m_isString(isString)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isString==other->getIsString());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isString</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsStringInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsString() < elem2->getIsString());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isString</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsStringSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsString() > elem2->getIsString());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isBool</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsBoolEquality {
private :
	long long	m_isBool;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isBool 
	*/
	IsBoolEquality(long long isBool)
	: m_isBool(isBool)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isBool==other->getIsBool());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isBool</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsBoolInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsBool() < elem2->getIsBool());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isBool</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsBoolSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsBool() > elem2->getIsBool());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isFloat</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsFloatEquality {
private :
	long long	m_isFloat;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isFloat 
	*/
	IsFloatEquality(long long isFloat)
	: m_isFloat(isFloat)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isFloat==other->getIsFloat());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isFloat</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsFloatInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsFloat() < elem2->getIsFloat());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isFloat</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsFloatSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsFloat() > elem2->getIsFloat());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isSigned</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsSignedEquality {
private :
	long long	m_isSigned;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isSigned 
	*/
	IsSignedEquality(long long isSigned)
	: m_isSigned(isSigned)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isSigned==other->getIsSigned());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isSigned</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsSignedInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsSigned() < elem2->getIsSigned());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isSigned</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsSignedSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsSigned() > elem2->getIsSigned());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isWide</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsWideEquality {
private :
	long long	m_isWide;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isWide 
	*/
	IsWideEquality(long long isWide)
	: m_isWide(isWide)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isWide==other->getIsWide());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isWide</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsWideInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsWide() < elem2->getIsWide());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isWide</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsWideSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsWide() > elem2->getIsWide());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isPointer</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsPointerEquality {
private :
	long long	m_isPointer;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isPointer 
	*/
	IsPointerEquality(long long isPointer)
	: m_isPointer(isPointer)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isPointer==other->getIsPointer());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isPointer</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsPointerInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsPointer() < elem2->getIsPointer());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isPointer</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsPointerSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsPointer() > elem2->getIsPointer());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isReference</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsReferenceEquality {
private :
	long long	m_isReference;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isReference 
	*/
	IsReferenceEquality(long long isReference)
	: m_isReference(isReference)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isReference==other->getIsReference());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isReference</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsReferenceInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsReference() < elem2->getIsReference());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isReference</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsReferenceSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsReference() > elem2->getIsReference());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isArray</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsArrayEquality {
private :
	long long	m_isArray;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isArray 
	*/
	IsArrayEquality(long long isArray)
	: m_isArray(isArray)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isArray==other->getIsArray());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isArray</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsArrayInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsArray() < elem2->getIsArray());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isArray</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsArraySuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsArray() > elem2->getIsArray());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isConst</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsConstEquality {
private :
	long long	m_isConst;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isConst 
	*/
	IsConstEquality(long long isConst)
	: m_isConst(isConst)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isConst==other->getIsConst());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isConst</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsConstInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsConst() < elem2->getIsConst());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isConst</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsConstSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsConst() > elem2->getIsConst());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isVolatile</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsVolatileEquality {
private :
	long long	m_isVolatile;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isVolatile 
	*/
	IsVolatileEquality(long long isVolatile)
	: m_isVolatile(isVolatile)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isVolatile==other->getIsVolatile());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isVolatile</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsVolatileInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsVolatile() < elem2->getIsVolatile());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isVolatile</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsVolatileSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsVolatile() > elem2->getIsVolatile());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isStruct</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsStructEquality {
private :
	long long	m_isStruct;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isStruct 
	*/
	IsStructEquality(long long isStruct)
	: m_isStruct(isStruct)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isStruct==other->getIsStruct());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isStruct</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsStructInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsStruct() < elem2->getIsStruct());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isStruct</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsStructSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsStruct() > elem2->getIsStruct());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isClass</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsClassEquality {
private :
	long long	m_isClass;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isClass 
	*/
	IsClassEquality(long long isClass)
	: m_isClass(isClass)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isClass==other->getIsClass());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isClass</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsClassInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsClass() < elem2->getIsClass());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isClass</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsClassSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsClass() > elem2->getIsClass());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isUnion</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsUnionEquality {
private :
	long long	m_isUnion;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isUnion 
	*/
	IsUnionEquality(long long isUnion)
	: m_isUnion(isUnion)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isUnion==other->getIsUnion());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isUnion</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsUnionInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsUnion() < elem2->getIsUnion());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isUnion</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsUnionSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsUnion() > elem2->getIsUnion());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isInterface</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsInterfaceEquality {
private :
	long long	m_isInterface;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isInterface 
	*/
	IsInterfaceEquality(long long isInterface)
	: m_isInterface(isInterface)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isInterface==other->getIsInterface());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isInterface</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsInterfaceInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsInterface() < elem2->getIsInterface());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isInterface</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsInterfaceSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsInterface() > elem2->getIsInterface());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isEnum</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsEnumEquality {
private :
	long long	m_isEnum;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isEnum 
	*/
	IsEnumEquality(long long isEnum)
	: m_isEnum(isEnum)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isEnum==other->getIsEnum());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isEnum</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsEnumInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsEnum() < elem2->getIsEnum());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isEnum</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsEnumSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsEnum() > elem2->getIsEnum());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>isFunction</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsFunctionEquality {
private :
	long long	m_isFunction;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param isFunction 
	*/
	IsFunctionEquality(long long isFunction)
	: m_isFunction(isFunction)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_isFunction==other->getIsFunction());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isFunction</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsFunctionInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsFunction() < elem2->getIsFunction());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>isFunction</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::IsFunctionSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsFunction() > elem2->getIsFunction());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>baseName</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::BaseNameEquality {
private :
	typename EncodingT::string_t	m_baseName;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param baseName 
	*/
	BaseNameEquality(const typename EncodingT::string_t& baseName)
	: m_baseName(baseName)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_baseName==other->getBaseName());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>baseName</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::BaseNameInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getBaseName() < elem2->getBaseName());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>baseName</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::BaseNameSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getBaseName() > elem2->getBaseName());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>name</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::NameEquality {
private :
	typename EncodingT::string_t	m_name;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param name 
	*/
	NameEquality(const typename EncodingT::string_t& name)
	: m_name(name)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_name==other->getName());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::NameInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() < elem2->getName());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::NameSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() > elem2->getName());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>sizeOf</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::SizeOfEquality {
private :
	long long	m_sizeOf;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param sizeOf 
	*/
	SizeOfEquality(long long sizeOf)
	: m_sizeOf(sizeOf)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_sizeOf==other->getSizeOf());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>sizeOf</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::SizeOfInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getSizeOf() < elem2->getSizeOf());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>sizeOf</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::SizeOfSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getSizeOf() > elem2->getSizeOf());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>typeId</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::TypeIdEquality {
private :
	long long	m_typeId;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param typeId 
	*/
	TypeIdEquality(long long typeId)
	: m_typeId(typeId)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_typeId==other->getTypeId());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>typeId</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::TypeIdInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getTypeId() < elem2->getTypeId());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>typeId</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::TypeIdSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getTypeId() > elem2->getTypeId());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to find an object with the same element <i>arrayDim</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::ArrayDimEquality {
private :
	long long	m_arrayDim;
public :
	/** Creates a new functor allowing to find DebugTypeInfo object.
	@param arrayDim 
	*/
	ArrayDimEquality(long long arrayDim)
	: m_arrayDim(arrayDim)
	{
	}

	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& other) const 
	{
		return (other != NULL && m_arrayDim==other->getArrayDim());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>arrayDim</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::ArrayDimInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getArrayDim() < elem2->getArrayDim());
	}

};

/// Represents a comparaison class for DebugTypeInfo object.
/// This class is used to sort objects by <i>arrayDim</i>.
template<class EncodingT>
class  _DebugTypeInfo<EncodingT>::ArrayDimSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem1, const boost::shared_ptr< _DebugTypeInfo<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getArrayDim() > elem2->getArrayDim());
	}

};

NAMESPACE_END

#endif
