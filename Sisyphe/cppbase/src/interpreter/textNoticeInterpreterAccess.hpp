/* 
 * textNoticeInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTNOTICE_INTERPRETER_ACCESS_HPP_
#define _TEXTNOTICE_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class TextNoticeInterpreterAccess
: public Base<EncodingT>
{
private:
	_TextNoticeAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	TextNoticeInterpreterAccess();

	~TextNoticeInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllTextNotices();

	FACTORY_PROTOTYPE1(getManyTextNotices, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyTextNotices(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneTextNotice,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneTextNotice(shared_ptr< Base<EncodingT> > const& rowid);

	FACTORY_PROTOTYPE2(selectOneTextNotice,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneTextNotice(shared_ptr< Base<EncodingT> > const& rowid,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyTextNotices, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyTextNotices(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedTextNotice, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedTextNotice(const shared_ptr< Base<EncodingT> >& textNotice);

	FACTORY_PROTOTYPE1(fillTextFile, InOut< shared_ptr< Base<EncodingT> > >)
	void fillTextFile(shared_ptr< Base<EncodingT> >& textNotice);

	FACTORY_PROTOTYPE1(isModifiedTextNotice, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedTextNotice(const shared_ptr< Base<EncodingT> >& textNotice);

	FACTORY_PROTOTYPE1(updateTextNotice, InOut< shared_ptr< Base<EncodingT> > >)
	void updateTextNotice(shared_ptr< Base<EncodingT> >& textNotice);

	FACTORY_PROTOTYPE1(insertTextNotice, InOut< shared_ptr< Base<EncodingT> > >)
	void insertTextNotice(shared_ptr< Base<EncodingT> >& textNotice);

	FACTORY_PROTOTYPE1(deleteTextNotice, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteTextNotice(shared_ptr< Base<EncodingT> >& textNotice);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( TextNoticeInterpreterAccess, C("TextNoticeAccess") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllTextNotices, no_const_t, C("TextNoticeAccess::GetAllTextNotices") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyTextNotices, no_const_t, C("TextNoticeAccess::GetManyTextNotices") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneTextNotice, no_const_t, C("TextNoticeAccess::GetOneTextNotice") );
		METHOD_KEY_REGISTER2( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneTextNotice, no_const_t, C("TextNoticeAccess::SelectOneTextNotice") );
		METHOD_KEY_REGISTER2( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyTextNotices, no_const_t, C("TextNoticeAccess::SelectManyTextNotices") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreterAccess, void, cancelSelection, no_const_t, C("TextNoticeAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedTextNotice, no_const_t, C("TextNoticeAccess::IsSelectedTextNotice") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, void, fillTextFile, no_const_t, C("TextNoticeAccess::FillTextFile") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedTextNotice, no_const_t, C("TextNoticeAccess::IsModifiedTextNotice") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, void, updateTextNotice, no_const_t, C("TextNoticeAccess::UpdateTextNotice") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, void, insertTextNotice, no_const_t, C("TextNoticeAccess::InsertTextNotice") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, void, deleteTextNotice, no_const_t, C("TextNoticeAccess::DeleteTextNotice") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("TextNoticeAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("TextNoticeAccess") );
		METHOD_KEY_UNREGISTER ( C("TextNoticeAccess::GetAllTextNotices") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::GetManyTextNotices") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::GetOneTextNotice") );
		METHOD_KEY_UNREGISTER2( C("TextNoticeAccess::SelectOneTextNotice") );
		METHOD_KEY_UNREGISTER2( C("TextNoticeAccess::SelectManyTextNotices") );
		METHOD_KEY_UNREGISTER ( C("TextNoticeAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::IsSelectedTextNotice") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::FillTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::IsModifiedTextNotice") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::UpdateTextNotice") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::InsertTextNotice") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::DeleteTextNotice") );
		METHOD_KEY_UNREGISTER1( C("TextNoticeAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _TextNotice<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "textNoticeInterpreterAccess_impl.hpp"

#endif
