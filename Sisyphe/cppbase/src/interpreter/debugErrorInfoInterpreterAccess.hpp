/* 
 * debugErrorInfoInterpreterAccess.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGERRORINFO_INTERPRETER_ACCESS_HPP_
#define _DEBUGERRORINFO_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "Macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class DebugErrorInfoInterpreterAccess
: public Base<EncodingT>
{
private:
	_DebugErrorInfoAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	DebugErrorInfoInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getAllDebugErrorInfos();

	FACTORY_PROTOTYPE1(getManyDebugErrorInfos, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getManyDebugErrorInfos(const boost::shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneDebugErrorInfo,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getOneDebugErrorInfo(boost::shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneDebugErrorInfo,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectOneDebugErrorInfo(boost::shared_ptr< Base<EncodingT> > const& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedDebugErrorInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isSelectedDebugErrorInfo(const boost::shared_ptr< Base<EncodingT> >& debugErrorInfo);

	FACTORY_PROTOTYPE1(isModifiedDebugErrorInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isModifiedDebugErrorInfo(const boost::shared_ptr< Base<EncodingT> >& debugErrorInfo);

	FACTORY_PROTOTYPE1(updateDebugErrorInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void updateDebugErrorInfo(boost::shared_ptr< Base<EncodingT> >& debugErrorInfo);

	FACTORY_PROTOTYPE1(insertDebugErrorInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void insertDebugErrorInfo(boost::shared_ptr< Base<EncodingT> >& debugErrorInfo);

	FACTORY_PROTOTYPE1(deleteDebugErrorInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void deleteDebugErrorInfo(boost::shared_ptr< Base<EncodingT> >& debugErrorInfo);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getError(boost::shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( DebugErrorInfoInterpreterAccess, UCS("DebugErrorInfoAccess") );
		METHOD_KEY_REGISTER ( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getAllDebugErrorInfos, no_const_t, UCS("DebugErrorInfoAccess::GetAllDebugErrorInfos") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getManyDebugErrorInfos, no_const_t, UCS("DebugErrorInfoAccess::GetManyDebugErrorInfos") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getOneDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::GetOneDebugErrorInfo") );
		METHOD_KEY_REGISTER2( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectOneDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::SelectOneDebugErrorInfo") );
		METHOD_KEY_REGISTER ( DebugErrorInfoInterpreterAccess, void, cancelSelection, no_const_t, UCS("DebugErrorInfoAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isSelectedDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::IsSelectedDebugErrorInfo") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isModifiedDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::IsModifiedDebugErrorInfo") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, void, updateDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::UpdateDebugErrorInfo") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, void, insertDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::InsertDebugErrorInfo") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, void, deleteDebugErrorInfo, no_const_t, UCS("DebugErrorInfoAccess::DeleteDebugErrorInfo") );
		METHOD_KEY_REGISTER1( DebugErrorInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getError, const_t, UCS("DebugErrorInfoAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( UCS("DebugErrorInfoAccess") );
		METHOD_KEY_UNREGISTER ( UCS("DebugErrorInfoAccess::GetAllDebugErrorInfos") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::GetManyDebugErrorInfos") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::GetOneDebugErrorInfo") );
		METHOD_KEY_UNREGISTER2( UCS("DebugErrorInfoAccess::SelectOneDebugErrorInfo") );
		METHOD_KEY_UNREGISTER ( UCS("DebugErrorInfoAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::IsSelectedDebugErrorInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::IsModifiedDebugErrorInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::UpdateDebugErrorInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::InsertDebugErrorInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::DeleteDebugErrorInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugErrorInfoAccess::GetError") );
	FACTORY_END_UNREGISTER

	boost::shared_ptr< Base<EncodingT> > convert_array(const std::vector< boost::shared_ptr< _DebugErrorInfo<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "debugErrorInfoInterpreterAccess_impl.hpp"

#endif
