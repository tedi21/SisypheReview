/* 
 * textNoticeInterpreter.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTNOTICE_INTERPRETER_HPP_
#define _TEXTNOTICE_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class TextFileInterpreter;

template <class EncodingT>
class TextNoticeInterpreter
: public String<EncodingT>
{
private:
	boost::shared_ptr< _TextNotice<EncodingT> > m_value;

public:
	TextNoticeInterpreter();

	TextNoticeInterpreter(boost::shared_ptr< _TextNotice<EncodingT> > const& value);

	FACTORY_PROTOTYPE5(TextNoticeInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	TextNoticeInterpreter(boost::shared_ptr< Base<EncodingT> > const& description,
				boost::shared_ptr< Base<EncodingT> > const& category,
				boost::shared_ptr< Base<EncodingT> > const& lineNumber,
				boost::shared_ptr< Base<EncodingT> > const& startBlock,
				boost::shared_ptr< Base<EncodingT> > const& lengthBlock);

	~TextNoticeInterpreter();

	boost::shared_ptr< _TextNotice<EncodingT> > getValue() const;

	void setValue(boost::shared_ptr< _TextNotice<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getRowid() const;

	boost::shared_ptr< Base<EncodingT> > getDescription() const;

	boost::shared_ptr< Base<EncodingT> > getCategory() const;

	boost::shared_ptr< Base<EncodingT> > getLineNumber() const;

	boost::shared_ptr< Base<EncodingT> > getStartBlock() const;

	boost::shared_ptr< Base<EncodingT> > getLengthBlock() const;

	boost::shared_ptr< Base<EncodingT> > getTextFile();

	FACTORY_PROTOTYPE1(setDescription, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDescription(boost::shared_ptr< Base<EncodingT> > const& description);

	FACTORY_PROTOTYPE1(setCategory, In< boost::shared_ptr< Base<EncodingT> > >)
	void setCategory(boost::shared_ptr< Base<EncodingT> > const& category);

	FACTORY_PROTOTYPE1(setLineNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLineNumber(boost::shared_ptr< Base<EncodingT> > const& lineNumber);

	FACTORY_PROTOTYPE1(setTextFile, In< boost::shared_ptr< Base<EncodingT> > >)
	void setTextFile(boost::shared_ptr< Base<EncodingT> > const& textFile);

	FACTORY_PROTOTYPE1(setStartBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setStartBlock(boost::shared_ptr< Base<EncodingT> > const& startBlock);

	FACTORY_PROTOTYPE1(setLengthBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLengthBlock(boost::shared_ptr< Base<EncodingT> > const& lengthBlock);

	boost::shared_ptr< Base<EncodingT> > hasTextFile() const;

	void removeTextFile();

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( TextNoticeInterpreter, C("TextNotice") );
		CLASS_KEY_REGISTER5( TextNoticeInterpreter, C("TextNotice") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getRowid, const_t, C("TextNotice::Rowid") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getDescription, const_t, C("TextNotice::Description") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreter, void, setDescription, no_const_t, C("TextNotice::Description") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getCategory, const_t, C("TextNotice::Category") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreter, void, setCategory, no_const_t, C("TextNotice::Category") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getLineNumber, const_t, C("TextNotice::LineNumber") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreter, void, setLineNumber, no_const_t, C("TextNotice::LineNumber") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreter, void, setTextFile, no_const_t, C("TextNotice::TextFile") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getTextFile, no_const_t, C("TextNotice::TextFile") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, hasTextFile, const_t, C("TextNotice::HasTextFile") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, void, removeTextFile, no_const_t, C("TextNotice::removeTextFile") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getStartBlock, const_t, C("TextNotice::StartBlock") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreter, void, setStartBlock, no_const_t, C("TextNotice::StartBlock") );
		METHOD_KEY_REGISTER ( TextNoticeInterpreter, boost::shared_ptr< Base<EncodingT> >, getLengthBlock, const_t, C("TextNotice::LengthBlock") );
		METHOD_KEY_REGISTER1( TextNoticeInterpreter, void, setLengthBlock, no_const_t, C("TextNotice::LengthBlock") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("TextNotice") );
		CLASS_KEY_UNREGISTER5( C("TextNotice") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::Rowid") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::Description") );
		METHOD_KEY_UNREGISTER1( C("TextNotice::Description") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::Category") );
		METHOD_KEY_UNREGISTER1( C("TextNotice::Category") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::LineNumber") );
		METHOD_KEY_UNREGISTER1( C("TextNotice::LineNumber") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::TextFile") );
		METHOD_KEY_UNREGISTER1( C("TextNotice::TextFile") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::HasTextFile") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::removeTextFile") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::StartBlock") );
		METHOD_KEY_UNREGISTER1( C("TextNotice::StartBlock") );
		METHOD_KEY_UNREGISTER ( C("TextNotice::LengthBlock") );
		METHOD_KEY_UNREGISTER1( C("TextNotice::LengthBlock") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_textNotice(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _TextNotice<EncodingT> >& o);

template <class EncodingT>
bool reset_textNotice(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _TextNotice<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "textNoticeInterpreter_impl.hpp"

#endif
