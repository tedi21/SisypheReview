/* 
 * cppFileInterpreter.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFILE_INTERPRETER_HPP_
#define _CPPFILE_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppFunctionInterpreter;

template <class EncodingT>
class CppFunctionInterpreter;

template <class EncodingT>
class CppIncludeInterpreter;

template <class EncodingT>
class CppClassInterpreter;

template <class EncodingT>
class CppEnumInterpreter;

template <class EncodingT>
class CMacroInterpreter;

template <class EncodingT>
class DebugFileInfoInterpreter;

template <class EncodingT>
class TextFileInterpreter;

template <class EncodingT>
class CppFileTypeInterpreter;

template <class EncodingT>
class CppFileInterpreter
: public String<EncodingT>
{
private:
	boost::shared_ptr< _CppFile<EncodingT> > m_value;

public:
	CppFileInterpreter();

	CppFileInterpreter(boost::shared_ptr< _CppFile<EncodingT> > const& value);

	FACTORY_PROTOTYPE4(CppFileInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	CppFileInterpreter(boost::shared_ptr< Base<EncodingT> > const& textFile,
				boost::shared_ptr< Base<EncodingT> > const& path,
				boost::shared_ptr< Base<EncodingT> > const& name,
				boost::shared_ptr< Base<EncodingT> > const& linesCount);

	~CppFileInterpreter();

	boost::shared_ptr< _CppFile<EncodingT> > getValue() const;

	void setValue(boost::shared_ptr< _CppFile<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getPath() const;

	boost::shared_ptr< Base<EncodingT> > getName() const;

	boost::shared_ptr< Base<EncodingT> > getLinesCount() const;

	boost::shared_ptr< Base<EncodingT> > getTextFile();

	boost::shared_ptr< Base<EncodingT> > getCppFileType();

	FACTORY_PROTOTYPE1(setTextFile, In< boost::shared_ptr< Base<EncodingT> > >)
	void setTextFile(boost::shared_ptr< Base<EncodingT> > const& textFile);

	FACTORY_PROTOTYPE1(setPath, In< boost::shared_ptr< Base<EncodingT> > >)
	void setPath(boost::shared_ptr< Base<EncodingT> > const& path);

	FACTORY_PROTOTYPE1(setName, In< boost::shared_ptr< Base<EncodingT> > >)
	void setName(boost::shared_ptr< Base<EncodingT> > const& name);

	FACTORY_PROTOTYPE1(setCppFileType, In< boost::shared_ptr< Base<EncodingT> > >)
	void setCppFileType(boost::shared_ptr< Base<EncodingT> > const& cppFileType);

	FACTORY_PROTOTYPE1(setLinesCount, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLinesCount(boost::shared_ptr< Base<EncodingT> > const& linesCount);

	boost::shared_ptr< Base<EncodingT> > hasTextFile() const;

	boost::shared_ptr< Base<EncodingT> > hasCppFileType() const;

	void removeTextFile();

	void removeCppFileType();

	FACTORY_PROTOTYPE1(removeCppDeclarationFunction, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppDeclarationFunction(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppDefinitionFunction, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppDefinitionFunction(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppInclude, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppInclude(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppClass, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppClass(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppEnum, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppEnum(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCMacro, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCMacro(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeDebugFileInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeDebugFileInfo(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE2(insertCppDeclarationFunction, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppDeclarationFunction(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppDeclarationFunction);

	FACTORY_PROTOTYPE2(insertCppDefinitionFunction, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppDefinitionFunction(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppDefinitionFunction);

	FACTORY_PROTOTYPE2(insertCppInclude, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppInclude(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppInclude);

	FACTORY_PROTOTYPE2(insertCppClass, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppClass(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppClass);

	FACTORY_PROTOTYPE2(insertCppEnum, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppEnum(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppEnum);

	FACTORY_PROTOTYPE2(insertCMacro, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCMacro(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cMacro);

	FACTORY_PROTOTYPE2(insertDebugFileInfo, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertDebugFileInfo(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& debugFileInfo);

	FACTORY_PROTOTYPE1(getCppDeclarationFunction, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppDeclarationFunction(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppDefinitionFunction, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppDefinitionFunction(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppInclude, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppInclude(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppClass, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppClass(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppEnum, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppEnum(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCMacro, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCMacro(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getDebugFileInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getDebugFileInfo(boost::shared_ptr< Base<EncodingT> > const& n);

	void clearCppDeclarationFunctions();

	void clearCppDefinitionFunctions();

	void clearCppIncludes();

	void clearCppClasss();

	void clearCppEnums();

	void clearCMacros();

	void clearDebugFileInfos();

	boost::shared_ptr< Base<EncodingT> > hasCppDeclarationFunctions() const;

	boost::shared_ptr< Base<EncodingT> > hasCppDefinitionFunctions() const;

	boost::shared_ptr< Base<EncodingT> > hasCppIncludes() const;

	boost::shared_ptr< Base<EncodingT> > hasCppClasss() const;

	boost::shared_ptr< Base<EncodingT> > hasCppEnums() const;

	boost::shared_ptr< Base<EncodingT> > hasCMacros() const;

	boost::shared_ptr< Base<EncodingT> > hasDebugFileInfos() const;

	boost::shared_ptr< Base<EncodingT> > cppDeclarationFunctionsCount() const;

	boost::shared_ptr< Base<EncodingT> > cppDefinitionFunctionsCount() const;

	boost::shared_ptr< Base<EncodingT> > cppIncludesCount() const;

	boost::shared_ptr< Base<EncodingT> > cppClasssCount() const;

	boost::shared_ptr< Base<EncodingT> > cppEnumsCount() const;

	boost::shared_ptr< Base<EncodingT> > cMacrosCount() const;

	boost::shared_ptr< Base<EncodingT> > debugFileInfosCount() const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppFileInterpreter, C("CppFile") );
		CLASS_KEY_REGISTER4( CppFileInterpreter, C("CppFile") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, setTextFile, no_const_t, C("CppFile::TextFile") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getTextFile, no_const_t, C("CppFile::TextFile") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasTextFile, const_t, C("CppFile::HasTextFile") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, removeTextFile, no_const_t, C("CppFile::removeTextFile") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getPath, const_t, C("CppFile::Path") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, setPath, no_const_t, C("CppFile::Path") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getName, const_t, C("CppFile::Name") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, setName, no_const_t, C("CppFile::Name") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, setCppFileType, no_const_t, C("CppFile::CppFileType") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppFileType, no_const_t, C("CppFile::CppFileType") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppFileType, const_t, C("CppFile::HasCppFileType") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, removeCppFileType, no_const_t, C("CppFile::removeCppFileType") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getLinesCount, const_t, C("CppFile::LinesCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, setLinesCount, no_const_t, C("CppFile::LinesCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeCppDeclarationFunction, no_const_t, C("CppFile::removeCppDeclarationFunctions") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertCppDeclarationFunction, no_const_t, C("CppFile::CppDeclarationFunctions") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppDeclarationFunction, no_const_t, C("CppFile::CppDeclarationFunctions") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearCppDeclarationFunctions, no_const_t, C("CppFile::ClearCppDeclarationFunctions") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppDeclarationFunctions, const_t, C("CppFile::HasCppDeclarationFunctions") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, cppDeclarationFunctionsCount, const_t, C("CppFile::CppDeclarationFunctionsCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeCppDefinitionFunction, no_const_t, C("CppFile::removeCppDefinitionFunctions") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertCppDefinitionFunction, no_const_t, C("CppFile::CppDefinitionFunctions") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppDefinitionFunction, no_const_t, C("CppFile::CppDefinitionFunctions") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearCppDefinitionFunctions, no_const_t, C("CppFile::ClearCppDefinitionFunctions") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppDefinitionFunctions, const_t, C("CppFile::HasCppDefinitionFunctions") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, cppDefinitionFunctionsCount, const_t, C("CppFile::CppDefinitionFunctionsCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeCppInclude, no_const_t, C("CppFile::removeCppIncludes") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertCppInclude, no_const_t, C("CppFile::CppIncludes") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppInclude, no_const_t, C("CppFile::CppIncludes") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearCppIncludes, no_const_t, C("CppFile::ClearCppIncludes") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppIncludes, const_t, C("CppFile::HasCppIncludes") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, cppIncludesCount, const_t, C("CppFile::CppIncludesCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeCppClass, no_const_t, C("CppFile::removeCppClasss") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertCppClass, no_const_t, C("CppFile::CppClasss") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppClass, no_const_t, C("CppFile::CppClasss") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearCppClasss, no_const_t, C("CppFile::ClearCppClasss") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppClasss, const_t, C("CppFile::HasCppClasss") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, cppClasssCount, const_t, C("CppFile::CppClasssCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeCppEnum, no_const_t, C("CppFile::removeCppEnums") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertCppEnum, no_const_t, C("CppFile::CppEnums") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppEnum, no_const_t, C("CppFile::CppEnums") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearCppEnums, no_const_t, C("CppFile::ClearCppEnums") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppEnums, const_t, C("CppFile::HasCppEnums") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, cppEnumsCount, const_t, C("CppFile::CppEnumsCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeCMacro, no_const_t, C("CppFile::removeCMacros") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertCMacro, no_const_t, C("CppFile::CMacros") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getCMacro, no_const_t, C("CppFile::CMacros") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearCMacros, no_const_t, C("CppFile::ClearCMacros") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCMacros, const_t, C("CppFile::HasCMacros") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, cMacrosCount, const_t, C("CppFile::CMacrosCount") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, void, removeDebugFileInfo, no_const_t, C("CppFile::removeDebugFileInfos") );
		METHOD_KEY_REGISTER2( CppFileInterpreter, void, insertDebugFileInfo, no_const_t, C("CppFile::DebugFileInfos") );
		METHOD_KEY_REGISTER1( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugFileInfo, no_const_t, C("CppFile::DebugFileInfos") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, void, clearDebugFileInfos, no_const_t, C("CppFile::ClearDebugFileInfos") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, hasDebugFileInfos, const_t, C("CppFile::HasDebugFileInfos") );
		METHOD_KEY_REGISTER ( CppFileInterpreter, boost::shared_ptr< Base<EncodingT> >, debugFileInfosCount, const_t, C("CppFile::DebugFileInfosCount") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppFile") );
		CLASS_KEY_UNREGISTER4( C("CppFile") );
		METHOD_KEY_UNREGISTER ( C("CppFile::TextFile") );
		METHOD_KEY_UNREGISTER1( C("CppFile::TextFile") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasTextFile") );
		METHOD_KEY_UNREGISTER ( C("CppFile::removeTextFile") );
		METHOD_KEY_UNREGISTER ( C("CppFile::Path") );
		METHOD_KEY_UNREGISTER1( C("CppFile::Path") );
		METHOD_KEY_UNREGISTER ( C("CppFile::Name") );
		METHOD_KEY_UNREGISTER1( C("CppFile::Name") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CppFileType") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CppFileType") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCppFileType") );
		METHOD_KEY_UNREGISTER ( C("CppFile::removeCppFileType") );
		METHOD_KEY_UNREGISTER ( C("CppFile::LinesCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::LinesCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeCppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER2( C("CppFile::CppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearCppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CppDeclarationFunctionsCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeCppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER2( C("CppFile::CppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearCppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CppDefinitionFunctionsCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeCppIncludes") );
		METHOD_KEY_UNREGISTER2( C("CppFile::CppIncludes") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CppIncludes") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearCppIncludes") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCppIncludes") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CppIncludesCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeCppClasss") );
		METHOD_KEY_UNREGISTER2( C("CppFile::CppClasss") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CppClasss") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearCppClasss") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCppClasss") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CppClasssCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeCppEnums") );
		METHOD_KEY_UNREGISTER2( C("CppFile::CppEnums") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CppEnums") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearCppEnums") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCppEnums") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CppEnumsCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeCMacros") );
		METHOD_KEY_UNREGISTER2( C("CppFile::CMacros") );
		METHOD_KEY_UNREGISTER1( C("CppFile::CMacros") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearCMacros") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasCMacros") );
		METHOD_KEY_UNREGISTER ( C("CppFile::CMacrosCount") );
		METHOD_KEY_UNREGISTER1( C("CppFile::removeDebugFileInfos") );
		METHOD_KEY_UNREGISTER2( C("CppFile::DebugFileInfos") );
		METHOD_KEY_UNREGISTER1( C("CppFile::DebugFileInfos") );
		METHOD_KEY_UNREGISTER ( C("CppFile::ClearDebugFileInfos") );
		METHOD_KEY_UNREGISTER ( C("CppFile::HasDebugFileInfos") );
		METHOD_KEY_UNREGISTER ( C("CppFile::DebugFileInfosCount") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppFile(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _CppFile<EncodingT> >& o);

template <class EncodingT>
bool reset_cppFile(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _CppFile<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppFileInterpreter_impl.hpp"

#endif
