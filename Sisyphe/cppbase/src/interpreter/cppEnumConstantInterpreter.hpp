/* 
 * cppEnumConstantInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPENUMCONSTANT_INTERPRETER_HPP_
#define _CPPENUMCONSTANT_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppEnumInterpreter;

template <class EncodingT>
class CppEnumConstantInterpreter
: public String<EncodingT>
{
private:
	shared_ptr< _CppEnumConstant<EncodingT> > m_value;

public:
	CppEnumConstantInterpreter();

	CppEnumConstantInterpreter(shared_ptr< _CppEnumConstant<EncodingT> > const& value);

	FACTORY_PROTOTYPE4(CppEnumConstantInterpreter,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	CppEnumConstantInterpreter(shared_ptr< Base<EncodingT> > const& name,
				shared_ptr< Base<EncodingT> > const& defaultValue,
				shared_ptr< Base<EncodingT> > const& startBlock,
				shared_ptr< Base<EncodingT> > const& lengthBlock);

	~CppEnumConstantInterpreter();

	shared_ptr< _CppEnumConstant<EncodingT> > getValue() const;

	void setValue(shared_ptr< _CppEnumConstant<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getIdentifier() const;

	shared_ptr< Base<EncodingT> > getName() const;

	shared_ptr< Base<EncodingT> > getDefaultValue() const;

	shared_ptr< Base<EncodingT> > getStartBlock() const;

	shared_ptr< Base<EncodingT> > getLengthBlock() const;

	shared_ptr< Base<EncodingT> > getCppEnum();

	FACTORY_PROTOTYPE1(setName, In< shared_ptr< Base<EncodingT> > >)
	void setName(shared_ptr< Base<EncodingT> > const& name);

	FACTORY_PROTOTYPE1(setDefaultValue, In< shared_ptr< Base<EncodingT> > >)
	void setDefaultValue(shared_ptr< Base<EncodingT> > const& defaultValue);

	FACTORY_PROTOTYPE1(setCppEnum, In< shared_ptr< Base<EncodingT> > >)
	void setCppEnum(shared_ptr< Base<EncodingT> > const& cppEnum);

	FACTORY_PROTOTYPE1(setStartBlock, In< shared_ptr< Base<EncodingT> > >)
	void setStartBlock(shared_ptr< Base<EncodingT> > const& startBlock);

	FACTORY_PROTOTYPE1(setLengthBlock, In< shared_ptr< Base<EncodingT> > >)
	void setLengthBlock(shared_ptr< Base<EncodingT> > const& lengthBlock);

	shared_ptr< Base<EncodingT> > hasCppEnum() const;

	void removeCppEnum();

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppEnumConstantInterpreter, C("CppEnumConstant") );
		CLASS_KEY_REGISTER4( CppEnumConstantInterpreter, C("CppEnumConstant") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("CppEnumConstant::Identifier") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, getName, const_t, C("CppEnumConstant::Name") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreter, void, setName, no_const_t, C("CppEnumConstant::Name") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, getDefaultValue, const_t, C("CppEnumConstant::DefaultValue") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreter, void, setDefaultValue, no_const_t, C("CppEnumConstant::DefaultValue") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreter, void, setCppEnum, no_const_t, C("CppEnumConstant::CppEnum") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, getCppEnum, no_const_t, C("CppEnumConstant::CppEnum") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, hasCppEnum, const_t, C("CppEnumConstant::HasCppEnum") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, void, removeCppEnum, no_const_t, C("CppEnumConstant::removeCppEnum") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, getStartBlock, const_t, C("CppEnumConstant::StartBlock") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreter, void, setStartBlock, no_const_t, C("CppEnumConstant::StartBlock") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreter, shared_ptr< Base<EncodingT> >, getLengthBlock, const_t, C("CppEnumConstant::LengthBlock") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreter, void, setLengthBlock, no_const_t, C("CppEnumConstant::LengthBlock") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppEnumConstant") );
		CLASS_KEY_UNREGISTER4( C("CppEnumConstant") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::Identifier") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::Name") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstant::Name") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::DefaultValue") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstant::DefaultValue") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::CppEnum") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstant::CppEnum") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::HasCppEnum") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::removeCppEnum") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::StartBlock") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstant::StartBlock") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstant::LengthBlock") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstant::LengthBlock") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppEnumConstant(shared_ptr< Base<EncodingT> > const& val, shared_ptr< _CppEnumConstant<EncodingT> >& o);

template <class EncodingT>
bool reset_cppEnumConstant(shared_ptr< Base<EncodingT> >& val, shared_ptr< _CppEnumConstant<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppEnumConstantInterpreter_impl.hpp"

#endif
