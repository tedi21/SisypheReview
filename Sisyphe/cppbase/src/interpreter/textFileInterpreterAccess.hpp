/* 
 * textFileInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTFILE_INTERPRETER_ACCESS_HPP_
#define _TEXTFILE_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class TextFileInterpreterAccess
: public Base<EncodingT>
{
private:
	_TextFileAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	TextFileInterpreterAccess();

	~TextFileInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllTextFiles();

	FACTORY_PROTOTYPE1(getManyTextFiles, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyTextFiles(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneTextFile,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneTextFile(shared_ptr< Base<EncodingT> > const& rowid);

	FACTORY_PROTOTYPE2(selectOneTextFile,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneTextFile(shared_ptr< Base<EncodingT> > const& rowid,
				const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedTextFile, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedTextFile(const shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE2(fillAllTextNotices, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllTextNotices(shared_ptr< Base<EncodingT> >& textFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneTextNotice,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneTextNotice(shared_ptr< Base<EncodingT> >& refTextFile,
				const shared_ptr< Base<EncodingT> >& rowid,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyTextNotices, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyTextNotices(shared_ptr< Base<EncodingT> >& textFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedTextFile, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedTextFile(const shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE1(updateTextFile, InOut< shared_ptr< Base<EncodingT> > >)
	void updateTextFile(shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE1(insertTextFile, InOut< shared_ptr< Base<EncodingT> > >)
	void insertTextFile(shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE1(deleteTextFile, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteTextFile(shared_ptr< Base<EncodingT> >& textFile);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( TextFileInterpreterAccess, C("TextFileAccess") );
		METHOD_KEY_REGISTER ( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllTextFiles, no_const_t, C("TextFileAccess::GetAllTextFiles") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyTextFiles, no_const_t, C("TextFileAccess::GetManyTextFiles") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneTextFile, no_const_t, C("TextFileAccess::GetOneTextFile") );
		METHOD_KEY_REGISTER2( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneTextFile, no_const_t, C("TextFileAccess::SelectOneTextFile") );
		METHOD_KEY_REGISTER ( TextFileInterpreterAccess, void, cancelSelection, no_const_t, C("TextFileAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedTextFile, no_const_t, C("TextFileAccess::IsSelectedTextFile") );
		METHOD_KEY_REGISTER2( TextFileInterpreterAccess, void, fillAllTextNotices, no_const_t, C("TextFileAccess::FillAllTextNotices") );
		METHOD_KEY_REGISTER3( TextFileInterpreterAccess, void, fillOneTextNotice, no_const_t, C("TextFileAccess::FillOneTextNotice") );
		METHOD_KEY_REGISTER3( TextFileInterpreterAccess, void, fillManyTextNotices, no_const_t, C("TextFileAccess::FillManyTextNotices") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedTextFile, no_const_t, C("TextFileAccess::IsModifiedTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, void, updateTextFile, no_const_t, C("TextFileAccess::UpdateTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, void, insertTextFile, no_const_t, C("TextFileAccess::InsertTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, void, deleteTextFile, no_const_t, C("TextFileAccess::DeleteTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("TextFileAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("TextFileAccess") );
		METHOD_KEY_UNREGISTER ( C("TextFileAccess::GetAllTextFiles") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::GetManyTextFiles") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::GetOneTextFile") );
		METHOD_KEY_UNREGISTER2( C("TextFileAccess::SelectOneTextFile") );
		METHOD_KEY_UNREGISTER ( C("TextFileAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::IsSelectedTextFile") );
		METHOD_KEY_UNREGISTER2( C("TextFileAccess::FillAllTextNotices") );
		METHOD_KEY_UNREGISTER3( C("TextFileAccess::FillOneTextNotice") );
		METHOD_KEY_UNREGISTER3( C("TextFileAccess::FillManyTextNotices") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::IsModifiedTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::UpdateTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::InsertTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::DeleteTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _TextFile<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "textFileInterpreterAccess_impl.hpp"

#endif
