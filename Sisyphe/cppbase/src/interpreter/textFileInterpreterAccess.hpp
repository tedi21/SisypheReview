/* 
 * textFileInterpreterAccess.hpp
 *
 *
 * @date 10-05-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTFILE_INTERPRETER_ACCESS_HPP_
#define _TEXTFILE_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class TextFileInterpreterAccess
: public Base<EncodingT>
{
private:
	_TextFileAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	TextFileInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getAllTextFiles();

	FACTORY_PROTOTYPE1(getManyTextFiles, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getManyTextFiles(const boost::shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneTextFile,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getOneTextFile(boost::shared_ptr< Base<EncodingT> > const& rowid);

	FACTORY_PROTOTYPE2(selectOneTextFile,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectOneTextFile(boost::shared_ptr< Base<EncodingT> > const& rowid,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedTextFile, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isSelectedTextFile(const boost::shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE2(fillAllCppFiles, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillAllCppFiles(boost::shared_ptr< Base<EncodingT> >& textFile, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppFile,
				InOut< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	void fillOneCppFile(boost::shared_ptr< Base<EncodingT> >& refTextFile,
				const boost::shared_ptr< Base<EncodingT> >& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppFiles, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillManyCppFiles(boost::shared_ptr< Base<EncodingT> >& textFile, const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllDebugFileInfos, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillAllDebugFileInfos(boost::shared_ptr< Base<EncodingT> >& textFile, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneDebugFileInfo,
				InOut< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	void fillOneDebugFileInfo(boost::shared_ptr< Base<EncodingT> >& refTextFile,
				const boost::shared_ptr< Base<EncodingT> >& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyDebugFileInfos, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillManyDebugFileInfos(boost::shared_ptr< Base<EncodingT> >& textFile, const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedTextFile, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isModifiedTextFile(const boost::shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE1(updateTextFile, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void updateTextFile(boost::shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE1(insertTextFile, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void insertTextFile(boost::shared_ptr< Base<EncodingT> >& textFile);

	FACTORY_PROTOTYPE1(deleteTextFile, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void deleteTextFile(boost::shared_ptr< Base<EncodingT> >& textFile);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getError(boost::shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( TextFileInterpreterAccess, C("TextFileAccess") );
		METHOD_KEY_REGISTER ( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getAllTextFiles, no_const_t, C("TextFileAccess::GetAllTextFiles") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getManyTextFiles, no_const_t, C("TextFileAccess::GetManyTextFiles") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getOneTextFile, no_const_t, C("TextFileAccess::GetOneTextFile") );
		METHOD_KEY_REGISTER2( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectOneTextFile, no_const_t, C("TextFileAccess::SelectOneTextFile") );
		METHOD_KEY_REGISTER ( TextFileInterpreterAccess, void, cancelSelection, no_const_t, C("TextFileAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isSelectedTextFile, no_const_t, C("TextFileAccess::IsSelectedTextFile") );
		METHOD_KEY_REGISTER2( TextFileInterpreterAccess, void, fillAllCppFiles, no_const_t, C("TextFileAccess::FillAllCppFiles") );
		METHOD_KEY_REGISTER3( TextFileInterpreterAccess, void, fillOneCppFile, no_const_t, C("TextFileAccess::FillOneCppFile") );
		METHOD_KEY_REGISTER3( TextFileInterpreterAccess, void, fillManyCppFiles, no_const_t, C("TextFileAccess::FillManyCppFiles") );
		METHOD_KEY_REGISTER2( TextFileInterpreterAccess, void, fillAllDebugFileInfos, no_const_t, C("TextFileAccess::FillAllDebugFileInfos") );
		METHOD_KEY_REGISTER3( TextFileInterpreterAccess, void, fillOneDebugFileInfo, no_const_t, C("TextFileAccess::FillOneDebugFileInfo") );
		METHOD_KEY_REGISTER3( TextFileInterpreterAccess, void, fillManyDebugFileInfos, no_const_t, C("TextFileAccess::FillManyDebugFileInfos") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isModifiedTextFile, no_const_t, C("TextFileAccess::IsModifiedTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, void, updateTextFile, no_const_t, C("TextFileAccess::UpdateTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, void, insertTextFile, no_const_t, C("TextFileAccess::InsertTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, void, deleteTextFile, no_const_t, C("TextFileAccess::DeleteTextFile") );
		METHOD_KEY_REGISTER1( TextFileInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getError, const_t, C("TextFileAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("TextFileAccess") );
		METHOD_KEY_UNREGISTER ( C("TextFileAccess::GetAllTextFiles") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::GetManyTextFiles") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::GetOneTextFile") );
		METHOD_KEY_UNREGISTER2( C("TextFileAccess::SelectOneTextFile") );
		METHOD_KEY_UNREGISTER ( C("TextFileAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::IsSelectedTextFile") );
		METHOD_KEY_UNREGISTER2( C("TextFileAccess::FillAllCppFiles") );
		METHOD_KEY_UNREGISTER3( C("TextFileAccess::FillOneCppFile") );
		METHOD_KEY_UNREGISTER3( C("TextFileAccess::FillManyCppFiles") );
		METHOD_KEY_UNREGISTER2( C("TextFileAccess::FillAllDebugFileInfos") );
		METHOD_KEY_UNREGISTER3( C("TextFileAccess::FillOneDebugFileInfo") );
		METHOD_KEY_UNREGISTER3( C("TextFileAccess::FillManyDebugFileInfos") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::IsModifiedTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::UpdateTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::InsertTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::DeleteTextFile") );
		METHOD_KEY_UNREGISTER1( C("TextFileAccess::GetError") );
	FACTORY_END_UNREGISTER

	boost::shared_ptr< Base<EncodingT> > convert_array(const std::vector< boost::shared_ptr< _TextFile<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "textFileInterpreterAccess_impl.hpp"

#endif
