/* 
 * cppParameterInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPPARAMETER_INTERPRETER_ACCESS_HPP_
#define _CPPPARAMETER_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppParameterInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppParameterAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppParameterInterpreterAccess();

	~CppParameterInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllCppParameters();

	FACTORY_PROTOTYPE1(getManyCppParameters, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyCppParameters(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppParameter,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneCppParameter(shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppParameter,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneCppParameter(shared_ptr< Base<EncodingT> > const& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppParameters, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyCppParameters(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppParameter, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedCppParameter(const shared_ptr< Base<EncodingT> >& cppParameter);

	FACTORY_PROTOTYPE1(fillCppFunction, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppFunction(shared_ptr< Base<EncodingT> >& cppParameter);

	FACTORY_PROTOTYPE1(isModifiedCppParameter, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedCppParameter(const shared_ptr< Base<EncodingT> >& cppParameter);

	FACTORY_PROTOTYPE1(updateCppParameter, InOut< shared_ptr< Base<EncodingT> > >)
	void updateCppParameter(shared_ptr< Base<EncodingT> >& cppParameter);

	FACTORY_PROTOTYPE1(insertCppParameter, InOut< shared_ptr< Base<EncodingT> > >)
	void insertCppParameter(shared_ptr< Base<EncodingT> >& cppParameter);

	FACTORY_PROTOTYPE1(deleteCppParameter, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteCppParameter(shared_ptr< Base<EncodingT> >& cppParameter);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppParameterInterpreterAccess, C("CppParameterAccess") );
		METHOD_KEY_REGISTER ( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllCppParameters, no_const_t, C("CppParameterAccess::GetAllCppParameters") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyCppParameters, no_const_t, C("CppParameterAccess::GetManyCppParameters") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneCppParameter, no_const_t, C("CppParameterAccess::GetOneCppParameter") );
		METHOD_KEY_REGISTER2( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneCppParameter, no_const_t, C("CppParameterAccess::SelectOneCppParameter") );
		METHOD_KEY_REGISTER2( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyCppParameters, no_const_t, C("CppParameterAccess::SelectManyCppParameters") );
		METHOD_KEY_REGISTER ( CppParameterInterpreterAccess, void, cancelSelection, no_const_t, C("CppParameterAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedCppParameter, no_const_t, C("CppParameterAccess::IsSelectedCppParameter") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, void, fillCppFunction, no_const_t, C("CppParameterAccess::FillCppFunction") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedCppParameter, no_const_t, C("CppParameterAccess::IsModifiedCppParameter") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, void, updateCppParameter, no_const_t, C("CppParameterAccess::UpdateCppParameter") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, void, insertCppParameter, no_const_t, C("CppParameterAccess::InsertCppParameter") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, void, deleteCppParameter, no_const_t, C("CppParameterAccess::DeleteCppParameter") );
		METHOD_KEY_REGISTER1( CppParameterInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("CppParameterAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppParameterAccess") );
		METHOD_KEY_UNREGISTER ( C("CppParameterAccess::GetAllCppParameters") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::GetManyCppParameters") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::GetOneCppParameter") );
		METHOD_KEY_UNREGISTER2( C("CppParameterAccess::SelectOneCppParameter") );
		METHOD_KEY_UNREGISTER2( C("CppParameterAccess::SelectManyCppParameters") );
		METHOD_KEY_UNREGISTER ( C("CppParameterAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::IsSelectedCppParameter") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::FillCppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::IsModifiedCppParameter") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::UpdateCppParameter") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::InsertCppParameter") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::DeleteCppParameter") );
		METHOD_KEY_UNREGISTER1( C("CppParameterAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _CppParameter<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppParameterInterpreterAccess_impl.hpp"

#endif
