/* 
 * cppClassInterpreter.hpp
 *
 *
 * @date 10-05-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPCLASS_INTERPRETER_HPP_
#define _CPPCLASS_INTERPRETER_HPP_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppInheritanceInterpreter;

template <class EncodingT>
class CppFunctionInterpreter;

template <class EncodingT>
class CppClassInterpreter;

template <class EncodingT>
class CppAttributeInterpreter;

template <class EncodingT>
class CppEnumInterpreter;

template <class EncodingT>
class CppClassInterpreter;

template <class EncodingT>
class CppFileInterpreter;

template <class EncodingT>
class CppClassInterpreter
: public Base<EncodingT>
{
private:
	boost::shared_ptr< _CppClass<EncodingT> > m_value;

public:
	CppClassInterpreter();

	CppClassInterpreter(boost::shared_ptr< _CppClass<EncodingT> > const& value);

	FACTORY_PROTOTYPE11(CppClassInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	CppClassInterpreter(boost::shared_ptr< Base<EncodingT> > const& name,
				boost::shared_ptr< Base<EncodingT> > const& fullName,
				boost::shared_ptr< Base<EncodingT> > const& accessSpecifier,
				boost::shared_ptr< Base<EncodingT> > const& isStruct,
				boost::shared_ptr< Base<EncodingT> > const& isInterface,
				boost::shared_ptr< Base<EncodingT> > const& isAbstract,
				boost::shared_ptr< Base<EncodingT> > const& isTemplate,
				boost::shared_ptr< Base<EncodingT> > const& linesCount,
				boost::shared_ptr< Base<EncodingT> > const& lineNumber,
				boost::shared_ptr< Base<EncodingT> > const& startBlock,
				boost::shared_ptr< Base<EncodingT> > const& lengthBlock);

	boost::shared_ptr< _CppClass<EncodingT> > value() const;

	void value(boost::shared_ptr< _CppClass<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getIdentifier() const;

	boost::shared_ptr< Base<EncodingT> > getName() const;

	boost::shared_ptr< Base<EncodingT> > getFullName() const;

	boost::shared_ptr< Base<EncodingT> > getAccessSpecifier() const;

	boost::shared_ptr< Base<EncodingT> > getIsStruct() const;

	boost::shared_ptr< Base<EncodingT> > getIsInterface() const;

	boost::shared_ptr< Base<EncodingT> > getIsAbstract() const;

	boost::shared_ptr< Base<EncodingT> > getIsTemplate() const;

	boost::shared_ptr< Base<EncodingT> > getLinesCount() const;

	boost::shared_ptr< Base<EncodingT> > getLineNumber() const;

	boost::shared_ptr< Base<EncodingT> > getStartBlock() const;

	boost::shared_ptr< Base<EncodingT> > getLengthBlock() const;

	boost::shared_ptr< Base<EncodingT> > getEncapsulationClass();

	boost::shared_ptr< Base<EncodingT> > getCppFile();

	FACTORY_PROTOTYPE1(setEncapsulationClass, In< boost::shared_ptr< Base<EncodingT> > >)
	void setEncapsulationClass(boost::shared_ptr< Base<EncodingT> > const& encapsulationClass);

	FACTORY_PROTOTYPE1(setName, In< boost::shared_ptr< Base<EncodingT> > >)
	void setName(boost::shared_ptr< Base<EncodingT> > const& name);

	FACTORY_PROTOTYPE1(setFullName, In< boost::shared_ptr< Base<EncodingT> > >)
	void setFullName(boost::shared_ptr< Base<EncodingT> > const& fullName);

	FACTORY_PROTOTYPE1(setAccessSpecifier, In< boost::shared_ptr< Base<EncodingT> > >)
	void setAccessSpecifier(boost::shared_ptr< Base<EncodingT> > const& accessSpecifier);

	FACTORY_PROTOTYPE1(setIsStruct, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsStruct(boost::shared_ptr< Base<EncodingT> > const& isStruct);

	FACTORY_PROTOTYPE1(setIsInterface, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsInterface(boost::shared_ptr< Base<EncodingT> > const& isInterface);

	FACTORY_PROTOTYPE1(setIsAbstract, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsAbstract(boost::shared_ptr< Base<EncodingT> > const& isAbstract);

	FACTORY_PROTOTYPE1(setIsTemplate, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsTemplate(boost::shared_ptr< Base<EncodingT> > const& isTemplate);

	FACTORY_PROTOTYPE1(setLinesCount, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLinesCount(boost::shared_ptr< Base<EncodingT> > const& linesCount);

	FACTORY_PROTOTYPE1(setCppFile, In< boost::shared_ptr< Base<EncodingT> > >)
	void setCppFile(boost::shared_ptr< Base<EncodingT> > const& cppFile);

	FACTORY_PROTOTYPE1(setLineNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLineNumber(boost::shared_ptr< Base<EncodingT> > const& lineNumber);

	FACTORY_PROTOTYPE1(setStartBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setStartBlock(boost::shared_ptr< Base<EncodingT> > const& startBlock);

	FACTORY_PROTOTYPE1(setLengthBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLengthBlock(boost::shared_ptr< Base<EncodingT> > const& lengthBlock);

	boost::shared_ptr< Base<EncodingT> > hasEncapsulationClass() const;

	boost::shared_ptr< Base<EncodingT> > hasCppFile() const;

	void removeEncapsulationClass();

	void removeCppFile();

	FACTORY_PROTOTYPE1(removeCppInheritance, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppInheritance(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppFunction, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppFunction(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeInternClasse, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeInternClasse(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppAttribute, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppAttribute(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppEnum, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppEnum(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE2(insertCppInheritance, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppInheritance(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppInheritance);

	FACTORY_PROTOTYPE2(insertCppFunction, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppFunction(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppFunction);

	FACTORY_PROTOTYPE2(insertInternClasse, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertInternClasse(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& internClasse);

	FACTORY_PROTOTYPE2(insertCppAttribute, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppAttribute(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppAttribute);

	FACTORY_PROTOTYPE2(insertCppEnum, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppEnum(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppEnum);

	FACTORY_PROTOTYPE1(getCppInheritance, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppInheritance(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppFunction, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppFunction(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getInternClasse, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getInternClasse(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppAttribute, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppAttribute(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppEnum, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppEnum(boost::shared_ptr< Base<EncodingT> > const& n);

	void clearCppInheritances();

	void clearCppFunctions();

	void clearInternClasses();

	void clearCppAttributes();

	void clearCppEnums();

	boost::shared_ptr< Base<EncodingT> > hasCppInheritances() const;

	boost::shared_ptr< Base<EncodingT> > hasCppFunctions() const;

	boost::shared_ptr< Base<EncodingT> > hasInternClasses() const;

	boost::shared_ptr< Base<EncodingT> > hasCppAttributes() const;

	boost::shared_ptr< Base<EncodingT> > hasCppEnums() const;

	boost::shared_ptr< Base<EncodingT> > cppInheritancesCount() const;

	boost::shared_ptr< Base<EncodingT> > cppFunctionsCount() const;

	boost::shared_ptr< Base<EncodingT> > internClassesCount() const;

	boost::shared_ptr< Base<EncodingT> > cppAttributesCount() const;

	boost::shared_ptr< Base<EncodingT> > cppEnumsCount() const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppClassInterpreter, UCS("CppClass") );
		CLASS_KEY_REGISTER11( CppClassInterpreter, UCS("CppClass") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setEncapsulationClass, no_const_t, UCS("CppClass::EncapsulationClass") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getEncapsulationClass, no_const_t, UCS("CppClass::EncapsulationClass") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasEncapsulationClass, const_t, UCS("CppClass::HasEncapsulationClass") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, removeEncapsulationClass, no_const_t, UCS("CppClass::removeEncapsulationClass") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getIdentifier, const_t, UCS("CppClass::Identifier") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getName, const_t, UCS("CppClass::Name") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setName, no_const_t, UCS("CppClass::Name") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getFullName, const_t, UCS("CppClass::FullName") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setFullName, no_const_t, UCS("CppClass::FullName") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getAccessSpecifier, const_t, UCS("CppClass::AccessSpecifier") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setAccessSpecifier, no_const_t, UCS("CppClass::AccessSpecifier") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsStruct, const_t, UCS("CppClass::IsStruct") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setIsStruct, no_const_t, UCS("CppClass::IsStruct") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsInterface, const_t, UCS("CppClass::IsInterface") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setIsInterface, no_const_t, UCS("CppClass::IsInterface") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsAbstract, const_t, UCS("CppClass::IsAbstract") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setIsAbstract, no_const_t, UCS("CppClass::IsAbstract") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsTemplate, const_t, UCS("CppClass::IsTemplate") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setIsTemplate, no_const_t, UCS("CppClass::IsTemplate") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getLinesCount, const_t, UCS("CppClass::LinesCount") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setLinesCount, no_const_t, UCS("CppClass::LinesCount") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setCppFile, no_const_t, UCS("CppClass::CppFile") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppFile, no_const_t, UCS("CppClass::CppFile") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppFile, const_t, UCS("CppClass::HasCppFile") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, removeCppFile, no_const_t, UCS("CppClass::removeCppFile") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getLineNumber, const_t, UCS("CppClass::LineNumber") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setLineNumber, no_const_t, UCS("CppClass::LineNumber") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getStartBlock, const_t, UCS("CppClass::StartBlock") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setStartBlock, no_const_t, UCS("CppClass::StartBlock") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getLengthBlock, const_t, UCS("CppClass::LengthBlock") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, setLengthBlock, no_const_t, UCS("CppClass::LengthBlock") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, removeCppInheritance, no_const_t, UCS("CppClass::removeCppInheritances") );
		METHOD_KEY_REGISTER2( CppClassInterpreter, void, insertCppInheritance, no_const_t, UCS("CppClass::CppInheritances") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppInheritance, no_const_t, UCS("CppClass::CppInheritances") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, clearCppInheritances, no_const_t, UCS("CppClass::ClearCppInheritances") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppInheritances, const_t, UCS("CppClass::HasCppInheritances") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, cppInheritancesCount, const_t, UCS("CppClass::CppInheritancesCount") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, removeCppFunction, no_const_t, UCS("CppClass::removeCppFunctions") );
		METHOD_KEY_REGISTER2( CppClassInterpreter, void, insertCppFunction, no_const_t, UCS("CppClass::CppFunctions") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppFunction, no_const_t, UCS("CppClass::CppFunctions") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, clearCppFunctions, no_const_t, UCS("CppClass::ClearCppFunctions") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppFunctions, const_t, UCS("CppClass::HasCppFunctions") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, cppFunctionsCount, const_t, UCS("CppClass::CppFunctionsCount") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, removeInternClasse, no_const_t, UCS("CppClass::removeInternClasses") );
		METHOD_KEY_REGISTER2( CppClassInterpreter, void, insertInternClasse, no_const_t, UCS("CppClass::InternClasses") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getInternClasse, no_const_t, UCS("CppClass::InternClasses") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, clearInternClasses, no_const_t, UCS("CppClass::ClearInternClasses") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasInternClasses, const_t, UCS("CppClass::HasInternClasses") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, internClassesCount, const_t, UCS("CppClass::InternClassesCount") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, removeCppAttribute, no_const_t, UCS("CppClass::removeCppAttributes") );
		METHOD_KEY_REGISTER2( CppClassInterpreter, void, insertCppAttribute, no_const_t, UCS("CppClass::CppAttributes") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppAttribute, no_const_t, UCS("CppClass::CppAttributes") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, clearCppAttributes, no_const_t, UCS("CppClass::ClearCppAttributes") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppAttributes, const_t, UCS("CppClass::HasCppAttributes") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, cppAttributesCount, const_t, UCS("CppClass::CppAttributesCount") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, void, removeCppEnum, no_const_t, UCS("CppClass::removeCppEnums") );
		METHOD_KEY_REGISTER2( CppClassInterpreter, void, insertCppEnum, no_const_t, UCS("CppClass::CppEnums") );
		METHOD_KEY_REGISTER1( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppEnum, no_const_t, UCS("CppClass::CppEnums") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, void, clearCppEnums, no_const_t, UCS("CppClass::ClearCppEnums") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppEnums, const_t, UCS("CppClass::HasCppEnums") );
		METHOD_KEY_REGISTER ( CppClassInterpreter, boost::shared_ptr< Base<EncodingT> >, cppEnumsCount, const_t, UCS("CppClass::CppEnumsCount") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( UCS("CppClass") );
		CLASS_KEY_UNREGISTER11( UCS("CppClass") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::EncapsulationClass") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::EncapsulationClass") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasEncapsulationClass") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::removeEncapsulationClass") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::Identifier") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::Name") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::Name") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::FullName") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::FullName") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::AccessSpecifier") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::AccessSpecifier") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::IsStruct") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::IsStruct") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::IsInterface") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::IsInterface") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::IsAbstract") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::IsAbstract") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::IsTemplate") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::IsTemplate") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::LinesCount") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::LinesCount") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::CppFile") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::CppFile") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasCppFile") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::removeCppFile") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::LineNumber") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::LineNumber") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::StartBlock") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::StartBlock") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::LengthBlock") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::LengthBlock") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::removeCppInheritances") );
		METHOD_KEY_UNREGISTER2( UCS("CppClass::CppInheritances") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::CppInheritances") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::ClearCppInheritances") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasCppInheritances") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::CppInheritancesCount") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::removeCppFunctions") );
		METHOD_KEY_UNREGISTER2( UCS("CppClass::CppFunctions") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::CppFunctions") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::ClearCppFunctions") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasCppFunctions") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::CppFunctionsCount") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::removeInternClasses") );
		METHOD_KEY_UNREGISTER2( UCS("CppClass::InternClasses") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::InternClasses") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::ClearInternClasses") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasInternClasses") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::InternClassesCount") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::removeCppAttributes") );
		METHOD_KEY_UNREGISTER2( UCS("CppClass::CppAttributes") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::CppAttributes") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::ClearCppAttributes") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasCppAttributes") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::CppAttributesCount") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::removeCppEnums") );
		METHOD_KEY_UNREGISTER2( UCS("CppClass::CppEnums") );
		METHOD_KEY_UNREGISTER1( UCS("CppClass::CppEnums") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::ClearCppEnums") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::HasCppEnums") );
		METHOD_KEY_UNREGISTER ( UCS("CppClass::CppEnumsCount") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppClass(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _CppClass<EncodingT> >& o);

template <class EncodingT>
bool reset_cppClass(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _CppClass<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppClassInterpreter_impl.hpp"

#endif
