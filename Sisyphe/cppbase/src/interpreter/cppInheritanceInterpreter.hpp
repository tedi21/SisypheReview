/* 
 * cppInheritanceInterpreter.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPINHERITANCE_INTERPRETER_HPP_
#define _CPPINHERITANCE_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "Base.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppClassInterpreter;

template <class EncodingT>
class CppInheritanceInterpreter
: public Base<EncodingT>
{
private:
	boost::shared_ptr< _CppInheritance<EncodingT> > m_value;

public:
	CppInheritanceInterpreter();

	CppInheritanceInterpreter(boost::shared_ptr< _CppInheritance<EncodingT> > const& value);

	FACTORY_PROTOTYPE2(CppInheritanceInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	CppInheritanceInterpreter(boost::shared_ptr< Base<EncodingT> > const& baseClassName,
				boost::shared_ptr< Base<EncodingT> > const& baseAccess);

	boost::shared_ptr< _CppInheritance<EncodingT> > value() const;

	void value(boost::shared_ptr< _CppInheritance<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getIdentifier() const;

	boost::shared_ptr< Base<EncodingT> > getBaseClassName() const;

	boost::shared_ptr< Base<EncodingT> > getBaseAccess() const;

	boost::shared_ptr< Base<EncodingT> > getDerived();

	FACTORY_PROTOTYPE1(setDerived, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDerived(boost::shared_ptr< Base<EncodingT> > const& derived);

	FACTORY_PROTOTYPE1(setBaseClassName, In< boost::shared_ptr< Base<EncodingT> > >)
	void setBaseClassName(boost::shared_ptr< Base<EncodingT> > const& baseClassName);

	FACTORY_PROTOTYPE1(setBaseAccess, In< boost::shared_ptr< Base<EncodingT> > >)
	void setBaseAccess(boost::shared_ptr< Base<EncodingT> > const& baseAccess);

	boost::shared_ptr< Base<EncodingT> > hasDerived() const;

	void removeDerived();

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppInheritanceInterpreter, C("CppInheritance") );
		CLASS_KEY_REGISTER2( CppInheritanceInterpreter, C("CppInheritance") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreter, void, setDerived, no_const_t, C("CppInheritance::Derived") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreter, boost::shared_ptr< Base<EncodingT> >, getDerived, no_const_t, C("CppInheritance::Derived") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreter, boost::shared_ptr< Base<EncodingT> >, hasDerived, const_t, C("CppInheritance::HasDerived") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreter, void, removeDerived, no_const_t, C("CppInheritance::removeDerived") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreter, boost::shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("CppInheritance::Identifier") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreter, boost::shared_ptr< Base<EncodingT> >, getBaseClassName, const_t, C("CppInheritance::BaseClassName") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreter, void, setBaseClassName, no_const_t, C("CppInheritance::BaseClassName") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreter, boost::shared_ptr< Base<EncodingT> >, getBaseAccess, const_t, C("CppInheritance::BaseAccess") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreter, void, setBaseAccess, no_const_t, C("CppInheritance::BaseAccess") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppInheritance") );
		CLASS_KEY_UNREGISTER2( C("CppInheritance") );
		METHOD_KEY_UNREGISTER ( C("CppInheritance::Derived") );
		METHOD_KEY_UNREGISTER1( C("CppInheritance::Derived") );
		METHOD_KEY_UNREGISTER ( C("CppInheritance::HasDerived") );
		METHOD_KEY_UNREGISTER ( C("CppInheritance::removeDerived") );
		METHOD_KEY_UNREGISTER ( C("CppInheritance::Identifier") );
		METHOD_KEY_UNREGISTER ( C("CppInheritance::BaseClassName") );
		METHOD_KEY_UNREGISTER1( C("CppInheritance::BaseClassName") );
		METHOD_KEY_UNREGISTER ( C("CppInheritance::BaseAccess") );
		METHOD_KEY_UNREGISTER1( C("CppInheritance::BaseAccess") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppInheritance(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _CppInheritance<EncodingT> >& o);

template <class EncodingT>
bool reset_cppInheritance(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _CppInheritance<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppInheritanceInterpreter_impl.hpp"

#endif
