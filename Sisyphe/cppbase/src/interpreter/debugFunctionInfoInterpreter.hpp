/* 
 * debugFunctionInfoInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGFUNCTIONINFO_INTERPRETER_HPP_
#define _DEBUGFUNCTIONINFO_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class DebugVariableInfoInterpreter;

template <class EncodingT>
class CppFunctionInterpreter;

template <class EncodingT>
class DebugFunctionInfoInterpreter
: public String<EncodingT>
{
private:
	shared_ptr< _DebugFunctionInfo<EncodingT> > m_value;

public:
	DebugFunctionInfoInterpreter();

	DebugFunctionInfoInterpreter(shared_ptr< _DebugFunctionInfo<EncodingT> > const& value);

	FACTORY_PROTOTYPE4(DebugFunctionInfoInterpreter,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	DebugFunctionInfoInterpreter(shared_ptr< Base<EncodingT> > const& lineNumber,
				shared_ptr< Base<EncodingT> > const& address,
				shared_ptr< Base<EncodingT> > const& debugStart,
				shared_ptr< Base<EncodingT> > const& debugEnd);

	~DebugFunctionInfoInterpreter();

	shared_ptr< _DebugFunctionInfo<EncodingT> > getValue() const;

	void setValue(shared_ptr< _DebugFunctionInfo<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getIdentifier() const;

	shared_ptr< Base<EncodingT> > getLineNumber() const;

	shared_ptr< Base<EncodingT> > getAddress() const;

	shared_ptr< Base<EncodingT> > getDebugStart() const;

	shared_ptr< Base<EncodingT> > getDebugEnd() const;

	shared_ptr< Base<EncodingT> > getCppFunction();

	FACTORY_PROTOTYPE1(setLineNumber, In< shared_ptr< Base<EncodingT> > >)
	void setLineNumber(shared_ptr< Base<EncodingT> > const& lineNumber);

	FACTORY_PROTOTYPE1(setAddress, In< shared_ptr< Base<EncodingT> > >)
	void setAddress(shared_ptr< Base<EncodingT> > const& address);

	FACTORY_PROTOTYPE1(setDebugStart, In< shared_ptr< Base<EncodingT> > >)
	void setDebugStart(shared_ptr< Base<EncodingT> > const& debugStart);

	FACTORY_PROTOTYPE1(setDebugEnd, In< shared_ptr< Base<EncodingT> > >)
	void setDebugEnd(shared_ptr< Base<EncodingT> > const& debugEnd);

	FACTORY_PROTOTYPE1(setCppFunction, In< shared_ptr< Base<EncodingT> > >)
	void setCppFunction(shared_ptr< Base<EncodingT> > const& cppFunction);

	shared_ptr< Base<EncodingT> > hasCppFunction() const;

	void removeCppFunction();

	FACTORY_PROTOTYPE1(removeDebugVariableInfo, In< shared_ptr< Base<EncodingT> > >)
	void removeDebugVariableInfo(shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE2(insertDebugVariableInfo, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void insertDebugVariableInfo(shared_ptr< Base<EncodingT> > const& n, shared_ptr< Base<EncodingT> > const& debugVariableInfo);

	FACTORY_PROTOTYPE1(getDebugVariableInfo, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getDebugVariableInfo(shared_ptr< Base<EncodingT> > const& n);

	void clearDebugVariableInfos();

	shared_ptr< Base<EncodingT> > hasDebugVariableInfos() const;

	shared_ptr< Base<EncodingT> > debugVariableInfosCount() const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( DebugFunctionInfoInterpreter, C("DebugFunctionInfo") );
		CLASS_KEY_REGISTER4( DebugFunctionInfoInterpreter, C("DebugFunctionInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("DebugFunctionInfo::Identifier") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getLineNumber, const_t, C("DebugFunctionInfo::LineNumber") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setLineNumber, no_const_t, C("DebugFunctionInfo::LineNumber") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getAddress, const_t, C("DebugFunctionInfo::Address") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setAddress, no_const_t, C("DebugFunctionInfo::Address") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getDebugStart, const_t, C("DebugFunctionInfo::DebugStart") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setDebugStart, no_const_t, C("DebugFunctionInfo::DebugStart") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getDebugEnd, const_t, C("DebugFunctionInfo::DebugEnd") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setDebugEnd, no_const_t, C("DebugFunctionInfo::DebugEnd") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setCppFunction, no_const_t, C("DebugFunctionInfo::CppFunction") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getCppFunction, no_const_t, C("DebugFunctionInfo::CppFunction") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, hasCppFunction, const_t, C("DebugFunctionInfo::HasCppFunction") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, void, removeCppFunction, no_const_t, C("DebugFunctionInfo::removeCppFunction") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, removeDebugVariableInfo, no_const_t, C("DebugFunctionInfo::removeDebugVariableInfos") );
		METHOD_KEY_REGISTER2( DebugFunctionInfoInterpreter, void, insertDebugVariableInfo, no_const_t, C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, getDebugVariableInfo, no_const_t, C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, void, clearDebugVariableInfos, no_const_t, C("DebugFunctionInfo::ClearDebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, hasDebugVariableInfos, const_t, C("DebugFunctionInfo::HasDebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, shared_ptr< Base<EncodingT> >, debugVariableInfosCount, const_t, C("DebugFunctionInfo::DebugVariableInfosCount") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("DebugFunctionInfo") );
		CLASS_KEY_UNREGISTER4( C("DebugFunctionInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::Identifier") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::LineNumber") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::LineNumber") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::Address") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::Address") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::DebugStart") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::DebugStart") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::DebugEnd") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::DebugEnd") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::CppFunction") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::CppFunction") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::HasCppFunction") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::removeCppFunction") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::removeDebugVariableInfos") );
		METHOD_KEY_UNREGISTER2( C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::ClearDebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::HasDebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::DebugVariableInfosCount") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_debugFunctionInfo(shared_ptr< Base<EncodingT> > const& val, shared_ptr< _DebugFunctionInfo<EncodingT> >& o);

template <class EncodingT>
bool reset_debugFunctionInfo(shared_ptr< Base<EncodingT> >& val, shared_ptr< _DebugFunctionInfo<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "debugFunctionInfoInterpreter_impl.hpp"

#endif
