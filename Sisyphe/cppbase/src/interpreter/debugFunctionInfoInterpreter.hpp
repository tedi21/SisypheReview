/* 
 * debugFunctionInfoInterpreter.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGFUNCTIONINFO_INTERPRETER_HPP_
#define _DEBUGFUNCTIONINFO_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "Base.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class DebugVariableInfoInterpreter;

template <class EncodingT>
class DebugTypeInfoInterpreter;

template <class EncodingT>
class DebugFileInfoInterpreter;

template <class EncodingT>
class DebugFunctionInfoInterpreter
: public Base<EncodingT>
{
private:
	boost::shared_ptr< _DebugFunctionInfo<EncodingT> > m_value;

public:
	DebugFunctionInfoInterpreter();

	DebugFunctionInfoInterpreter(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > const& value);

	FACTORY_PROTOTYPE4(DebugFunctionInfoInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	DebugFunctionInfoInterpreter(boost::shared_ptr< Base<EncodingT> > const& name,
				boost::shared_ptr< Base<EncodingT> > const& firstLineNumber,
				boost::shared_ptr< Base<EncodingT> > const& lastLineNumber,
				boost::shared_ptr< Base<EncodingT> > const& address);

	boost::shared_ptr< _DebugFunctionInfo<EncodingT> > value() const;

	void value(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getIdentifier() const;

	boost::shared_ptr< Base<EncodingT> > getName() const;

	boost::shared_ptr< Base<EncodingT> > getFirstLineNumber() const;

	boost::shared_ptr< Base<EncodingT> > getLastLineNumber() const;

	boost::shared_ptr< Base<EncodingT> > getAddress() const;

	boost::shared_ptr< Base<EncodingT> > getDebugTypeInfo();

	boost::shared_ptr< Base<EncodingT> > getDebugFileInfo();

	FACTORY_PROTOTYPE1(setName, In< boost::shared_ptr< Base<EncodingT> > >)
	void setName(boost::shared_ptr< Base<EncodingT> > const& name);

	FACTORY_PROTOTYPE1(setFirstLineNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setFirstLineNumber(boost::shared_ptr< Base<EncodingT> > const& firstLineNumber);

	FACTORY_PROTOTYPE1(setLastLineNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLastLineNumber(boost::shared_ptr< Base<EncodingT> > const& lastLineNumber);

	FACTORY_PROTOTYPE1(setAddress, In< boost::shared_ptr< Base<EncodingT> > >)
	void setAddress(boost::shared_ptr< Base<EncodingT> > const& address);

	FACTORY_PROTOTYPE1(setDebugTypeInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDebugTypeInfo(boost::shared_ptr< Base<EncodingT> > const& debugTypeInfo);

	FACTORY_PROTOTYPE1(setDebugFileInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDebugFileInfo(boost::shared_ptr< Base<EncodingT> > const& debugFileInfo);

	boost::shared_ptr< Base<EncodingT> > hasDebugTypeInfo() const;

	boost::shared_ptr< Base<EncodingT> > hasDebugFileInfo() const;

	void removeDebugTypeInfo();

	void removeDebugFileInfo();

	FACTORY_PROTOTYPE1(removeDebugVariableInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeDebugVariableInfo(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE2(insertDebugVariableInfo, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertDebugVariableInfo(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& debugVariableInfo);

	FACTORY_PROTOTYPE1(getDebugVariableInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getDebugVariableInfo(boost::shared_ptr< Base<EncodingT> > const& n);

	void clearDebugVariableInfos();

	boost::shared_ptr< Base<EncodingT> > hasDebugVariableInfos() const;

	boost::shared_ptr< Base<EncodingT> > debugVariableInfosCount() const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( DebugFunctionInfoInterpreter, C("DebugFunctionInfo") );
		CLASS_KEY_REGISTER4( DebugFunctionInfoInterpreter, C("DebugFunctionInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("DebugFunctionInfo::Identifier") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getName, const_t, C("DebugFunctionInfo::Name") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setName, no_const_t, C("DebugFunctionInfo::Name") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getFirstLineNumber, const_t, C("DebugFunctionInfo::FirstLineNumber") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setFirstLineNumber, no_const_t, C("DebugFunctionInfo::FirstLineNumber") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getLastLineNumber, const_t, C("DebugFunctionInfo::LastLineNumber") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setLastLineNumber, no_const_t, C("DebugFunctionInfo::LastLineNumber") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getAddress, const_t, C("DebugFunctionInfo::Address") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setAddress, no_const_t, C("DebugFunctionInfo::Address") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setDebugTypeInfo, no_const_t, C("DebugFunctionInfo::DebugTypeInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugTypeInfo, no_const_t, C("DebugFunctionInfo::DebugTypeInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, hasDebugTypeInfo, const_t, C("DebugFunctionInfo::HasDebugTypeInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, void, removeDebugTypeInfo, no_const_t, C("DebugFunctionInfo::removeDebugTypeInfo") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, setDebugFileInfo, no_const_t, C("DebugFunctionInfo::DebugFileInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugFileInfo, no_const_t, C("DebugFunctionInfo::DebugFileInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, hasDebugFileInfo, const_t, C("DebugFunctionInfo::HasDebugFileInfo") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, void, removeDebugFileInfo, no_const_t, C("DebugFunctionInfo::removeDebugFileInfo") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, void, removeDebugVariableInfo, no_const_t, C("DebugFunctionInfo::removeDebugVariableInfos") );
		METHOD_KEY_REGISTER2( DebugFunctionInfoInterpreter, void, insertDebugVariableInfo, no_const_t, C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_REGISTER1( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugVariableInfo, no_const_t, C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, void, clearDebugVariableInfos, no_const_t, C("DebugFunctionInfo::ClearDebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, hasDebugVariableInfos, const_t, C("DebugFunctionInfo::HasDebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugFunctionInfoInterpreter, boost::shared_ptr< Base<EncodingT> >, debugVariableInfosCount, const_t, C("DebugFunctionInfo::DebugVariableInfosCount") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("DebugFunctionInfo") );
		CLASS_KEY_UNREGISTER4( C("DebugFunctionInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::Identifier") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::Name") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::Name") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::FirstLineNumber") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::FirstLineNumber") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::LastLineNumber") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::LastLineNumber") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::Address") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::Address") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::DebugTypeInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::DebugTypeInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::HasDebugTypeInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::removeDebugTypeInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::DebugFileInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::DebugFileInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::HasDebugFileInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::removeDebugFileInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::removeDebugVariableInfos") );
		METHOD_KEY_UNREGISTER2( C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_UNREGISTER1( C("DebugFunctionInfo::DebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::ClearDebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::HasDebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugFunctionInfo::DebugVariableInfosCount") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_debugFunctionInfo(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _DebugFunctionInfo<EncodingT> >& o);

template <class EncodingT>
bool reset_debugFunctionInfo(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "debugFunctionInfoInterpreter_impl.hpp"

#endif
