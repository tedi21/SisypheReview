/* 
 * cppEnumInterpreterAccess.hpp
 *
 *
 * @date 25-06-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPENUM_INTERPRETER_ACCESS_HPP_
#define _CPPENUM_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "Macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppEnumInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppEnumAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppEnumInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getAllCppEnums();

	FACTORY_PROTOTYPE1(getManyCppEnums, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getManyCppEnums(const boost::shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppEnum,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getOneCppEnum(boost::shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppEnum,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectOneCppEnum(boost::shared_ptr< Base<EncodingT> > const& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppEnums, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectManyCppEnums(const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppEnum, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isSelectedCppEnum(const boost::shared_ptr< Base<EncodingT> >& cppEnum);

	FACTORY_PROTOTYPE1(fillCppFile, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void fillCppFile(boost::shared_ptr< Base<EncodingT> >& cppEnum);

	FACTORY_PROTOTYPE1(fillCppClass, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void fillCppClass(boost::shared_ptr< Base<EncodingT> >& cppEnum);

	FACTORY_PROTOTYPE2(fillAllCppEnumConstants, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillAllCppEnumConstants(boost::shared_ptr< Base<EncodingT> >& cppEnum, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppEnumConstant,
				InOut< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	void fillOneCppEnumConstant(boost::shared_ptr< Base<EncodingT> >& refCppEnum,
				const boost::shared_ptr< Base<EncodingT> >& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppEnumConstants, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillManyCppEnumConstants(boost::shared_ptr< Base<EncodingT> >& cppEnum, const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedCppEnum, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isModifiedCppEnum(const boost::shared_ptr< Base<EncodingT> >& cppEnum);

	FACTORY_PROTOTYPE1(updateCppEnum, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void updateCppEnum(boost::shared_ptr< Base<EncodingT> >& cppEnum);

	FACTORY_PROTOTYPE1(insertCppEnum, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppEnum(boost::shared_ptr< Base<EncodingT> >& cppEnum);

	FACTORY_PROTOTYPE1(deleteCppEnum, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void deleteCppEnum(boost::shared_ptr< Base<EncodingT> >& cppEnum);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getError(boost::shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppEnumInterpreterAccess, UCS("CppEnumAccess") );
		METHOD_KEY_REGISTER ( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getAllCppEnums, no_const_t, UCS("CppEnumAccess::GetAllCppEnums") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getManyCppEnums, no_const_t, UCS("CppEnumAccess::GetManyCppEnums") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getOneCppEnum, no_const_t, UCS("CppEnumAccess::GetOneCppEnum") );
		METHOD_KEY_REGISTER2( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectOneCppEnum, no_const_t, UCS("CppEnumAccess::SelectOneCppEnum") );
		METHOD_KEY_REGISTER2( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectManyCppEnums, no_const_t, UCS("CppEnumAccess::SelectManyCppEnums") );
		METHOD_KEY_REGISTER ( CppEnumInterpreterAccess, void, cancelSelection, no_const_t, UCS("CppEnumAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isSelectedCppEnum, no_const_t, UCS("CppEnumAccess::IsSelectedCppEnum") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, void, fillCppFile, no_const_t, UCS("CppEnumAccess::FillCppFile") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, void, fillCppClass, no_const_t, UCS("CppEnumAccess::FillCppClass") );
		METHOD_KEY_REGISTER2( CppEnumInterpreterAccess, void, fillAllCppEnumConstants, no_const_t, UCS("CppEnumAccess::FillAllCppEnumConstants") );
		METHOD_KEY_REGISTER3( CppEnumInterpreterAccess, void, fillOneCppEnumConstant, no_const_t, UCS("CppEnumAccess::FillOneCppEnumConstant") );
		METHOD_KEY_REGISTER3( CppEnumInterpreterAccess, void, fillManyCppEnumConstants, no_const_t, UCS("CppEnumAccess::FillManyCppEnumConstants") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isModifiedCppEnum, no_const_t, UCS("CppEnumAccess::IsModifiedCppEnum") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, void, updateCppEnum, no_const_t, UCS("CppEnumAccess::UpdateCppEnum") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, void, insertCppEnum, no_const_t, UCS("CppEnumAccess::InsertCppEnum") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, void, deleteCppEnum, no_const_t, UCS("CppEnumAccess::DeleteCppEnum") );
		METHOD_KEY_REGISTER1( CppEnumInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getError, const_t, UCS("CppEnumAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( UCS("CppEnumAccess") );
		METHOD_KEY_UNREGISTER ( UCS("CppEnumAccess::GetAllCppEnums") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::GetManyCppEnums") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::GetOneCppEnum") );
		METHOD_KEY_UNREGISTER2( UCS("CppEnumAccess::SelectOneCppEnum") );
		METHOD_KEY_UNREGISTER2( UCS("CppEnumAccess::SelectManyCppEnums") );
		METHOD_KEY_UNREGISTER ( UCS("CppEnumAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::IsSelectedCppEnum") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::FillCppFile") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::FillCppClass") );
		METHOD_KEY_UNREGISTER2( UCS("CppEnumAccess::FillAllCppEnumConstants") );
		METHOD_KEY_UNREGISTER3( UCS("CppEnumAccess::FillOneCppEnumConstant") );
		METHOD_KEY_UNREGISTER3( UCS("CppEnumAccess::FillManyCppEnumConstants") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::IsModifiedCppEnum") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::UpdateCppEnum") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::InsertCppEnum") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::DeleteCppEnum") );
		METHOD_KEY_UNREGISTER1( UCS("CppEnumAccess::GetError") );
	FACTORY_END_UNREGISTER

	boost::shared_ptr< Base<EncodingT> > convert_array(const std::vector< boost::shared_ptr< _CppEnum<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppEnumInterpreterAccess_impl.hpp"

#endif
