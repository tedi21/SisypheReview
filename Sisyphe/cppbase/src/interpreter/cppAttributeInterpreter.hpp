/* 
 * cppAttributeInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPATTRIBUTE_INTERPRETER_HPP_
#define _CPPATTRIBUTE_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppClassInterpreter;

template <class EncodingT>
class CppAttributeInterpreter
: public String<EncodingT>
{
private:
	shared_ptr< _CppAttribute<EncodingT> > m_value;

public:
	CppAttributeInterpreter();

	CppAttributeInterpreter(shared_ptr< _CppAttribute<EncodingT> > const& value);

	FACTORY_PROTOTYPE9(CppAttributeInterpreter,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	CppAttributeInterpreter(shared_ptr< Base<EncodingT> > const& attrType,
				shared_ptr< Base<EncodingT> > const& name,
				shared_ptr< Base<EncodingT> > const& accessSpecifier,
				shared_ptr< Base<EncodingT> > const& isStatic,
				shared_ptr< Base<EncodingT> > const& isConst,
				shared_ptr< Base<EncodingT> > const& constValue,
				shared_ptr< Base<EncodingT> > const& lineNumber,
				shared_ptr< Base<EncodingT> > const& startBlock,
				shared_ptr< Base<EncodingT> > const& lengthBlock);

	~CppAttributeInterpreter();

	shared_ptr< _CppAttribute<EncodingT> > getValue() const;

	void setValue(shared_ptr< _CppAttribute<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getIdentifier() const;

	shared_ptr< Base<EncodingT> > getAttrType() const;

	shared_ptr< Base<EncodingT> > getName() const;

	shared_ptr< Base<EncodingT> > getAccessSpecifier() const;

	shared_ptr< Base<EncodingT> > getIsStatic() const;

	shared_ptr< Base<EncodingT> > getIsConst() const;

	shared_ptr< Base<EncodingT> > getConstValue() const;

	shared_ptr< Base<EncodingT> > getLineNumber() const;

	shared_ptr< Base<EncodingT> > getStartBlock() const;

	shared_ptr< Base<EncodingT> > getLengthBlock() const;

	shared_ptr< Base<EncodingT> > getCppClass();

	FACTORY_PROTOTYPE1(setAttrType, In< shared_ptr< Base<EncodingT> > >)
	void setAttrType(shared_ptr< Base<EncodingT> > const& attrType);

	FACTORY_PROTOTYPE1(setName, In< shared_ptr< Base<EncodingT> > >)
	void setName(shared_ptr< Base<EncodingT> > const& name);

	FACTORY_PROTOTYPE1(setAccessSpecifier, In< shared_ptr< Base<EncodingT> > >)
	void setAccessSpecifier(shared_ptr< Base<EncodingT> > const& accessSpecifier);

	FACTORY_PROTOTYPE1(setIsStatic, In< shared_ptr< Base<EncodingT> > >)
	void setIsStatic(shared_ptr< Base<EncodingT> > const& isStatic);

	FACTORY_PROTOTYPE1(setIsConst, In< shared_ptr< Base<EncodingT> > >)
	void setIsConst(shared_ptr< Base<EncodingT> > const& isConst);

	FACTORY_PROTOTYPE1(setConstValue, In< shared_ptr< Base<EncodingT> > >)
	void setConstValue(shared_ptr< Base<EncodingT> > const& constValue);

	FACTORY_PROTOTYPE1(setCppClass, In< shared_ptr< Base<EncodingT> > >)
	void setCppClass(shared_ptr< Base<EncodingT> > const& cppClass);

	FACTORY_PROTOTYPE1(setLineNumber, In< shared_ptr< Base<EncodingT> > >)
	void setLineNumber(shared_ptr< Base<EncodingT> > const& lineNumber);

	FACTORY_PROTOTYPE1(setStartBlock, In< shared_ptr< Base<EncodingT> > >)
	void setStartBlock(shared_ptr< Base<EncodingT> > const& startBlock);

	FACTORY_PROTOTYPE1(setLengthBlock, In< shared_ptr< Base<EncodingT> > >)
	void setLengthBlock(shared_ptr< Base<EncodingT> > const& lengthBlock);

	shared_ptr< Base<EncodingT> > hasCppClass() const;

	void removeCppClass();

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppAttributeInterpreter, C("CppAttribute") );
		CLASS_KEY_REGISTER9( CppAttributeInterpreter, C("CppAttribute") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("CppAttribute::Identifier") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getAttrType, const_t, C("CppAttribute::AttrType") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setAttrType, no_const_t, C("CppAttribute::AttrType") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getName, const_t, C("CppAttribute::Name") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setName, no_const_t, C("CppAttribute::Name") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getAccessSpecifier, const_t, C("CppAttribute::AccessSpecifier") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setAccessSpecifier, no_const_t, C("CppAttribute::AccessSpecifier") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getIsStatic, const_t, C("CppAttribute::IsStatic") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setIsStatic, no_const_t, C("CppAttribute::IsStatic") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getIsConst, const_t, C("CppAttribute::IsConst") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setIsConst, no_const_t, C("CppAttribute::IsConst") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getConstValue, const_t, C("CppAttribute::ConstValue") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setConstValue, no_const_t, C("CppAttribute::ConstValue") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setCppClass, no_const_t, C("CppAttribute::CppClass") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getCppClass, no_const_t, C("CppAttribute::CppClass") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, hasCppClass, const_t, C("CppAttribute::HasCppClass") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, void, removeCppClass, no_const_t, C("CppAttribute::removeCppClass") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getLineNumber, const_t, C("CppAttribute::LineNumber") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setLineNumber, no_const_t, C("CppAttribute::LineNumber") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getStartBlock, const_t, C("CppAttribute::StartBlock") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setStartBlock, no_const_t, C("CppAttribute::StartBlock") );
		METHOD_KEY_REGISTER ( CppAttributeInterpreter, shared_ptr< Base<EncodingT> >, getLengthBlock, const_t, C("CppAttribute::LengthBlock") );
		METHOD_KEY_REGISTER1( CppAttributeInterpreter, void, setLengthBlock, no_const_t, C("CppAttribute::LengthBlock") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppAttribute") );
		CLASS_KEY_UNREGISTER9( C("CppAttribute") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::Identifier") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::AttrType") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::AttrType") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::Name") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::Name") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::AccessSpecifier") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::AccessSpecifier") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::IsStatic") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::IsStatic") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::IsConst") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::IsConst") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::ConstValue") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::ConstValue") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::CppClass") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::CppClass") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::HasCppClass") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::removeCppClass") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::LineNumber") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::LineNumber") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::StartBlock") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::StartBlock") );
		METHOD_KEY_UNREGISTER ( C("CppAttribute::LengthBlock") );
		METHOD_KEY_UNREGISTER1( C("CppAttribute::LengthBlock") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppAttribute(shared_ptr< Base<EncodingT> > const& val, shared_ptr< _CppAttribute<EncodingT> >& o);

template <class EncodingT>
bool reset_cppAttribute(shared_ptr< Base<EncodingT> >& val, shared_ptr< _CppAttribute<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppAttributeInterpreter_impl.hpp"

#endif
