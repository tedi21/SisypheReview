/* 
 * cppFunctionInterpreter.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFUNCTION_INTERPRETER_HPP_
#define _CPPFUNCTION_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppParameterInterpreter;

template <class EncodingT>
class CppVariableInterpreter;

template <class EncodingT>
class DebugFunctionInfoInterpreter;

template <class EncodingT>
class CppFileInterpreter;

template <class EncodingT>
class CppFileInterpreter;

template <class EncodingT>
class CppClassInterpreter;

template <class EncodingT>
class CppFunctionInterpreter
: public String<EncodingT>
{
private:
	boost::shared_ptr< _CppFunction<EncodingT> > m_value;

public:
	CppFunctionInterpreter();

	CppFunctionInterpreter(boost::shared_ptr< _CppFunction<EncodingT> > const& value);

	FACTORY_PROTOTYPE20(CppFunctionInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	CppFunctionInterpreter(boost::shared_ptr< Base<EncodingT> > const& name,
				boost::shared_ptr< Base<EncodingT> > const& accessSpecifier,
				boost::shared_ptr< Base<EncodingT> > const& returnType,
				boost::shared_ptr< Base<EncodingT> > const& isConst,
				boost::shared_ptr< Base<EncodingT> > const& isVirtual,
				boost::shared_ptr< Base<EncodingT> > const& isVirtualPure,
				boost::shared_ptr< Base<EncodingT> > const& isStatic,
				boost::shared_ptr< Base<EncodingT> > const& isOperator,
				boost::shared_ptr< Base<EncodingT> > const& isDestructor,
				boost::shared_ptr< Base<EncodingT> > const& isConstructor,
				boost::shared_ptr< Base<EncodingT> > const& isVariadic,
				boost::shared_ptr< Base<EncodingT> > const& signature,
				boost::shared_ptr< Base<EncodingT> > const& startDecBlock,
				boost::shared_ptr< Base<EncodingT> > const& lengthDecBlock,
				boost::shared_ptr< Base<EncodingT> > const& decLineNumber,
				boost::shared_ptr< Base<EncodingT> > const& linesCount,
				boost::shared_ptr< Base<EncodingT> > const& complexity,
				boost::shared_ptr< Base<EncodingT> > const& defLineNumber,
				boost::shared_ptr< Base<EncodingT> > const& startDefBlock,
				boost::shared_ptr< Base<EncodingT> > const& lengthDefBlock);

	~CppFunctionInterpreter();

	boost::shared_ptr< _CppFunction<EncodingT> > getValue() const;

	void setValue(boost::shared_ptr< _CppFunction<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getIdentifier() const;

	boost::shared_ptr< Base<EncodingT> > getName() const;

	boost::shared_ptr< Base<EncodingT> > getAccessSpecifier() const;

	boost::shared_ptr< Base<EncodingT> > getReturnType() const;

	boost::shared_ptr< Base<EncodingT> > getIsConst() const;

	boost::shared_ptr< Base<EncodingT> > getIsVirtual() const;

	boost::shared_ptr< Base<EncodingT> > getIsVirtualPure() const;

	boost::shared_ptr< Base<EncodingT> > getIsStatic() const;

	boost::shared_ptr< Base<EncodingT> > getIsOperator() const;

	boost::shared_ptr< Base<EncodingT> > getIsDestructor() const;

	boost::shared_ptr< Base<EncodingT> > getIsConstructor() const;

	boost::shared_ptr< Base<EncodingT> > getIsVariadic() const;

	boost::shared_ptr< Base<EncodingT> > getSignature() const;

	boost::shared_ptr< Base<EncodingT> > getStartDecBlock() const;

	boost::shared_ptr< Base<EncodingT> > getLengthDecBlock() const;

	boost::shared_ptr< Base<EncodingT> > getDecLineNumber() const;

	boost::shared_ptr< Base<EncodingT> > getLinesCount() const;

	boost::shared_ptr< Base<EncodingT> > getComplexity() const;

	boost::shared_ptr< Base<EncodingT> > getDefLineNumber() const;

	boost::shared_ptr< Base<EncodingT> > getStartDefBlock() const;

	boost::shared_ptr< Base<EncodingT> > getLengthDefBlock() const;

	boost::shared_ptr< Base<EncodingT> > getCppDeclarationFile();

	boost::shared_ptr< Base<EncodingT> > getCppDefinitionFile();

	boost::shared_ptr< Base<EncodingT> > getCppClass();

	FACTORY_PROTOTYPE1(setCppDeclarationFile, In< boost::shared_ptr< Base<EncodingT> > >)
	void setCppDeclarationFile(boost::shared_ptr< Base<EncodingT> > const& cppDeclarationFile);

	FACTORY_PROTOTYPE1(setCppDefinitionFile, In< boost::shared_ptr< Base<EncodingT> > >)
	void setCppDefinitionFile(boost::shared_ptr< Base<EncodingT> > const& cppDefinitionFile);

	FACTORY_PROTOTYPE1(setName, In< boost::shared_ptr< Base<EncodingT> > >)
	void setName(boost::shared_ptr< Base<EncodingT> > const& name);

	FACTORY_PROTOTYPE1(setCppClass, In< boost::shared_ptr< Base<EncodingT> > >)
	void setCppClass(boost::shared_ptr< Base<EncodingT> > const& cppClass);

	FACTORY_PROTOTYPE1(setAccessSpecifier, In< boost::shared_ptr< Base<EncodingT> > >)
	void setAccessSpecifier(boost::shared_ptr< Base<EncodingT> > const& accessSpecifier);

	FACTORY_PROTOTYPE1(setReturnType, In< boost::shared_ptr< Base<EncodingT> > >)
	void setReturnType(boost::shared_ptr< Base<EncodingT> > const& returnType);

	FACTORY_PROTOTYPE1(setIsConst, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsConst(boost::shared_ptr< Base<EncodingT> > const& isConst);

	FACTORY_PROTOTYPE1(setIsVirtual, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsVirtual(boost::shared_ptr< Base<EncodingT> > const& isVirtual);

	FACTORY_PROTOTYPE1(setIsVirtualPure, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsVirtualPure(boost::shared_ptr< Base<EncodingT> > const& isVirtualPure);

	FACTORY_PROTOTYPE1(setIsStatic, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsStatic(boost::shared_ptr< Base<EncodingT> > const& isStatic);

	FACTORY_PROTOTYPE1(setIsOperator, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsOperator(boost::shared_ptr< Base<EncodingT> > const& isOperator);

	FACTORY_PROTOTYPE1(setIsDestructor, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsDestructor(boost::shared_ptr< Base<EncodingT> > const& isDestructor);

	FACTORY_PROTOTYPE1(setIsConstructor, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsConstructor(boost::shared_ptr< Base<EncodingT> > const& isConstructor);

	FACTORY_PROTOTYPE1(setIsVariadic, In< boost::shared_ptr< Base<EncodingT> > >)
	void setIsVariadic(boost::shared_ptr< Base<EncodingT> > const& isVariadic);

	FACTORY_PROTOTYPE1(setSignature, In< boost::shared_ptr< Base<EncodingT> > >)
	void setSignature(boost::shared_ptr< Base<EncodingT> > const& signature);

	FACTORY_PROTOTYPE1(setStartDecBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setStartDecBlock(boost::shared_ptr< Base<EncodingT> > const& startDecBlock);

	FACTORY_PROTOTYPE1(setLengthDecBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLengthDecBlock(boost::shared_ptr< Base<EncodingT> > const& lengthDecBlock);

	FACTORY_PROTOTYPE1(setDecLineNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDecLineNumber(boost::shared_ptr< Base<EncodingT> > const& decLineNumber);

	FACTORY_PROTOTYPE1(setLinesCount, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLinesCount(boost::shared_ptr< Base<EncodingT> > const& linesCount);

	FACTORY_PROTOTYPE1(setComplexity, In< boost::shared_ptr< Base<EncodingT> > >)
	void setComplexity(boost::shared_ptr< Base<EncodingT> > const& complexity);

	FACTORY_PROTOTYPE1(setDefLineNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDefLineNumber(boost::shared_ptr< Base<EncodingT> > const& defLineNumber);

	FACTORY_PROTOTYPE1(setStartDefBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setStartDefBlock(boost::shared_ptr< Base<EncodingT> > const& startDefBlock);

	FACTORY_PROTOTYPE1(setLengthDefBlock, In< boost::shared_ptr< Base<EncodingT> > >)
	void setLengthDefBlock(boost::shared_ptr< Base<EncodingT> > const& lengthDefBlock);

	boost::shared_ptr< Base<EncodingT> > hasCppDeclarationFile() const;

	boost::shared_ptr< Base<EncodingT> > hasCppDefinitionFile() const;

	boost::shared_ptr< Base<EncodingT> > hasCppClass() const;

	void removeCppDeclarationFile();

	void removeCppDefinitionFile();

	void removeCppClass();

	FACTORY_PROTOTYPE1(removeCppParameter, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppParameter(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeCppVariable, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeCppVariable(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(removeDebugFunctionInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	void removeDebugFunctionInfo(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE2(insertCppParameter, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppParameter(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppParameter);

	FACTORY_PROTOTYPE2(insertCppVariable, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppVariable(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& cppVariable);

	FACTORY_PROTOTYPE2(insertDebugFunctionInfo, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void insertDebugFunctionInfo(boost::shared_ptr< Base<EncodingT> > const& n, boost::shared_ptr< Base<EncodingT> > const& debugFunctionInfo);

	FACTORY_PROTOTYPE1(getCppParameter, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppParameter(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getCppVariable, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getCppVariable(boost::shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE1(getDebugFunctionInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getDebugFunctionInfo(boost::shared_ptr< Base<EncodingT> > const& n);

	void clearCppParameters();

	void clearCppVariables();

	void clearDebugFunctionInfos();

	boost::shared_ptr< Base<EncodingT> > hasCppParameters() const;

	boost::shared_ptr< Base<EncodingT> > hasCppVariables() const;

	boost::shared_ptr< Base<EncodingT> > hasDebugFunctionInfos() const;

	boost::shared_ptr< Base<EncodingT> > cppParametersCount() const;

	boost::shared_ptr< Base<EncodingT> > cppVariablesCount() const;

	boost::shared_ptr< Base<EncodingT> > debugFunctionInfosCount() const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppFunctionInterpreter, C("CppFunction") );
		CLASS_KEY_REGISTER20( CppFunctionInterpreter, C("CppFunction") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setCppDeclarationFile, no_const_t, C("CppFunction::CppDeclarationFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppDeclarationFile, no_const_t, C("CppFunction::CppDeclarationFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppDeclarationFile, const_t, C("CppFunction::HasCppDeclarationFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, void, removeCppDeclarationFile, no_const_t, C("CppFunction::removeCppDeclarationFile") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setCppDefinitionFile, no_const_t, C("CppFunction::CppDefinitionFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppDefinitionFile, no_const_t, C("CppFunction::CppDefinitionFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppDefinitionFile, const_t, C("CppFunction::HasCppDefinitionFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, void, removeCppDefinitionFile, no_const_t, C("CppFunction::removeCppDefinitionFile") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("CppFunction::Identifier") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getName, const_t, C("CppFunction::Name") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setName, no_const_t, C("CppFunction::Name") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setCppClass, no_const_t, C("CppFunction::CppClass") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppClass, no_const_t, C("CppFunction::CppClass") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppClass, const_t, C("CppFunction::HasCppClass") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, void, removeCppClass, no_const_t, C("CppFunction::removeCppClass") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getAccessSpecifier, const_t, C("CppFunction::AccessSpecifier") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setAccessSpecifier, no_const_t, C("CppFunction::AccessSpecifier") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getReturnType, const_t, C("CppFunction::ReturnType") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setReturnType, no_const_t, C("CppFunction::ReturnType") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsConst, const_t, C("CppFunction::IsConst") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsConst, no_const_t, C("CppFunction::IsConst") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsVirtual, const_t, C("CppFunction::IsVirtual") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsVirtual, no_const_t, C("CppFunction::IsVirtual") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsVirtualPure, const_t, C("CppFunction::IsVirtualPure") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsVirtualPure, no_const_t, C("CppFunction::IsVirtualPure") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsStatic, const_t, C("CppFunction::IsStatic") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsStatic, no_const_t, C("CppFunction::IsStatic") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsOperator, const_t, C("CppFunction::IsOperator") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsOperator, no_const_t, C("CppFunction::IsOperator") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsDestructor, const_t, C("CppFunction::IsDestructor") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsDestructor, no_const_t, C("CppFunction::IsDestructor") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsConstructor, const_t, C("CppFunction::IsConstructor") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsConstructor, no_const_t, C("CppFunction::IsConstructor") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getIsVariadic, const_t, C("CppFunction::IsVariadic") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setIsVariadic, no_const_t, C("CppFunction::IsVariadic") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getSignature, const_t, C("CppFunction::Signature") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setSignature, no_const_t, C("CppFunction::Signature") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getStartDecBlock, const_t, C("CppFunction::StartDecBlock") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setStartDecBlock, no_const_t, C("CppFunction::StartDecBlock") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getLengthDecBlock, const_t, C("CppFunction::LengthDecBlock") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setLengthDecBlock, no_const_t, C("CppFunction::LengthDecBlock") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getDecLineNumber, const_t, C("CppFunction::DecLineNumber") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setDecLineNumber, no_const_t, C("CppFunction::DecLineNumber") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getLinesCount, const_t, C("CppFunction::LinesCount") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setLinesCount, no_const_t, C("CppFunction::LinesCount") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getComplexity, const_t, C("CppFunction::Complexity") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setComplexity, no_const_t, C("CppFunction::Complexity") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getDefLineNumber, const_t, C("CppFunction::DefLineNumber") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setDefLineNumber, no_const_t, C("CppFunction::DefLineNumber") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getStartDefBlock, const_t, C("CppFunction::StartDefBlock") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setStartDefBlock, no_const_t, C("CppFunction::StartDefBlock") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getLengthDefBlock, const_t, C("CppFunction::LengthDefBlock") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, setLengthDefBlock, no_const_t, C("CppFunction::LengthDefBlock") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, removeCppParameter, no_const_t, C("CppFunction::removeCppParameters") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreter, void, insertCppParameter, no_const_t, C("CppFunction::CppParameters") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppParameter, no_const_t, C("CppFunction::CppParameters") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, void, clearCppParameters, no_const_t, C("CppFunction::ClearCppParameters") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppParameters, const_t, C("CppFunction::HasCppParameters") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, cppParametersCount, const_t, C("CppFunction::CppParametersCount") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, removeCppVariable, no_const_t, C("CppFunction::removeCppVariables") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreter, void, insertCppVariable, no_const_t, C("CppFunction::CppVariables") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getCppVariable, no_const_t, C("CppFunction::CppVariables") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, void, clearCppVariables, no_const_t, C("CppFunction::ClearCppVariables") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, hasCppVariables, const_t, C("CppFunction::HasCppVariables") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, cppVariablesCount, const_t, C("CppFunction::CppVariablesCount") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, void, removeDebugFunctionInfo, no_const_t, C("CppFunction::removeDebugFunctionInfos") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreter, void, insertDebugFunctionInfo, no_const_t, C("CppFunction::DebugFunctionInfos") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugFunctionInfo, no_const_t, C("CppFunction::DebugFunctionInfos") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, void, clearDebugFunctionInfos, no_const_t, C("CppFunction::ClearDebugFunctionInfos") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, hasDebugFunctionInfos, const_t, C("CppFunction::HasDebugFunctionInfos") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreter, boost::shared_ptr< Base<EncodingT> >, debugFunctionInfosCount, const_t, C("CppFunction::DebugFunctionInfosCount") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppFunction") );
		CLASS_KEY_UNREGISTER20( C("CppFunction") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::CppDeclarationFile") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::CppDeclarationFile") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::HasCppDeclarationFile") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::removeCppDeclarationFile") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::CppDefinitionFile") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::CppDefinitionFile") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::HasCppDefinitionFile") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::removeCppDefinitionFile") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::Identifier") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::Name") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::Name") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::CppClass") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::CppClass") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::HasCppClass") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::removeCppClass") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::AccessSpecifier") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::AccessSpecifier") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::ReturnType") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::ReturnType") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsConst") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsConst") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsVirtual") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsVirtual") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsVirtualPure") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsVirtualPure") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsStatic") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsStatic") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsOperator") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsOperator") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsDestructor") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsDestructor") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsConstructor") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsConstructor") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::IsVariadic") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::IsVariadic") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::Signature") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::Signature") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::StartDecBlock") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::StartDecBlock") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::LengthDecBlock") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::LengthDecBlock") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::DecLineNumber") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::DecLineNumber") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::LinesCount") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::LinesCount") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::Complexity") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::Complexity") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::DefLineNumber") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::DefLineNumber") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::StartDefBlock") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::StartDefBlock") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::LengthDefBlock") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::LengthDefBlock") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::removeCppParameters") );
		METHOD_KEY_UNREGISTER2( C("CppFunction::CppParameters") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::CppParameters") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::ClearCppParameters") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::HasCppParameters") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::CppParametersCount") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::removeCppVariables") );
		METHOD_KEY_UNREGISTER2( C("CppFunction::CppVariables") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::CppVariables") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::ClearCppVariables") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::HasCppVariables") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::CppVariablesCount") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::removeDebugFunctionInfos") );
		METHOD_KEY_UNREGISTER2( C("CppFunction::DebugFunctionInfos") );
		METHOD_KEY_UNREGISTER1( C("CppFunction::DebugFunctionInfos") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::ClearDebugFunctionInfos") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::HasDebugFunctionInfos") );
		METHOD_KEY_UNREGISTER ( C("CppFunction::DebugFunctionInfosCount") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppFunction(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _CppFunction<EncodingT> >& o);

template <class EncodingT>
bool reset_cppFunction(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _CppFunction<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppFunctionInterpreter_impl.hpp"

#endif
