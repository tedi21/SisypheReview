/* 
 * cppEnumConstantInterpreterAccess.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPENUMCONSTANT_INTERPRETER_ACCESS_HPP_
#define _CPPENUMCONSTANT_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppEnumConstantInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppEnumConstantAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppEnumConstantInterpreterAccess();

	~CppEnumConstantInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getAllCppEnumConstants();

	FACTORY_PROTOTYPE1(getManyCppEnumConstants, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getManyCppEnumConstants(const boost::shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppEnumConstant,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getOneCppEnumConstant(boost::shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppEnumConstant,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectOneCppEnumConstant(boost::shared_ptr< Base<EncodingT> > const& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppEnumConstants, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectManyCppEnumConstants(const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppEnumConstant, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isSelectedCppEnumConstant(const boost::shared_ptr< Base<EncodingT> >& cppEnumConstant);

	FACTORY_PROTOTYPE1(fillCppEnum, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void fillCppEnum(boost::shared_ptr< Base<EncodingT> >& cppEnumConstant);

	FACTORY_PROTOTYPE1(isModifiedCppEnumConstant, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isModifiedCppEnumConstant(const boost::shared_ptr< Base<EncodingT> >& cppEnumConstant);

	FACTORY_PROTOTYPE1(updateCppEnumConstant, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void updateCppEnumConstant(boost::shared_ptr< Base<EncodingT> >& cppEnumConstant);

	FACTORY_PROTOTYPE1(insertCppEnumConstant, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void insertCppEnumConstant(boost::shared_ptr< Base<EncodingT> >& cppEnumConstant);

	FACTORY_PROTOTYPE1(deleteCppEnumConstant, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void deleteCppEnumConstant(boost::shared_ptr< Base<EncodingT> >& cppEnumConstant);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getError(boost::shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppEnumConstantInterpreterAccess, C("CppEnumConstantAccess") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getAllCppEnumConstants, no_const_t, C("CppEnumConstantAccess::GetAllCppEnumConstants") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getManyCppEnumConstants, no_const_t, C("CppEnumConstantAccess::GetManyCppEnumConstants") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getOneCppEnumConstant, no_const_t, C("CppEnumConstantAccess::GetOneCppEnumConstant") );
		METHOD_KEY_REGISTER2( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectOneCppEnumConstant, no_const_t, C("CppEnumConstantAccess::SelectOneCppEnumConstant") );
		METHOD_KEY_REGISTER2( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectManyCppEnumConstants, no_const_t, C("CppEnumConstantAccess::SelectManyCppEnumConstants") );
		METHOD_KEY_REGISTER ( CppEnumConstantInterpreterAccess, void, cancelSelection, no_const_t, C("CppEnumConstantAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isSelectedCppEnumConstant, no_const_t, C("CppEnumConstantAccess::IsSelectedCppEnumConstant") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, void, fillCppEnum, no_const_t, C("CppEnumConstantAccess::FillCppEnum") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isModifiedCppEnumConstant, no_const_t, C("CppEnumConstantAccess::IsModifiedCppEnumConstant") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, void, updateCppEnumConstant, no_const_t, C("CppEnumConstantAccess::UpdateCppEnumConstant") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, void, insertCppEnumConstant, no_const_t, C("CppEnumConstantAccess::InsertCppEnumConstant") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, void, deleteCppEnumConstant, no_const_t, C("CppEnumConstantAccess::DeleteCppEnumConstant") );
		METHOD_KEY_REGISTER1( CppEnumConstantInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getError, const_t, C("CppEnumConstantAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppEnumConstantAccess") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstantAccess::GetAllCppEnumConstants") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::GetManyCppEnumConstants") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::GetOneCppEnumConstant") );
		METHOD_KEY_UNREGISTER2( C("CppEnumConstantAccess::SelectOneCppEnumConstant") );
		METHOD_KEY_UNREGISTER2( C("CppEnumConstantAccess::SelectManyCppEnumConstants") );
		METHOD_KEY_UNREGISTER ( C("CppEnumConstantAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::IsSelectedCppEnumConstant") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::FillCppEnum") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::IsModifiedCppEnumConstant") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::UpdateCppEnumConstant") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::InsertCppEnumConstant") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::DeleteCppEnumConstant") );
		METHOD_KEY_UNREGISTER1( C("CppEnumConstantAccess::GetError") );
	FACTORY_END_UNREGISTER

	boost::shared_ptr< Base<EncodingT> > convert_array(const std::vector< boost::shared_ptr< _CppEnumConstant<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppEnumConstantInterpreterAccess_impl.hpp"

#endif
