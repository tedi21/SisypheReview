/* 
 * debugStubInfoInterpreterAccess.hpp
 *
 *
 * @date 25-06-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGSTUBINFO_INTERPRETER_ACCESS_HPP_
#define _DEBUGSTUBINFO_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "Macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class DebugStubInfoInterpreterAccess
: public Base<EncodingT>
{
private:
	_DebugStubInfoAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	DebugStubInfoInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getAllDebugStubInfos();

	FACTORY_PROTOTYPE1(getManyDebugStubInfos, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getManyDebugStubInfos(const boost::shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneDebugStubInfo,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getOneDebugStubInfo(boost::shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneDebugStubInfo,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectOneDebugStubInfo(boost::shared_ptr< Base<EncodingT> > const& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyDebugStubInfos, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > selectManyDebugStubInfos(const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedDebugStubInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isSelectedDebugStubInfo(const boost::shared_ptr< Base<EncodingT> >& debugStubInfo);

	FACTORY_PROTOTYPE1(fillDebugFileInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void fillDebugFileInfo(boost::shared_ptr< Base<EncodingT> >& debugStubInfo);

	FACTORY_PROTOTYPE2(fillAllDebugValueInfos, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillAllDebugValueInfos(boost::shared_ptr< Base<EncodingT> >& debugStubInfo, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneDebugValueInfo,
				InOut< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	void fillOneDebugValueInfo(boost::shared_ptr< Base<EncodingT> >& refDebugStubInfo,
				const boost::shared_ptr< Base<EncodingT> >& identifier,
				const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyDebugValueInfos, InOut< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
	void fillManyDebugValueInfos(boost::shared_ptr< Base<EncodingT> >& debugStubInfo, const boost::shared_ptr< Base<EncodingT> >& filter, const boost::shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedDebugStubInfo, In< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > isModifiedDebugStubInfo(const boost::shared_ptr< Base<EncodingT> >& debugStubInfo);

	FACTORY_PROTOTYPE1(updateDebugStubInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void updateDebugStubInfo(boost::shared_ptr< Base<EncodingT> >& debugStubInfo);

	FACTORY_PROTOTYPE1(insertDebugStubInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void insertDebugStubInfo(boost::shared_ptr< Base<EncodingT> >& debugStubInfo);

	FACTORY_PROTOTYPE1(deleteDebugStubInfo, InOut< boost::shared_ptr< Base<EncodingT> > >)
	void deleteDebugStubInfo(boost::shared_ptr< Base<EncodingT> >& debugStubInfo);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< boost::shared_ptr< Base<EncodingT> > >)
	boost::shared_ptr< Base<EncodingT> > getError(boost::shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( DebugStubInfoInterpreterAccess, UCS("DebugStubInfoAccess") );
		METHOD_KEY_REGISTER ( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getAllDebugStubInfos, no_const_t, UCS("DebugStubInfoAccess::GetAllDebugStubInfos") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getManyDebugStubInfos, no_const_t, UCS("DebugStubInfoAccess::GetManyDebugStubInfos") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getOneDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::GetOneDebugStubInfo") );
		METHOD_KEY_REGISTER2( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectOneDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::SelectOneDebugStubInfo") );
		METHOD_KEY_REGISTER2( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, selectManyDebugStubInfos, no_const_t, UCS("DebugStubInfoAccess::SelectManyDebugStubInfos") );
		METHOD_KEY_REGISTER ( DebugStubInfoInterpreterAccess, void, cancelSelection, no_const_t, UCS("DebugStubInfoAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isSelectedDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::IsSelectedDebugStubInfo") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, void, fillDebugFileInfo, no_const_t, UCS("DebugStubInfoAccess::FillDebugFileInfo") );
		METHOD_KEY_REGISTER2( DebugStubInfoInterpreterAccess, void, fillAllDebugValueInfos, no_const_t, UCS("DebugStubInfoAccess::FillAllDebugValueInfos") );
		METHOD_KEY_REGISTER3( DebugStubInfoInterpreterAccess, void, fillOneDebugValueInfo, no_const_t, UCS("DebugStubInfoAccess::FillOneDebugValueInfo") );
		METHOD_KEY_REGISTER3( DebugStubInfoInterpreterAccess, void, fillManyDebugValueInfos, no_const_t, UCS("DebugStubInfoAccess::FillManyDebugValueInfos") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, isModifiedDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::IsModifiedDebugStubInfo") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, void, updateDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::UpdateDebugStubInfo") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, void, insertDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::InsertDebugStubInfo") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, void, deleteDebugStubInfo, no_const_t, UCS("DebugStubInfoAccess::DeleteDebugStubInfo") );
		METHOD_KEY_REGISTER1( DebugStubInfoInterpreterAccess, boost::shared_ptr< Base<EncodingT> >, getError, const_t, UCS("DebugStubInfoAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( UCS("DebugStubInfoAccess") );
		METHOD_KEY_UNREGISTER ( UCS("DebugStubInfoAccess::GetAllDebugStubInfos") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::GetManyDebugStubInfos") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::GetOneDebugStubInfo") );
		METHOD_KEY_UNREGISTER2( UCS("DebugStubInfoAccess::SelectOneDebugStubInfo") );
		METHOD_KEY_UNREGISTER2( UCS("DebugStubInfoAccess::SelectManyDebugStubInfos") );
		METHOD_KEY_UNREGISTER ( UCS("DebugStubInfoAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::IsSelectedDebugStubInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::FillDebugFileInfo") );
		METHOD_KEY_UNREGISTER2( UCS("DebugStubInfoAccess::FillAllDebugValueInfos") );
		METHOD_KEY_UNREGISTER3( UCS("DebugStubInfoAccess::FillOneDebugValueInfo") );
		METHOD_KEY_UNREGISTER3( UCS("DebugStubInfoAccess::FillManyDebugValueInfos") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::IsModifiedDebugStubInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::UpdateDebugStubInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::InsertDebugStubInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::DeleteDebugStubInfo") );
		METHOD_KEY_UNREGISTER1( UCS("DebugStubInfoAccess::GetError") );
	FACTORY_END_UNREGISTER

	boost::shared_ptr< Base<EncodingT> > convert_array(const std::vector< boost::shared_ptr< _DebugStubInfo<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "debugStubInfoInterpreterAccess_impl.hpp"

#endif
