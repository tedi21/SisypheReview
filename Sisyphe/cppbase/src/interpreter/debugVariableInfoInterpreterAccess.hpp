/* 
 * debugVariableInfoInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGVARIABLEINFO_INTERPRETER_ACCESS_HPP_
#define _DEBUGVARIABLEINFO_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class DebugVariableInfoInterpreterAccess
: public Base<EncodingT>
{
private:
	_DebugVariableInfoAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	DebugVariableInfoInterpreterAccess();

	~DebugVariableInfoInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllDebugVariableInfos();

	FACTORY_PROTOTYPE1(getManyDebugVariableInfos, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyDebugVariableInfos(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneDebugVariableInfo,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneDebugVariableInfo(shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneDebugVariableInfo,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneDebugVariableInfo(shared_ptr< Base<EncodingT> > const& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyDebugVariableInfos, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyDebugVariableInfos(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedDebugVariableInfo, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedDebugVariableInfo(const shared_ptr< Base<EncodingT> >& debugVariableInfo);

	FACTORY_PROTOTYPE1(fillDebugFunctionInfo, InOut< shared_ptr< Base<EncodingT> > >)
	void fillDebugFunctionInfo(shared_ptr< Base<EncodingT> >& debugVariableInfo);

	FACTORY_PROTOTYPE1(isModifiedDebugVariableInfo, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedDebugVariableInfo(const shared_ptr< Base<EncodingT> >& debugVariableInfo);

	FACTORY_PROTOTYPE1(updateDebugVariableInfo, InOut< shared_ptr< Base<EncodingT> > >)
	void updateDebugVariableInfo(shared_ptr< Base<EncodingT> >& debugVariableInfo);

	FACTORY_PROTOTYPE1(insertDebugVariableInfo, InOut< shared_ptr< Base<EncodingT> > >)
	void insertDebugVariableInfo(shared_ptr< Base<EncodingT> >& debugVariableInfo);

	FACTORY_PROTOTYPE1(deleteDebugVariableInfo, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteDebugVariableInfo(shared_ptr< Base<EncodingT> >& debugVariableInfo);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( DebugVariableInfoInterpreterAccess, C("DebugVariableInfoAccess") );
		METHOD_KEY_REGISTER ( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllDebugVariableInfos, no_const_t, C("DebugVariableInfoAccess::GetAllDebugVariableInfos") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyDebugVariableInfos, no_const_t, C("DebugVariableInfoAccess::GetManyDebugVariableInfos") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::GetOneDebugVariableInfo") );
		METHOD_KEY_REGISTER2( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::SelectOneDebugVariableInfo") );
		METHOD_KEY_REGISTER2( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyDebugVariableInfos, no_const_t, C("DebugVariableInfoAccess::SelectManyDebugVariableInfos") );
		METHOD_KEY_REGISTER ( DebugVariableInfoInterpreterAccess, void, cancelSelection, no_const_t, C("DebugVariableInfoAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::IsSelectedDebugVariableInfo") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, void, fillDebugFunctionInfo, no_const_t, C("DebugVariableInfoAccess::FillDebugFunctionInfo") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::IsModifiedDebugVariableInfo") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, void, updateDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::UpdateDebugVariableInfo") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, void, insertDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::InsertDebugVariableInfo") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, void, deleteDebugVariableInfo, no_const_t, C("DebugVariableInfoAccess::DeleteDebugVariableInfo") );
		METHOD_KEY_REGISTER1( DebugVariableInfoInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("DebugVariableInfoAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("DebugVariableInfoAccess") );
		METHOD_KEY_UNREGISTER ( C("DebugVariableInfoAccess::GetAllDebugVariableInfos") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::GetManyDebugVariableInfos") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::GetOneDebugVariableInfo") );
		METHOD_KEY_UNREGISTER2( C("DebugVariableInfoAccess::SelectOneDebugVariableInfo") );
		METHOD_KEY_UNREGISTER2( C("DebugVariableInfoAccess::SelectManyDebugVariableInfos") );
		METHOD_KEY_UNREGISTER ( C("DebugVariableInfoAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::IsSelectedDebugVariableInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::FillDebugFunctionInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::IsModifiedDebugVariableInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::UpdateDebugVariableInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::InsertDebugVariableInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::DeleteDebugVariableInfo") );
		METHOD_KEY_UNREGISTER1( C("DebugVariableInfoAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _DebugVariableInfo<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "debugVariableInfoInterpreterAccess_impl.hpp"

#endif
