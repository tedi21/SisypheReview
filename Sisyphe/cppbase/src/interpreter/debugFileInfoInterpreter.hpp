/* 
 * debugFileInfoInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGFILEINFO_INTERPRETER_HPP_
#define _DEBUGFILEINFO_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppFileInterpreter;

template <class EncodingT>
class DebugFileInfoInterpreter
: public String<EncodingT>
{
private:
	shared_ptr< _DebugFileInfo<EncodingT> > m_value;

public:
	DebugFileInfoInterpreter();

	DebugFileInfoInterpreter(shared_ptr< _DebugFileInfo<EncodingT> > const& value);

	FACTORY_PROTOTYPE2(DebugFileInfoInterpreter,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	DebugFileInfoInterpreter(shared_ptr< Base<EncodingT> > const& compilandPath,
				shared_ptr< Base<EncodingT> > const& checksum);

	~DebugFileInfoInterpreter();

	shared_ptr< _DebugFileInfo<EncodingT> > getValue() const;

	void setValue(shared_ptr< _DebugFileInfo<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getIdentifier() const;

	shared_ptr< Base<EncodingT> > getCompilandPath() const;

	shared_ptr< Base<EncodingT> > getChecksum() const;

	shared_ptr< Base<EncodingT> > getCppFile();

	FACTORY_PROTOTYPE1(setCompilandPath, In< shared_ptr< Base<EncodingT> > >)
	void setCompilandPath(shared_ptr< Base<EncodingT> > const& compilandPath);

	FACTORY_PROTOTYPE1(setChecksum, In< shared_ptr< Base<EncodingT> > >)
	void setChecksum(shared_ptr< Base<EncodingT> > const& checksum);

	FACTORY_PROTOTYPE1(setCppFile, In< shared_ptr< Base<EncodingT> > >)
	void setCppFile(shared_ptr< Base<EncodingT> > const& cppFile);

	shared_ptr< Base<EncodingT> > hasCppFile() const;

	void removeCppFile();

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( DebugFileInfoInterpreter, C("DebugFileInfo") );
		CLASS_KEY_REGISTER2( DebugFileInfoInterpreter, C("DebugFileInfo") );
		METHOD_KEY_REGISTER ( DebugFileInfoInterpreter, shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("DebugFileInfo::Identifier") );
		METHOD_KEY_REGISTER ( DebugFileInfoInterpreter, shared_ptr< Base<EncodingT> >, getCompilandPath, const_t, C("DebugFileInfo::CompilandPath") );
		METHOD_KEY_REGISTER1( DebugFileInfoInterpreter, void, setCompilandPath, no_const_t, C("DebugFileInfo::CompilandPath") );
		METHOD_KEY_REGISTER ( DebugFileInfoInterpreter, shared_ptr< Base<EncodingT> >, getChecksum, const_t, C("DebugFileInfo::Checksum") );
		METHOD_KEY_REGISTER1( DebugFileInfoInterpreter, void, setChecksum, no_const_t, C("DebugFileInfo::Checksum") );
		METHOD_KEY_REGISTER1( DebugFileInfoInterpreter, void, setCppFile, no_const_t, C("DebugFileInfo::CppFile") );
		METHOD_KEY_REGISTER ( DebugFileInfoInterpreter, shared_ptr< Base<EncodingT> >, getCppFile, no_const_t, C("DebugFileInfo::CppFile") );
		METHOD_KEY_REGISTER ( DebugFileInfoInterpreter, shared_ptr< Base<EncodingT> >, hasCppFile, const_t, C("DebugFileInfo::HasCppFile") );
		METHOD_KEY_REGISTER ( DebugFileInfoInterpreter, void, removeCppFile, no_const_t, C("DebugFileInfo::removeCppFile") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("DebugFileInfo") );
		CLASS_KEY_UNREGISTER2( C("DebugFileInfo") );
		METHOD_KEY_UNREGISTER ( C("DebugFileInfo::Identifier") );
		METHOD_KEY_UNREGISTER ( C("DebugFileInfo::CompilandPath") );
		METHOD_KEY_UNREGISTER1( C("DebugFileInfo::CompilandPath") );
		METHOD_KEY_UNREGISTER ( C("DebugFileInfo::Checksum") );
		METHOD_KEY_UNREGISTER1( C("DebugFileInfo::Checksum") );
		METHOD_KEY_UNREGISTER ( C("DebugFileInfo::CppFile") );
		METHOD_KEY_UNREGISTER1( C("DebugFileInfo::CppFile") );
		METHOD_KEY_UNREGISTER ( C("DebugFileInfo::HasCppFile") );
		METHOD_KEY_UNREGISTER ( C("DebugFileInfo::removeCppFile") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_debugFileInfo(shared_ptr< Base<EncodingT> > const& val, shared_ptr< _DebugFileInfo<EncodingT> >& o);

template <class EncodingT>
bool reset_debugFileInfo(shared_ptr< Base<EncodingT> >& val, shared_ptr< _DebugFileInfo<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "debugFileInfoInterpreter_impl.hpp"

#endif
