/* 
 * textFileInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTFILE_INTERPRETER_HPP_
#define _TEXTFILE_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class TextNoticeInterpreter;

template <class EncodingT>
class TextFileInterpreter
: public String<EncodingT>
{
private:
	shared_ptr< _TextFile<EncodingT> > m_value;

public:
	TextFileInterpreter();

	TextFileInterpreter(shared_ptr< _TextFile<EncodingT> > const& value);

	FACTORY_PROTOTYPE1(TextFileInterpreter,
				In< shared_ptr< Base<EncodingT> > >)
	TextFileInterpreter(shared_ptr< Base<EncodingT> > const& content);

	~TextFileInterpreter();

	shared_ptr< _TextFile<EncodingT> > getValue() const;

	void setValue(shared_ptr< _TextFile<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getRowid() const;

	shared_ptr< Base<EncodingT> > getContent() const;

	FACTORY_PROTOTYPE1(setContent, In< shared_ptr< Base<EncodingT> > >)
	void setContent(shared_ptr< Base<EncodingT> > const& content);

	FACTORY_PROTOTYPE1(removeTextNotice, In< shared_ptr< Base<EncodingT> > >)
	void removeTextNotice(shared_ptr< Base<EncodingT> > const& n);

	FACTORY_PROTOTYPE2(insertTextNotice, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void insertTextNotice(shared_ptr< Base<EncodingT> > const& n, shared_ptr< Base<EncodingT> > const& textNotice);

	FACTORY_PROTOTYPE1(getTextNotice, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getTextNotice(shared_ptr< Base<EncodingT> > const& n);

	void clearTextNotices();

	shared_ptr< Base<EncodingT> > hasTextNotices() const;

	shared_ptr< Base<EncodingT> > textNoticesCount() const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( TextFileInterpreter, C("TextFile") );
		CLASS_KEY_REGISTER1( TextFileInterpreter, C("TextFile") );
		METHOD_KEY_REGISTER ( TextFileInterpreter, shared_ptr< Base<EncodingT> >, getRowid, const_t, C("TextFile::Rowid") );
		METHOD_KEY_REGISTER ( TextFileInterpreter, shared_ptr< Base<EncodingT> >, getContent, const_t, C("TextFile::Content") );
		METHOD_KEY_REGISTER1( TextFileInterpreter, void, setContent, no_const_t, C("TextFile::Content") );
		METHOD_KEY_REGISTER1( TextFileInterpreter, void, removeTextNotice, no_const_t, C("TextFile::removeTextNotices") );
		METHOD_KEY_REGISTER2( TextFileInterpreter, void, insertTextNotice, no_const_t, C("TextFile::TextNotices") );
		METHOD_KEY_REGISTER1( TextFileInterpreter, shared_ptr< Base<EncodingT> >, getTextNotice, no_const_t, C("TextFile::TextNotices") );
		METHOD_KEY_REGISTER ( TextFileInterpreter, void, clearTextNotices, no_const_t, C("TextFile::ClearTextNotices") );
		METHOD_KEY_REGISTER ( TextFileInterpreter, shared_ptr< Base<EncodingT> >, hasTextNotices, const_t, C("TextFile::HasTextNotices") );
		METHOD_KEY_REGISTER ( TextFileInterpreter, shared_ptr< Base<EncodingT> >, textNoticesCount, const_t, C("TextFile::TextNoticesCount") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("TextFile") );
		CLASS_KEY_UNREGISTER1( C("TextFile") );
		METHOD_KEY_UNREGISTER ( C("TextFile::Rowid") );
		METHOD_KEY_UNREGISTER ( C("TextFile::Content") );
		METHOD_KEY_UNREGISTER1( C("TextFile::Content") );
		METHOD_KEY_UNREGISTER1( C("TextFile::removeTextNotices") );
		METHOD_KEY_UNREGISTER2( C("TextFile::TextNotices") );
		METHOD_KEY_UNREGISTER1( C("TextFile::TextNotices") );
		METHOD_KEY_UNREGISTER ( C("TextFile::ClearTextNotices") );
		METHOD_KEY_UNREGISTER ( C("TextFile::HasTextNotices") );
		METHOD_KEY_UNREGISTER ( C("TextFile::TextNoticesCount") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_textFile(shared_ptr< Base<EncodingT> > const& val, shared_ptr< _TextFile<EncodingT> >& o);

template <class EncodingT>
bool reset_textFile(shared_ptr< Base<EncodingT> >& val, shared_ptr< _TextFile<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "textFileInterpreter_impl.hpp"

#endif
