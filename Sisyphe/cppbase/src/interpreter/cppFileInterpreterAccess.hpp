/* 
 * cppFileInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFILE_INTERPRETER_ACCESS_HPP_
#define _CPPFILE_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppFileInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppFileAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppFileInterpreterAccess();

	~CppFileInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllCppFiles();

	FACTORY_PROTOTYPE1(getManyCppFiles, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyCppFiles(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppFile,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneCppFile(shared_ptr< Base<EncodingT> > const& textFile);

	FACTORY_PROTOTYPE2(selectOneCppFile,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneCppFile(shared_ptr< Base<EncodingT> > const& textFile,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppFiles, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyCppFiles(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppFile, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedCppFile(const shared_ptr< Base<EncodingT> >& cppFile);

	FACTORY_PROTOTYPE1(fillCppFileType, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppFileType(shared_ptr< Base<EncodingT> >& cppFile);

	FACTORY_PROTOTYPE2(fillAllCppDeclarationFunctions, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppDeclarationFunctions(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppDeclarationFunction,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppDeclarationFunction(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppDeclarationFunctions, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppDeclarationFunctions(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppDefinitionFunctions, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppDefinitionFunctions(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppDefinitionFunction,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppDefinitionFunction(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppDefinitionFunctions, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppDefinitionFunctions(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppIncludes, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppIncludes(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppInclude,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppInclude(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppIncludes, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppIncludes(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppClasss, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppClasss(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppClass,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppClass(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppClasss, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppClasss(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppEnums, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppEnums(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppEnum,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppEnum(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppEnums, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppEnums(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCMacros, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCMacros(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCMacro,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCMacro(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCMacros, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCMacros(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllDebugFileInfos, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllDebugFileInfos(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneDebugFileInfo,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneDebugFileInfo(shared_ptr< Base<EncodingT> >& refCppFile,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyDebugFileInfos, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyDebugFileInfos(shared_ptr< Base<EncodingT> >& cppFile, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedCppFile, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedCppFile(const shared_ptr< Base<EncodingT> >& cppFile);

	FACTORY_PROTOTYPE1(updateCppFile, InOut< shared_ptr< Base<EncodingT> > >)
	void updateCppFile(shared_ptr< Base<EncodingT> >& cppFile);

	FACTORY_PROTOTYPE1(insertCppFile, InOut< shared_ptr< Base<EncodingT> > >)
	void insertCppFile(shared_ptr< Base<EncodingT> >& cppFile);

	FACTORY_PROTOTYPE1(deleteCppFile, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteCppFile(shared_ptr< Base<EncodingT> >& cppFile);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppFileInterpreterAccess, C("CppFileAccess") );
		METHOD_KEY_REGISTER ( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllCppFiles, no_const_t, C("CppFileAccess::GetAllCppFiles") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyCppFiles, no_const_t, C("CppFileAccess::GetManyCppFiles") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneCppFile, no_const_t, C("CppFileAccess::GetOneCppFile") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneCppFile, no_const_t, C("CppFileAccess::SelectOneCppFile") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyCppFiles, no_const_t, C("CppFileAccess::SelectManyCppFiles") );
		METHOD_KEY_REGISTER ( CppFileInterpreterAccess, void, cancelSelection, no_const_t, C("CppFileAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedCppFile, no_const_t, C("CppFileAccess::IsSelectedCppFile") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, void, fillCppFileType, no_const_t, C("CppFileAccess::FillCppFileType") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllCppDeclarationFunctions, no_const_t, C("CppFileAccess::FillAllCppDeclarationFunctions") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneCppDeclarationFunction, no_const_t, C("CppFileAccess::FillOneCppDeclarationFunction") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyCppDeclarationFunctions, no_const_t, C("CppFileAccess::FillManyCppDeclarationFunctions") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllCppDefinitionFunctions, no_const_t, C("CppFileAccess::FillAllCppDefinitionFunctions") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneCppDefinitionFunction, no_const_t, C("CppFileAccess::FillOneCppDefinitionFunction") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyCppDefinitionFunctions, no_const_t, C("CppFileAccess::FillManyCppDefinitionFunctions") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllCppIncludes, no_const_t, C("CppFileAccess::FillAllCppIncludes") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneCppInclude, no_const_t, C("CppFileAccess::FillOneCppInclude") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyCppIncludes, no_const_t, C("CppFileAccess::FillManyCppIncludes") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllCppClasss, no_const_t, C("CppFileAccess::FillAllCppClasss") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneCppClass, no_const_t, C("CppFileAccess::FillOneCppClass") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyCppClasss, no_const_t, C("CppFileAccess::FillManyCppClasss") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllCppEnums, no_const_t, C("CppFileAccess::FillAllCppEnums") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneCppEnum, no_const_t, C("CppFileAccess::FillOneCppEnum") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyCppEnums, no_const_t, C("CppFileAccess::FillManyCppEnums") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllCMacros, no_const_t, C("CppFileAccess::FillAllCMacros") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneCMacro, no_const_t, C("CppFileAccess::FillOneCMacro") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyCMacros, no_const_t, C("CppFileAccess::FillManyCMacros") );
		METHOD_KEY_REGISTER2( CppFileInterpreterAccess, void, fillAllDebugFileInfos, no_const_t, C("CppFileAccess::FillAllDebugFileInfos") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillOneDebugFileInfo, no_const_t, C("CppFileAccess::FillOneDebugFileInfo") );
		METHOD_KEY_REGISTER3( CppFileInterpreterAccess, void, fillManyDebugFileInfos, no_const_t, C("CppFileAccess::FillManyDebugFileInfos") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedCppFile, no_const_t, C("CppFileAccess::IsModifiedCppFile") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, void, updateCppFile, no_const_t, C("CppFileAccess::UpdateCppFile") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, void, insertCppFile, no_const_t, C("CppFileAccess::InsertCppFile") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, void, deleteCppFile, no_const_t, C("CppFileAccess::DeleteCppFile") );
		METHOD_KEY_REGISTER1( CppFileInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("CppFileAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppFileAccess") );
		METHOD_KEY_UNREGISTER ( C("CppFileAccess::GetAllCppFiles") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::GetManyCppFiles") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::GetOneCppFile") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::SelectOneCppFile") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::SelectManyCppFiles") );
		METHOD_KEY_UNREGISTER ( C("CppFileAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::IsSelectedCppFile") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::FillCppFileType") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllCppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneCppDeclarationFunction") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyCppDeclarationFunctions") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllCppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneCppDefinitionFunction") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyCppDefinitionFunctions") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllCppIncludes") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneCppInclude") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyCppIncludes") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllCppClasss") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneCppClass") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyCppClasss") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllCppEnums") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneCppEnum") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyCppEnums") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllCMacros") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneCMacro") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyCMacros") );
		METHOD_KEY_UNREGISTER2( C("CppFileAccess::FillAllDebugFileInfos") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillOneDebugFileInfo") );
		METHOD_KEY_UNREGISTER3( C("CppFileAccess::FillManyDebugFileInfos") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::IsModifiedCppFile") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::UpdateCppFile") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::InsertCppFile") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::DeleteCppFile") );
		METHOD_KEY_UNREGISTER1( C("CppFileAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _CppFile<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppFileInterpreterAccess_impl.hpp"

#endif
