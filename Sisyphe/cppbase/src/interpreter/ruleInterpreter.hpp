/* 
 * ruleInterpreter.hpp
 *
 *
 * @date 25-06-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _RULE_INTERPRETER_HPP_
#define _RULE_INTERPRETER_HPP_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class RuleInterpreter
: public Base<EncodingT>
{
private:
	boost::shared_ptr< _Rule<EncodingT> > m_value;

public:
	RuleInterpreter();

	RuleInterpreter(boost::shared_ptr< _Rule<EncodingT> > const& value);

	FACTORY_PROTOTYPE3(RuleInterpreter,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >,
				In< boost::shared_ptr< Base<EncodingT> > >)
	RuleInterpreter(boost::shared_ptr< Base<EncodingT> > const& number,
				boost::shared_ptr< Base<EncodingT> > const& description,
				boost::shared_ptr< Base<EncodingT> > const& enabled);

	boost::shared_ptr< _Rule<EncodingT> > value() const;

	void value(boost::shared_ptr< _Rule<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual boost::shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

	boost::shared_ptr< Base<EncodingT> > getIdentifier() const;

	boost::shared_ptr< Base<EncodingT> > getNumber() const;

	boost::shared_ptr< Base<EncodingT> > getDescription() const;

	boost::shared_ptr< Base<EncodingT> > getEnabled() const;

	FACTORY_PROTOTYPE1(setNumber, In< boost::shared_ptr< Base<EncodingT> > >)
	void setNumber(boost::shared_ptr< Base<EncodingT> > const& number);

	FACTORY_PROTOTYPE1(setDescription, In< boost::shared_ptr< Base<EncodingT> > >)
	void setDescription(boost::shared_ptr< Base<EncodingT> > const& description);

	FACTORY_PROTOTYPE1(setEnabled, In< boost::shared_ptr< Base<EncodingT> > >)
	void setEnabled(boost::shared_ptr< Base<EncodingT> > const& enabled);

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( RuleInterpreter, UCS("Rule") );
		CLASS_KEY_REGISTER3( RuleInterpreter, UCS("Rule") );
		METHOD_KEY_REGISTER ( RuleInterpreter, boost::shared_ptr< Base<EncodingT> >, getIdentifier, const_t, UCS("Rule::Identifier") );
		METHOD_KEY_REGISTER ( RuleInterpreter, boost::shared_ptr< Base<EncodingT> >, getNumber, const_t, UCS("Rule::Number") );
		METHOD_KEY_REGISTER1( RuleInterpreter, void, setNumber, no_const_t, UCS("Rule::Number") );
		METHOD_KEY_REGISTER ( RuleInterpreter, boost::shared_ptr< Base<EncodingT> >, getDescription, const_t, UCS("Rule::Description") );
		METHOD_KEY_REGISTER1( RuleInterpreter, void, setDescription, no_const_t, UCS("Rule::Description") );
		METHOD_KEY_REGISTER ( RuleInterpreter, boost::shared_ptr< Base<EncodingT> >, getEnabled, const_t, UCS("Rule::Enabled") );
		METHOD_KEY_REGISTER1( RuleInterpreter, void, setEnabled, no_const_t, UCS("Rule::Enabled") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( UCS("Rule") );
		CLASS_KEY_UNREGISTER3( UCS("Rule") );
		METHOD_KEY_UNREGISTER ( UCS("Rule::Identifier") );
		METHOD_KEY_UNREGISTER ( UCS("Rule::Number") );
		METHOD_KEY_UNREGISTER1( UCS("Rule::Number") );
		METHOD_KEY_UNREGISTER ( UCS("Rule::Description") );
		METHOD_KEY_UNREGISTER1( UCS("Rule::Description") );
		METHOD_KEY_UNREGISTER ( UCS("Rule::Enabled") );
		METHOD_KEY_UNREGISTER1( UCS("Rule::Enabled") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_rule(boost::shared_ptr< Base<EncodingT> > const& val, boost::shared_ptr< _Rule<EncodingT> >& o);

template <class EncodingT>
bool reset_rule(boost::shared_ptr< Base<EncodingT> >& val, boost::shared_ptr< _Rule<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "ruleInterpreter_impl.hpp"

#endif
