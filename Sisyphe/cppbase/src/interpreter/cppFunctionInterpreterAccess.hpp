/* 
 * cppFunctionInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFUNCTION_INTERPRETER_ACCESS_HPP_
#define _CPPFUNCTION_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppFunctionInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppFunctionAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppFunctionInterpreterAccess();

	~CppFunctionInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllCppFunctions();

	FACTORY_PROTOTYPE1(getManyCppFunctions, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyCppFunctions(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppFunction,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneCppFunction(shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppFunction,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneCppFunction(shared_ptr< Base<EncodingT> > const& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppFunctions, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyCppFunctions(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppFunction, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedCppFunction(const shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE1(fillCppDeclarationFile, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppDeclarationFile(shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE1(fillCppDefinitionFile, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppDefinitionFile(shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE1(fillCppClass, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppClass(shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE2(fillAllCppParameters, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppParameters(shared_ptr< Base<EncodingT> >& cppFunction, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppParameter,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppParameter(shared_ptr< Base<EncodingT> >& refCppFunction,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppParameters, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppParameters(shared_ptr< Base<EncodingT> >& cppFunction, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppVariables, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppVariables(shared_ptr< Base<EncodingT> >& cppFunction, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppVariable,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppVariable(shared_ptr< Base<EncodingT> >& refCppFunction,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppVariables, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppVariables(shared_ptr< Base<EncodingT> >& cppFunction, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllDebugFunctionInfos, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllDebugFunctionInfos(shared_ptr< Base<EncodingT> >& cppFunction, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneDebugFunctionInfo,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneDebugFunctionInfo(shared_ptr< Base<EncodingT> >& refCppFunction,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyDebugFunctionInfos, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyDebugFunctionInfos(shared_ptr< Base<EncodingT> >& cppFunction, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedCppFunction, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedCppFunction(const shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE1(updateCppFunction, InOut< shared_ptr< Base<EncodingT> > >)
	void updateCppFunction(shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE1(insertCppFunction, InOut< shared_ptr< Base<EncodingT> > >)
	void insertCppFunction(shared_ptr< Base<EncodingT> >& cppFunction);

	FACTORY_PROTOTYPE1(deleteCppFunction, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteCppFunction(shared_ptr< Base<EncodingT> >& cppFunction);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppFunctionInterpreterAccess, C("CppFunctionAccess") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllCppFunctions, no_const_t, C("CppFunctionAccess::GetAllCppFunctions") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyCppFunctions, no_const_t, C("CppFunctionAccess::GetManyCppFunctions") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneCppFunction, no_const_t, C("CppFunctionAccess::GetOneCppFunction") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneCppFunction, no_const_t, C("CppFunctionAccess::SelectOneCppFunction") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyCppFunctions, no_const_t, C("CppFunctionAccess::SelectManyCppFunctions") );
		METHOD_KEY_REGISTER ( CppFunctionInterpreterAccess, void, cancelSelection, no_const_t, C("CppFunctionAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedCppFunction, no_const_t, C("CppFunctionAccess::IsSelectedCppFunction") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, void, fillCppDeclarationFile, no_const_t, C("CppFunctionAccess::FillCppDeclarationFile") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, void, fillCppDefinitionFile, no_const_t, C("CppFunctionAccess::FillCppDefinitionFile") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, void, fillCppClass, no_const_t, C("CppFunctionAccess::FillCppClass") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreterAccess, void, fillAllCppParameters, no_const_t, C("CppFunctionAccess::FillAllCppParameters") );
		METHOD_KEY_REGISTER3( CppFunctionInterpreterAccess, void, fillOneCppParameter, no_const_t, C("CppFunctionAccess::FillOneCppParameter") );
		METHOD_KEY_REGISTER3( CppFunctionInterpreterAccess, void, fillManyCppParameters, no_const_t, C("CppFunctionAccess::FillManyCppParameters") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreterAccess, void, fillAllCppVariables, no_const_t, C("CppFunctionAccess::FillAllCppVariables") );
		METHOD_KEY_REGISTER3( CppFunctionInterpreterAccess, void, fillOneCppVariable, no_const_t, C("CppFunctionAccess::FillOneCppVariable") );
		METHOD_KEY_REGISTER3( CppFunctionInterpreterAccess, void, fillManyCppVariables, no_const_t, C("CppFunctionAccess::FillManyCppVariables") );
		METHOD_KEY_REGISTER2( CppFunctionInterpreterAccess, void, fillAllDebugFunctionInfos, no_const_t, C("CppFunctionAccess::FillAllDebugFunctionInfos") );
		METHOD_KEY_REGISTER3( CppFunctionInterpreterAccess, void, fillOneDebugFunctionInfo, no_const_t, C("CppFunctionAccess::FillOneDebugFunctionInfo") );
		METHOD_KEY_REGISTER3( CppFunctionInterpreterAccess, void, fillManyDebugFunctionInfos, no_const_t, C("CppFunctionAccess::FillManyDebugFunctionInfos") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedCppFunction, no_const_t, C("CppFunctionAccess::IsModifiedCppFunction") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, void, updateCppFunction, no_const_t, C("CppFunctionAccess::UpdateCppFunction") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, void, insertCppFunction, no_const_t, C("CppFunctionAccess::InsertCppFunction") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, void, deleteCppFunction, no_const_t, C("CppFunctionAccess::DeleteCppFunction") );
		METHOD_KEY_REGISTER1( CppFunctionInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("CppFunctionAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppFunctionAccess") );
		METHOD_KEY_UNREGISTER ( C("CppFunctionAccess::GetAllCppFunctions") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::GetManyCppFunctions") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::GetOneCppFunction") );
		METHOD_KEY_UNREGISTER2( C("CppFunctionAccess::SelectOneCppFunction") );
		METHOD_KEY_UNREGISTER2( C("CppFunctionAccess::SelectManyCppFunctions") );
		METHOD_KEY_UNREGISTER ( C("CppFunctionAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::IsSelectedCppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::FillCppDeclarationFile") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::FillCppDefinitionFile") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::FillCppClass") );
		METHOD_KEY_UNREGISTER2( C("CppFunctionAccess::FillAllCppParameters") );
		METHOD_KEY_UNREGISTER3( C("CppFunctionAccess::FillOneCppParameter") );
		METHOD_KEY_UNREGISTER3( C("CppFunctionAccess::FillManyCppParameters") );
		METHOD_KEY_UNREGISTER2( C("CppFunctionAccess::FillAllCppVariables") );
		METHOD_KEY_UNREGISTER3( C("CppFunctionAccess::FillOneCppVariable") );
		METHOD_KEY_UNREGISTER3( C("CppFunctionAccess::FillManyCppVariables") );
		METHOD_KEY_UNREGISTER2( C("CppFunctionAccess::FillAllDebugFunctionInfos") );
		METHOD_KEY_UNREGISTER3( C("CppFunctionAccess::FillOneDebugFunctionInfo") );
		METHOD_KEY_UNREGISTER3( C("CppFunctionAccess::FillManyDebugFunctionInfos") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::IsModifiedCppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::UpdateCppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::InsertCppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::DeleteCppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppFunctionAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _CppFunction<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppFunctionInterpreterAccess_impl.hpp"

#endif
