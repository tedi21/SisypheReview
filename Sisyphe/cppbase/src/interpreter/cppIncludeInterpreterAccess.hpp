/* 
 * cppIncludeInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPINCLUDE_INTERPRETER_ACCESS_HPP_
#define _CPPINCLUDE_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppIncludeInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppIncludeAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppIncludeInterpreterAccess();

	~CppIncludeInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllCppIncludes();

	FACTORY_PROTOTYPE1(getManyCppIncludes, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyCppIncludes(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppInclude,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneCppInclude(shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppInclude,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneCppInclude(shared_ptr< Base<EncodingT> > const& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppIncludes, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyCppIncludes(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppInclude, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedCppInclude(const shared_ptr< Base<EncodingT> >& cppInclude);

	FACTORY_PROTOTYPE1(fillCppFile, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppFile(shared_ptr< Base<EncodingT> >& cppInclude);

	FACTORY_PROTOTYPE1(isModifiedCppInclude, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedCppInclude(const shared_ptr< Base<EncodingT> >& cppInclude);

	FACTORY_PROTOTYPE1(updateCppInclude, InOut< shared_ptr< Base<EncodingT> > >)
	void updateCppInclude(shared_ptr< Base<EncodingT> >& cppInclude);

	FACTORY_PROTOTYPE1(insertCppInclude, InOut< shared_ptr< Base<EncodingT> > >)
	void insertCppInclude(shared_ptr< Base<EncodingT> >& cppInclude);

	FACTORY_PROTOTYPE1(deleteCppInclude, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteCppInclude(shared_ptr< Base<EncodingT> >& cppInclude);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppIncludeInterpreterAccess, C("CppIncludeAccess") );
		METHOD_KEY_REGISTER ( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllCppIncludes, no_const_t, C("CppIncludeAccess::GetAllCppIncludes") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyCppIncludes, no_const_t, C("CppIncludeAccess::GetManyCppIncludes") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneCppInclude, no_const_t, C("CppIncludeAccess::GetOneCppInclude") );
		METHOD_KEY_REGISTER2( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneCppInclude, no_const_t, C("CppIncludeAccess::SelectOneCppInclude") );
		METHOD_KEY_REGISTER2( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyCppIncludes, no_const_t, C("CppIncludeAccess::SelectManyCppIncludes") );
		METHOD_KEY_REGISTER ( CppIncludeInterpreterAccess, void, cancelSelection, no_const_t, C("CppIncludeAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedCppInclude, no_const_t, C("CppIncludeAccess::IsSelectedCppInclude") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, void, fillCppFile, no_const_t, C("CppIncludeAccess::FillCppFile") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedCppInclude, no_const_t, C("CppIncludeAccess::IsModifiedCppInclude") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, void, updateCppInclude, no_const_t, C("CppIncludeAccess::UpdateCppInclude") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, void, insertCppInclude, no_const_t, C("CppIncludeAccess::InsertCppInclude") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, void, deleteCppInclude, no_const_t, C("CppIncludeAccess::DeleteCppInclude") );
		METHOD_KEY_REGISTER1( CppIncludeInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("CppIncludeAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppIncludeAccess") );
		METHOD_KEY_UNREGISTER ( C("CppIncludeAccess::GetAllCppIncludes") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::GetManyCppIncludes") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::GetOneCppInclude") );
		METHOD_KEY_UNREGISTER2( C("CppIncludeAccess::SelectOneCppInclude") );
		METHOD_KEY_UNREGISTER2( C("CppIncludeAccess::SelectManyCppIncludes") );
		METHOD_KEY_UNREGISTER ( C("CppIncludeAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::IsSelectedCppInclude") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::FillCppFile") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::IsModifiedCppInclude") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::UpdateCppInclude") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::InsertCppInclude") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::DeleteCppInclude") );
		METHOD_KEY_UNREGISTER1( C("CppIncludeAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _CppInclude<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppIncludeInterpreterAccess_impl.hpp"

#endif
