/* 
 * cppClassInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPCLASS_INTERPRETER_ACCESS_HPP_
#define _CPPCLASS_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppClassInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppClassAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppClassInterpreterAccess();

	~CppClassInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllCppClasss();

	FACTORY_PROTOTYPE1(getManyCppClasss, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyCppClasss(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppClass,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneCppClass(shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppClass,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneCppClass(shared_ptr< Base<EncodingT> > const& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppClasss, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyCppClasss(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppClass, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedCppClass(const shared_ptr< Base<EncodingT> >& cppClass);

	FACTORY_PROTOTYPE1(fillCppFile, InOut< shared_ptr< Base<EncodingT> > >)
	void fillCppFile(shared_ptr< Base<EncodingT> >& cppClass);

	FACTORY_PROTOTYPE2(fillAllCppInheritances, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppInheritances(shared_ptr< Base<EncodingT> >& cppClass, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppInheritance,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppInheritance(shared_ptr< Base<EncodingT> >& refCppClass,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppInheritances, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppInheritances(shared_ptr< Base<EncodingT> >& cppClass, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppFunctions, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppFunctions(shared_ptr< Base<EncodingT> >& cppClass, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppFunction,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppFunction(shared_ptr< Base<EncodingT> >& refCppClass,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppFunctions, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppFunctions(shared_ptr< Base<EncodingT> >& cppClass, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(fillAllCppAttributes, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillAllCppAttributes(shared_ptr< Base<EncodingT> >& cppClass, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillOneCppAttribute,
				InOut< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	void fillOneCppAttribute(shared_ptr< Base<EncodingT> >& refCppClass,
				const shared_ptr< Base<EncodingT> >& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE3(fillManyCppAttributes, InOut< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	void fillManyCppAttributes(shared_ptr< Base<EncodingT> >& cppClass, const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE1(isModifiedCppClass, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedCppClass(const shared_ptr< Base<EncodingT> >& cppClass);

	FACTORY_PROTOTYPE1(updateCppClass, InOut< shared_ptr< Base<EncodingT> > >)
	void updateCppClass(shared_ptr< Base<EncodingT> >& cppClass);

	FACTORY_PROTOTYPE1(insertCppClass, InOut< shared_ptr< Base<EncodingT> > >)
	void insertCppClass(shared_ptr< Base<EncodingT> >& cppClass);

	FACTORY_PROTOTYPE1(deleteCppClass, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteCppClass(shared_ptr< Base<EncodingT> >& cppClass);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppClassInterpreterAccess, C("CppClassAccess") );
		METHOD_KEY_REGISTER ( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllCppClasss, no_const_t, C("CppClassAccess::GetAllCppClasss") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyCppClasss, no_const_t, C("CppClassAccess::GetManyCppClasss") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneCppClass, no_const_t, C("CppClassAccess::GetOneCppClass") );
		METHOD_KEY_REGISTER2( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneCppClass, no_const_t, C("CppClassAccess::SelectOneCppClass") );
		METHOD_KEY_REGISTER2( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyCppClasss, no_const_t, C("CppClassAccess::SelectManyCppClasss") );
		METHOD_KEY_REGISTER ( CppClassInterpreterAccess, void, cancelSelection, no_const_t, C("CppClassAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedCppClass, no_const_t, C("CppClassAccess::IsSelectedCppClass") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, void, fillCppFile, no_const_t, C("CppClassAccess::FillCppFile") );
		METHOD_KEY_REGISTER2( CppClassInterpreterAccess, void, fillAllCppInheritances, no_const_t, C("CppClassAccess::FillAllCppInheritances") );
		METHOD_KEY_REGISTER3( CppClassInterpreterAccess, void, fillOneCppInheritance, no_const_t, C("CppClassAccess::FillOneCppInheritance") );
		METHOD_KEY_REGISTER3( CppClassInterpreterAccess, void, fillManyCppInheritances, no_const_t, C("CppClassAccess::FillManyCppInheritances") );
		METHOD_KEY_REGISTER2( CppClassInterpreterAccess, void, fillAllCppFunctions, no_const_t, C("CppClassAccess::FillAllCppFunctions") );
		METHOD_KEY_REGISTER3( CppClassInterpreterAccess, void, fillOneCppFunction, no_const_t, C("CppClassAccess::FillOneCppFunction") );
		METHOD_KEY_REGISTER3( CppClassInterpreterAccess, void, fillManyCppFunctions, no_const_t, C("CppClassAccess::FillManyCppFunctions") );
		METHOD_KEY_REGISTER2( CppClassInterpreterAccess, void, fillAllCppAttributes, no_const_t, C("CppClassAccess::FillAllCppAttributes") );
		METHOD_KEY_REGISTER3( CppClassInterpreterAccess, void, fillOneCppAttribute, no_const_t, C("CppClassAccess::FillOneCppAttribute") );
		METHOD_KEY_REGISTER3( CppClassInterpreterAccess, void, fillManyCppAttributes, no_const_t, C("CppClassAccess::FillManyCppAttributes") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedCppClass, no_const_t, C("CppClassAccess::IsModifiedCppClass") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, void, updateCppClass, no_const_t, C("CppClassAccess::UpdateCppClass") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, void, insertCppClass, no_const_t, C("CppClassAccess::InsertCppClass") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, void, deleteCppClass, no_const_t, C("CppClassAccess::DeleteCppClass") );
		METHOD_KEY_REGISTER1( CppClassInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("CppClassAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppClassAccess") );
		METHOD_KEY_UNREGISTER ( C("CppClassAccess::GetAllCppClasss") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::GetManyCppClasss") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::GetOneCppClass") );
		METHOD_KEY_UNREGISTER2( C("CppClassAccess::SelectOneCppClass") );
		METHOD_KEY_UNREGISTER2( C("CppClassAccess::SelectManyCppClasss") );
		METHOD_KEY_UNREGISTER ( C("CppClassAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::IsSelectedCppClass") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::FillCppFile") );
		METHOD_KEY_UNREGISTER2( C("CppClassAccess::FillAllCppInheritances") );
		METHOD_KEY_UNREGISTER3( C("CppClassAccess::FillOneCppInheritance") );
		METHOD_KEY_UNREGISTER3( C("CppClassAccess::FillManyCppInheritances") );
		METHOD_KEY_UNREGISTER2( C("CppClassAccess::FillAllCppFunctions") );
		METHOD_KEY_UNREGISTER3( C("CppClassAccess::FillOneCppFunction") );
		METHOD_KEY_UNREGISTER3( C("CppClassAccess::FillManyCppFunctions") );
		METHOD_KEY_UNREGISTER2( C("CppClassAccess::FillAllCppAttributes") );
		METHOD_KEY_UNREGISTER3( C("CppClassAccess::FillOneCppAttribute") );
		METHOD_KEY_UNREGISTER3( C("CppClassAccess::FillManyCppAttributes") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::IsModifiedCppClass") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::UpdateCppClass") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::InsertCppClass") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::DeleteCppClass") );
		METHOD_KEY_UNREGISTER1( C("CppClassAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _CppClass<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppClassInterpreterAccess_impl.hpp"

#endif
