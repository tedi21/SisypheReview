/* 
 * cppInheritanceInterpreterAccess.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPINHERITANCE_INTERPRETER_ACCESS_HPP_
#define _CPPINHERITANCE_INTERPRETER_ACCESS_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace data_access;
using namespace boost;

template <class EncodingT>
class CppInheritanceInterpreterAccess
: public Base<EncodingT>
{
private:
	_CppInheritanceAccess<EncodingT>* m_object;
	std::string m_errorText;
	bool m_error;

public:
	CppInheritanceInterpreterAccess();

	~CppInheritanceInterpreterAccess();

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getAllCppInheritances();

	FACTORY_PROTOTYPE1(getManyCppInheritances, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getManyCppInheritances(const shared_ptr< Base<EncodingT> >& filter);

	FACTORY_PROTOTYPE1(getOneCppInheritance,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getOneCppInheritance(shared_ptr< Base<EncodingT> > const& identifier);

	FACTORY_PROTOTYPE2(selectOneCppInheritance,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectOneCppInheritance(shared_ptr< Base<EncodingT> > const& identifier,
				const shared_ptr< Base<EncodingT> >& nowait);

	FACTORY_PROTOTYPE2(selectManyCppInheritances, In< shared_ptr< Base<EncodingT> > >, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > selectManyCppInheritances(const shared_ptr< Base<EncodingT> >& filter, const shared_ptr< Base<EncodingT> >& nowait);

	void cancelSelection();

	FACTORY_PROTOTYPE1(isSelectedCppInheritance, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isSelectedCppInheritance(const shared_ptr< Base<EncodingT> >& cppInheritance);

	FACTORY_PROTOTYPE1(fillDerived, InOut< shared_ptr< Base<EncodingT> > >)
	void fillDerived(shared_ptr< Base<EncodingT> >& cppInheritance);

	FACTORY_PROTOTYPE1(isModifiedCppInheritance, In< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > isModifiedCppInheritance(const shared_ptr< Base<EncodingT> >& cppInheritance);

	FACTORY_PROTOTYPE1(updateCppInheritance, InOut< shared_ptr< Base<EncodingT> > >)
	void updateCppInheritance(shared_ptr< Base<EncodingT> >& cppInheritance);

	FACTORY_PROTOTYPE1(insertCppInheritance, InOut< shared_ptr< Base<EncodingT> > >)
	void insertCppInheritance(shared_ptr< Base<EncodingT> >& cppInheritance);

	FACTORY_PROTOTYPE1(deleteCppInheritance, InOut< shared_ptr< Base<EncodingT> > >)
	void deleteCppInheritance(shared_ptr< Base<EncodingT> >& cppInheritance);

	void setError(const std::exception& e);

	void clearError();

	FACTORY_PROTOTYPE1(getError, InOut< shared_ptr< Base<EncodingT> > >)
	shared_ptr< Base<EncodingT> > getError(shared_ptr< Base<EncodingT> >& text) const;

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppInheritanceInterpreterAccess, C("CppInheritanceAccess") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, getAllCppInheritances, no_const_t, C("CppInheritanceAccess::GetAllCppInheritances") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, getManyCppInheritances, no_const_t, C("CppInheritanceAccess::GetManyCppInheritances") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, getOneCppInheritance, no_const_t, C("CppInheritanceAccess::GetOneCppInheritance") );
		METHOD_KEY_REGISTER2( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, selectOneCppInheritance, no_const_t, C("CppInheritanceAccess::SelectOneCppInheritance") );
		METHOD_KEY_REGISTER2( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, selectManyCppInheritances, no_const_t, C("CppInheritanceAccess::SelectManyCppInheritances") );
		METHOD_KEY_REGISTER ( CppInheritanceInterpreterAccess, void, cancelSelection, no_const_t, C("CppInheritanceAccess::CancelSelection") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, isSelectedCppInheritance, no_const_t, C("CppInheritanceAccess::IsSelectedCppInheritance") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, void, fillDerived, no_const_t, C("CppInheritanceAccess::FillDerived") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, isModifiedCppInheritance, no_const_t, C("CppInheritanceAccess::IsModifiedCppInheritance") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, void, updateCppInheritance, no_const_t, C("CppInheritanceAccess::UpdateCppInheritance") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, void, insertCppInheritance, no_const_t, C("CppInheritanceAccess::InsertCppInheritance") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, void, deleteCppInheritance, no_const_t, C("CppInheritanceAccess::DeleteCppInheritance") );
		METHOD_KEY_REGISTER1( CppInheritanceInterpreterAccess, shared_ptr< Base<EncodingT> >, getError, const_t, C("CppInheritanceAccess::GetError") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppInheritanceAccess") );
		METHOD_KEY_UNREGISTER ( C("CppInheritanceAccess::GetAllCppInheritances") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::GetManyCppInheritances") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::GetOneCppInheritance") );
		METHOD_KEY_UNREGISTER2( C("CppInheritanceAccess::SelectOneCppInheritance") );
		METHOD_KEY_UNREGISTER2( C("CppInheritanceAccess::SelectManyCppInheritances") );
		METHOD_KEY_UNREGISTER ( C("CppInheritanceAccess::CancelSelection") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::IsSelectedCppInheritance") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::FillDerived") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::IsModifiedCppInheritance") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::UpdateCppInheritance") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::InsertCppInheritance") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::DeleteCppInheritance") );
		METHOD_KEY_UNREGISTER1( C("CppInheritanceAccess::GetError") );
	FACTORY_END_UNREGISTER

	shared_ptr< Base<EncodingT> > convert_array(const std::vector< shared_ptr< _CppInheritance<EncodingT> > >& value) const;
};

NAMESPACE_END

#undef C
#undef A

#include "cppInheritanceInterpreterAccess_impl.hpp"

#endif
