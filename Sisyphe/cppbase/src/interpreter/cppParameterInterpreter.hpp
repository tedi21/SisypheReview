/* 
 * cppParameterInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPPARAMETER_INTERPRETER_HPP_
#define _CPPPARAMETER_INTERPRETER_HPP_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include "cppBaseExport.hpp"
#include "cppBaseData.h"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace entity;
using namespace boost;

template <class EncodingT>
class CppFunctionInterpreter;

template <class EncodingT>
class CppParameterInterpreter
: public String<EncodingT>
{
private:
	shared_ptr< _CppParameter<EncodingT> > m_value;

public:
	CppParameterInterpreter();

	CppParameterInterpreter(shared_ptr< _CppParameter<EncodingT> > const& value);

	FACTORY_PROTOTYPE9(CppParameterInterpreter,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >,
				In< shared_ptr< Base<EncodingT> > >)
	CppParameterInterpreter(shared_ptr< Base<EncodingT> > const& paramOrder,
				shared_ptr< Base<EncodingT> > const& paramType,
				shared_ptr< Base<EncodingT> > const& defaultValue,
				shared_ptr< Base<EncodingT> > const& decName,
				shared_ptr< Base<EncodingT> > const& startDecBlock,
				shared_ptr< Base<EncodingT> > const& lengthDecBlock,
				shared_ptr< Base<EncodingT> > const& defName,
				shared_ptr< Base<EncodingT> > const& startDefBlock,
				shared_ptr< Base<EncodingT> > const& lengthDefBlock);

	~CppParameterInterpreter();

	shared_ptr< _CppParameter<EncodingT> > getValue() const;

	void setValue(shared_ptr< _CppParameter<EncodingT> > const& value);

	virtual typename EncodingT::string_t toString() const;

	virtual shared_ptr< Base<EncodingT> > clone() const;

	virtual typename EncodingT::string_t getClassName() const;

	virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

	shared_ptr< Base<EncodingT> > getIdentifier() const;

	shared_ptr< Base<EncodingT> > getParamOrder() const;

	shared_ptr< Base<EncodingT> > getParamType() const;

	shared_ptr< Base<EncodingT> > getDefaultValue() const;

	shared_ptr< Base<EncodingT> > getDecName() const;

	shared_ptr< Base<EncodingT> > getStartDecBlock() const;

	shared_ptr< Base<EncodingT> > getLengthDecBlock() const;

	shared_ptr< Base<EncodingT> > getDefName() const;

	shared_ptr< Base<EncodingT> > getStartDefBlock() const;

	shared_ptr< Base<EncodingT> > getLengthDefBlock() const;

	shared_ptr< Base<EncodingT> > getCppFunction();

	FACTORY_PROTOTYPE1(setParamOrder, In< shared_ptr< Base<EncodingT> > >)
	void setParamOrder(shared_ptr< Base<EncodingT> > const& paramOrder);

	FACTORY_PROTOTYPE1(setParamType, In< shared_ptr< Base<EncodingT> > >)
	void setParamType(shared_ptr< Base<EncodingT> > const& paramType);

	FACTORY_PROTOTYPE1(setDefaultValue, In< shared_ptr< Base<EncodingT> > >)
	void setDefaultValue(shared_ptr< Base<EncodingT> > const& defaultValue);

	FACTORY_PROTOTYPE1(setCppFunction, In< shared_ptr< Base<EncodingT> > >)
	void setCppFunction(shared_ptr< Base<EncodingT> > const& cppFunction);

	FACTORY_PROTOTYPE1(setDecName, In< shared_ptr< Base<EncodingT> > >)
	void setDecName(shared_ptr< Base<EncodingT> > const& decName);

	FACTORY_PROTOTYPE1(setStartDecBlock, In< shared_ptr< Base<EncodingT> > >)
	void setStartDecBlock(shared_ptr< Base<EncodingT> > const& startDecBlock);

	FACTORY_PROTOTYPE1(setLengthDecBlock, In< shared_ptr< Base<EncodingT> > >)
	void setLengthDecBlock(shared_ptr< Base<EncodingT> > const& lengthDecBlock);

	FACTORY_PROTOTYPE1(setDefName, In< shared_ptr< Base<EncodingT> > >)
	void setDefName(shared_ptr< Base<EncodingT> > const& defName);

	FACTORY_PROTOTYPE1(setStartDefBlock, In< shared_ptr< Base<EncodingT> > >)
	void setStartDefBlock(shared_ptr< Base<EncodingT> > const& startDefBlock);

	FACTORY_PROTOTYPE1(setLengthDefBlock, In< shared_ptr< Base<EncodingT> > >)
	void setLengthDefBlock(shared_ptr< Base<EncodingT> > const& lengthDefBlock);

	shared_ptr< Base<EncodingT> > hasCppFunction() const;

	void removeCppFunction();

	FACTORY_BEGIN_REGISTER
		CLASS_KEY_REGISTER ( CppParameterInterpreter, C("CppParameter") );
		CLASS_KEY_REGISTER9( CppParameterInterpreter, C("CppParameter") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getIdentifier, const_t, C("CppParameter::Identifier") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getParamOrder, const_t, C("CppParameter::ParamOrder") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setParamOrder, no_const_t, C("CppParameter::ParamOrder") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getParamType, const_t, C("CppParameter::ParamType") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setParamType, no_const_t, C("CppParameter::ParamType") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getDefaultValue, const_t, C("CppParameter::DefaultValue") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setDefaultValue, no_const_t, C("CppParameter::DefaultValue") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setCppFunction, no_const_t, C("CppParameter::CppFunction") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getCppFunction, no_const_t, C("CppParameter::CppFunction") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, hasCppFunction, const_t, C("CppParameter::HasCppFunction") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, void, removeCppFunction, no_const_t, C("CppParameter::removeCppFunction") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getDecName, const_t, C("CppParameter::DecName") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setDecName, no_const_t, C("CppParameter::DecName") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getStartDecBlock, const_t, C("CppParameter::StartDecBlock") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setStartDecBlock, no_const_t, C("CppParameter::StartDecBlock") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getLengthDecBlock, const_t, C("CppParameter::LengthDecBlock") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setLengthDecBlock, no_const_t, C("CppParameter::LengthDecBlock") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getDefName, const_t, C("CppParameter::DefName") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setDefName, no_const_t, C("CppParameter::DefName") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getStartDefBlock, const_t, C("CppParameter::StartDefBlock") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setStartDefBlock, no_const_t, C("CppParameter::StartDefBlock") );
		METHOD_KEY_REGISTER ( CppParameterInterpreter, shared_ptr< Base<EncodingT> >, getLengthDefBlock, const_t, C("CppParameter::LengthDefBlock") );
		METHOD_KEY_REGISTER1( CppParameterInterpreter, void, setLengthDefBlock, no_const_t, C("CppParameter::LengthDefBlock") );
	FACTORY_END_REGISTER

	FACTORY_BEGIN_UNREGISTER
		CLASS_KEY_UNREGISTER ( C("CppParameter") );
		CLASS_KEY_UNREGISTER9( C("CppParameter") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::Identifier") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::ParamOrder") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::ParamOrder") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::ParamType") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::ParamType") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::DefaultValue") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::DefaultValue") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::CppFunction") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::CppFunction") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::HasCppFunction") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::removeCppFunction") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::DecName") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::DecName") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::StartDecBlock") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::StartDecBlock") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::LengthDecBlock") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::LengthDecBlock") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::DefName") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::DefName") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::StartDefBlock") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::StartDefBlock") );
		METHOD_KEY_UNREGISTER ( C("CppParameter::LengthDefBlock") );
		METHOD_KEY_UNREGISTER1( C("CppParameter::LengthDefBlock") );
	FACTORY_END_UNREGISTER
};

template <class EncodingT>
bool check_cppParameter(shared_ptr< Base<EncodingT> > const& val, shared_ptr< _CppParameter<EncodingT> >& o);

template <class EncodingT>
bool reset_cppParameter(shared_ptr< Base<EncodingT> >& val, shared_ptr< _CppParameter<EncodingT> > const& o);

NAMESPACE_END

#undef C
#undef A

#include "cppParameterInterpreter_impl.hpp"

#endif
