/* 
 * cppClassPredicate.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPCLASS_PREDICATE_HPP_
#define _CPPCLASS_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _CppClass<EncodingT>::CppClassIDEquality {
private :
	long long	m_identifier;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param identifier 
	*/
	CppClassIDEquality(long long identifier)
	: m_identifier(identifier)
	{
	}

	CppClassIDEquality(const _CppClass<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>name</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::NameEquality {
private :
	typename EncodingT::string_t	m_name;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param name 
	*/
	NameEquality(const typename EncodingT::string_t& name)
	: m_name(name)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_name==other->getName());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::NameInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() < elem2->getName());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::NameSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() > elem2->getName());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>fullName</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::FullNameEquality {
private :
	typename EncodingT::string_t	m_fullName;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param fullName 
	*/
	FullNameEquality(const typename EncodingT::string_t& fullName)
	: m_fullName(fullName)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_fullName==other->getFullName());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>fullName</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::FullNameInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getFullName() < elem2->getFullName());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>fullName</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::FullNameSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getFullName() > elem2->getFullName());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>accessSpecifier</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::AccessSpecifierEquality {
private :
	typename EncodingT::string_t	m_accessSpecifier;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param accessSpecifier 
	*/
	AccessSpecifierEquality(const typename EncodingT::string_t& accessSpecifier)
	: m_accessSpecifier(accessSpecifier)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_accessSpecifier==other->getAccessSpecifier());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>accessSpecifier</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::AccessSpecifierInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getAccessSpecifier() < elem2->getAccessSpecifier());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>accessSpecifier</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::AccessSpecifierSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getAccessSpecifier() > elem2->getAccessSpecifier());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>isStruct</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsStructEquality {
private :
	long long	m_isStruct;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param isStruct 
	*/
	IsStructEquality(long long isStruct)
	: m_isStruct(isStruct)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_isStruct==other->getIsStruct());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isStruct</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsStructInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsStruct() < elem2->getIsStruct());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isStruct</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsStructSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsStruct() > elem2->getIsStruct());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>isInterface</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsInterfaceEquality {
private :
	long long	m_isInterface;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param isInterface 
	*/
	IsInterfaceEquality(long long isInterface)
	: m_isInterface(isInterface)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_isInterface==other->getIsInterface());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isInterface</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsInterfaceInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsInterface() < elem2->getIsInterface());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isInterface</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsInterfaceSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsInterface() > elem2->getIsInterface());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>isAbstract</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsAbstractEquality {
private :
	long long	m_isAbstract;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param isAbstract 
	*/
	IsAbstractEquality(long long isAbstract)
	: m_isAbstract(isAbstract)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_isAbstract==other->getIsAbstract());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isAbstract</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsAbstractInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsAbstract() < elem2->getIsAbstract());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isAbstract</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsAbstractSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsAbstract() > elem2->getIsAbstract());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>isTemplate</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsTemplateEquality {
private :
	long long	m_isTemplate;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param isTemplate 
	*/
	IsTemplateEquality(long long isTemplate)
	: m_isTemplate(isTemplate)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_isTemplate==other->getIsTemplate());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isTemplate</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsTemplateInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsTemplate() < elem2->getIsTemplate());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>isTemplate</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::IsTemplateSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsTemplate() > elem2->getIsTemplate());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>linesCount</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LinesCountEquality {
private :
	long long	m_linesCount;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param linesCount 
	*/
	LinesCountEquality(long long linesCount)
	: m_linesCount(linesCount)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_linesCount==other->getLinesCount());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>linesCount</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LinesCountInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLinesCount() < elem2->getLinesCount());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>linesCount</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LinesCountSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLinesCount() > elem2->getLinesCount());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>lineNumber</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LineNumberEquality {
private :
	long long	m_lineNumber;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param lineNumber 
	*/
	LineNumberEquality(long long lineNumber)
	: m_lineNumber(lineNumber)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_lineNumber==other->getLineNumber());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LineNumberInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() < elem2->getLineNumber());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LineNumberSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() > elem2->getLineNumber());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>startBlock</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::StartBlockEquality {
private :
	long long	m_startBlock;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param startBlock 
	*/
	StartBlockEquality(long long startBlock)
	: m_startBlock(startBlock)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_startBlock==other->getStartBlock());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>startBlock</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::StartBlockInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getStartBlock() < elem2->getStartBlock());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>startBlock</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::StartBlockSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getStartBlock() > elem2->getStartBlock());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to find an object with the same element <i>lengthBlock</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LengthBlockEquality {
private :
	long long	m_lengthBlock;
public :
	/** Creates a new functor allowing to find CppClass object.
	@param lengthBlock 
	*/
	LengthBlockEquality(long long lengthBlock)
	: m_lengthBlock(lengthBlock)
	{
	}

	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > other) const 
	{
		return (other != NULL && m_lengthBlock==other->getLengthBlock());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>lengthBlock</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LengthBlockInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLengthBlock() < elem2->getLengthBlock());
	}

};

/// Represents a comparaison class for CppClass object.
/// This class is used to sort objects by <i>lengthBlock</i>.
template<class EncodingT>
class  _CppClass<EncodingT>::LengthBlockSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppClass<EncodingT> > elem1, boost::shared_ptr< _CppClass<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLengthBlock() > elem2->getLengthBlock());
	}

};

NAMESPACE_END

#endif
