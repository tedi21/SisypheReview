/* 
 * cppNotice.hpp
 *
 *
 * @date 25-06-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPNOTICE_HPP_
#define _CPPNOTICE_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _CppNoticeAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _CppFile;

/// cppNotice table represents an error.
template <class EncodingT>
class  _CppNotice {
private :
	long long	m_identifier;
	typename EncodingT::string_t	m_description;
	typename EncodingT::string_t	m_category;
	long long	m_ruleNumber;
	boost::shared_ptr< _CppFile<EncodingT> >	m_cppFile;
	long long	m_lineNumber;
	long long	m_startBlock;
	long long	m_lengthBlock;
	long long	m_isNew;
	Category*	m_logger;

protected :
	friend class data_access::_CppNoticeAccess<EncodingT>;

	/** Creates a new element CppNotice.
	@param identifier 
	@param description 
	@param category 
	@param ruleNumber 
	@param lineNumber 
	@param startBlock 
	@param lengthBlock 
	@param isNew 
	*/
	_CppNotice(long long identifier,
				const typename EncodingT::string_t& description,
				const typename EncodingT::string_t& category,
				long long ruleNumber,
				long long lineNumber,
				long long startBlock,
				long long lengthBlock,
				long long isNew)
	: m_identifier(identifier),
	  m_description(description),
	  m_category(category),
	  m_ruleNumber(ruleNumber),
	  m_lineNumber(lineNumber),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock),
	  m_isNew(isNew)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppNotice "
				<< m_identifier << ' '
				<< A(m_description) << ' '
				<< A(m_category) << ' '
				<< m_ruleNumber << ' '
				<< m_lineNumber << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' '
				<< m_isNew << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in CppNotice.
	@param identifier 
	*/
	void setIdentifier(long long identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element CppNotice.
	*/
	_CppNotice()
	: m_identifier(-1),
	  m_description(EncodingT::EMPTY),
	  m_category(EncodingT::EMPTY),
	  m_ruleNumber(0),
	  m_lineNumber(0),
	  m_startBlock(0),
	  m_lengthBlock(0),
	  m_isNew(0)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppNotice ";
	}

	/** Creates a new element CppNotice.
	@param description 
	@param category 
	@param ruleNumber 
	@param lineNumber 
	@param startBlock 
	@param lengthBlock 
	@param isNew 
	*/
	_CppNotice(const typename EncodingT::string_t& description,
				const typename EncodingT::string_t& category,
				long long ruleNumber,
				long long lineNumber,
				long long startBlock,
				long long lengthBlock,
				long long isNew)
	: m_identifier(-1),
	  m_description(description),
	  m_category(category),
	  m_ruleNumber(ruleNumber),
	  m_lineNumber(lineNumber),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock),
	  m_isNew(isNew)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppNotice "
				<< m_identifier << ' '
				<< A(m_description) << ' '
				<< A(m_category) << ' '
				<< m_ruleNumber << ' '
				<< m_lineNumber << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' '
				<< m_isNew << ' ';
	}

	/** Returns a const reference to the element <i>identifier</i> in CppNotice.
	@return 
	*/
	long long getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>description</i> in CppNotice.
	@return 
	*/
	const typename EncodingT::string_t& getDescription() const 
	{
		return m_description;
	}

	/** Sets a value of the element <i>description</i> in CppNotice.
	@param description 
	*/
	void setDescription(const typename EncodingT::string_t& description)  
	{
		m_description = description;
	}

	/** Returns a const reference to the element <i>category</i> in CppNotice.
	@return 
	*/
	const typename EncodingT::string_t& getCategory() const 
	{
		return m_category;
	}

	/** Sets a value of the element <i>category</i> in CppNotice.
	@param category 
	*/
	void setCategory(const typename EncodingT::string_t& category)  
	{
		m_category = category;
	}

	/** Returns a const reference to the element <i>ruleNumber</i> in CppNotice.
	@return 
	*/
	long long getRuleNumber() const 
	{
		return m_ruleNumber;
	}

	/** Sets a value of the element <i>ruleNumber</i> in CppNotice.
	@param ruleNumber 
	*/
	void setRuleNumber(long long ruleNumber)  
	{
		m_ruleNumber = ruleNumber;
	}

	/** Returns a const reference to the element <i>cppFile</i> in CppNotice.
	@return 
	*/
	boost::shared_ptr< _CppFile<EncodingT> > getCppFile() const 
	{
		return m_cppFile;
	}

	/** Sets a value of the element <i>cppFile</i> in CppNotice.
	@param cppFile 
	*/
	void setCppFile(boost::shared_ptr< _CppFile<EncodingT> > cppFile)  
	{
		m_cppFile = cppFile;
	}

	/** Returns whether the element <i>cppFile</i> in CppNotice is NULL.
	@return True if the element <i>cppFile</i> is NULL, false otherwise.
	*/
	bool isNullCppFile() const 
	{
		return !m_cppFile;
	}

	/** Removes from CppNotice an element <i>cppFile</i>.
	*/
	void eraseCppFile()  
	{
		m_cppFile.reset();
	}

	/** Returns a const reference to the element <i>lineNumber</i> in CppNotice.
	@return 
	*/
	long long getLineNumber() const 
	{
		return m_lineNumber;
	}

	/** Sets a value of the element <i>lineNumber</i> in CppNotice.
	@param lineNumber 
	*/
	void setLineNumber(long long lineNumber)  
	{
		m_lineNumber = lineNumber;
	}

	/** Returns a const reference to the element <i>startBlock</i> in CppNotice.
	@return 
	*/
	long long getStartBlock() const 
	{
		return m_startBlock;
	}

	/** Sets a value of the element <i>startBlock</i> in CppNotice.
	@param startBlock 
	*/
	void setStartBlock(long long startBlock)  
	{
		m_startBlock = startBlock;
	}

	/** Returns a const reference to the element <i>lengthBlock</i> in CppNotice.
	@return 
	*/
	long long getLengthBlock() const 
	{
		return m_lengthBlock;
	}

	/** Sets a value of the element <i>lengthBlock</i> in CppNotice.
	@param lengthBlock 
	*/
	void setLengthBlock(long long lengthBlock)  
	{
		m_lengthBlock = lengthBlock;
	}

	/** Returns a const reference to the element <i>isNew</i> in CppNotice.
	@return 
	*/
	long long getIsNew() const 
	{
		return m_isNew;
	}

	/** Sets a value of the element <i>isNew</i> in CppNotice.
	@param isNew 
	*/
	void setIsNew(long long isNew)  
	{
		m_isNew = isNew;
	}

	/** Prints CppNotice object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "CppNotice" << endl
		         << "identifier : " << m_identifier << endl
		         << "description : " << A(m_description) << endl
		         << "category : " << A(m_category) << endl
		         << "ruleNumber : " << m_ruleNumber << endl
		         << "lineNumber : " << m_lineNumber << endl
		         << "startBlock : " << m_startBlock << endl
		         << "lengthBlock : " << m_lengthBlock << endl
		         << "isNew : " << m_isNew;
	}

	/** Defines <i> operator<< </i> for CppNotice.
	@param o Reference of C++ stream object.
	@param elem Const reference of CppNotice object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _CppNotice<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class CppNoticeIDEquality;
	class DescriptionEquality;
	class DescriptionInferior;
	class DescriptionSuperior;
	class CategoryEquality;
	class CategoryInferior;
	class CategorySuperior;
	class RuleNumberEquality;
	class RuleNumberInferior;
	class RuleNumberSuperior;
	class LineNumberEquality;
	class LineNumberInferior;
	class LineNumberSuperior;
	class StartBlockEquality;
	class StartBlockInferior;
	class StartBlockSuperior;
	class LengthBlockEquality;
	class LengthBlockInferior;
	class LengthBlockSuperior;
	class IsNewEquality;
	class IsNewInferior;
	class IsNewSuperior;
};

typedef _CppNotice<ucs> UniCppNotice;
typedef _CppNotice<ansi> CppNotice;

NAMESPACE_END

#undef C
#undef A

#include "cppNoticePredicate.hpp"

#endif
