/* 
 * debugTypeInfoAccess.hpp
 *
 *
 * @date 14-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGTYPEINFO_ACCESS_HPP_
#define _DEBUGTYPEINFO_ACCESS_HPP_

#include <boost/scoped_ptr.hpp>
#include <memory>
#include <boost/signals2.hpp>
#include <boost/any.hpp>
#include "cppBaseExport.hpp"
#include "debugTypeInfo.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

using namespace entity; 

/// Represents an access class for DebugTypeInfo object.
/// This class is used to manage DebugTypeInfo entity in database.
template <class EncodingT>
class CPPBASE_API  _DebugTypeInfoAccess {
private :
	std::list< boost::shared_ptr< _DebugTypeInfo<EncodingT> > > m_backup;
	// Is a transaction in progress before queries ?
	bool m_transactionOwner;
	static _DebugTypeInfoAccess<EncodingT>* m_instance; 

public:
	typedef boost::signals2::signal<void (operation_access_t, typename EncodingT::string_t const&, boost::any const&)>  signal_t;
	typedef boost::signals2::signal<void (operation_access_t)>  signal_transaction_t;
	typedef boost::signals2::connection  connection_t;

private:
	signal_t m_insertSignal;
	signal_t m_updateSignal;
	signal_t m_deleteSignal;
	signal_transaction_t m_transactionSignal;

private:
	/** Creates a new element DebugTypeInfoAccess.
	*/
	_DebugTypeInfoAccess();
	/** Releases the DebugTypeInfoAccess object.
	*/
	~_DebugTypeInfoAccess();
	Category*	m_logger;

protected :
public :
	/** Returns DebugTypeInfoAccess object.
	@return Instance of DebugTypeInfoAccess.
	*/
	 static _DebugTypeInfoAccess<EncodingT>* getInstance();
	/** Returns DebugTypeInfo objects from database.
	@param filter Condition allowing to filter data.
	@return List of DebugTypeInfo objects.
	*/
	 std::vector< boost::shared_ptr< _DebugTypeInfo<EncodingT> > > getManyDebugTypeInfos(typename EncodingT::string_t const&  filter) const;
	/** Returns all DebugTypeInfo objects from database.
	@return List of DebugTypeInfo objects.
	*/
	 std::vector< boost::shared_ptr< _DebugTypeInfo<EncodingT> > > getAllDebugTypeInfos() const;
	/** Returns DebugTypeInfo object from database.
	@param identifier 
	@return The DebugTypeInfo object.
	*/
	 boost::shared_ptr< _DebugTypeInfo<EncodingT> > getOneDebugTypeInfo(long long identifier) const;
	/** Returns DebugTypeInfo objects from database. Data are locked for update.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	@return List of DebugTypeInfo objects.
	*/
	 std::vector< boost::shared_ptr< _DebugTypeInfo<EncodingT> > > selectManyDebugTypeInfos(typename EncodingT::string_t const&  filter, bool nowait = false, bool addition = false);
	/** Returns DebugTypeInfo object from database. Data are locked for update.
	@param identifier 
	@param nowait Asynchonous call.
	@return The DebugTypeInfo object.
	*/
	 boost::shared_ptr< _DebugTypeInfo<EncodingT> > selectOneDebugTypeInfo(long long identifier, bool nowait = false, bool addition = false);
	/** Returns whether the data <i>DebugTypeInfo</i> are selected.
	@param o The DebugTypeInfo object.
	@return True if the data <i>DebugTypeInfo</i> are selected.
	*/
	 bool isSelectedDebugTypeInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o) const;
	/** Cancel the selection. The DebugTypeInfo object cannot be updated or deleted from database.
	*/
	 void cancelSelection();
	/** Fills primitiveType data from database.
	@param o The DebugTypeInfo object.
	*/
	 void fillPrimitiveType(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o);
	/** Fills richType data from database.
	@param o The DebugTypeInfo object.
	@param nowait Asynchronous call.
	*/
	 void fillAllRichTypes(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, bool nowait = false);
	/** Fills richType data from database.
	@param o The DebugTypeInfo object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneRichType(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, long long identifier, bool nowait = false);
	/** Fills richType data from database.
	@param o The DebugTypeInfo object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyRichTypes(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Fills debugFunctionInfo data from database.
	@param o The DebugTypeInfo object.
	@param nowait Asynchronous call.
	*/
	 void fillAllDebugFunctionInfos(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, bool nowait = false);
	/** Fills debugFunctionInfo data from database.
	@param o The DebugTypeInfo object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneDebugFunctionInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, long long identifier, bool nowait = false);
	/** Fills debugFunctionInfo data from database.
	@param o The DebugTypeInfo object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyDebugFunctionInfos(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Fills debugVariableInfo data from database.
	@param o The DebugTypeInfo object.
	@param nowait Asynchronous call.
	*/
	 void fillAllDebugVariableInfos(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, bool nowait = false);
	/** Fills debugVariableInfo data from database.
	@param o The DebugTypeInfo object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneDebugVariableInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, long long identifier, bool nowait = false);
	/** Fills debugVariableInfo data from database.
	@param o The DebugTypeInfo object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyDebugVariableInfos(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Returns whether DebugTypeInfo data are altered from database.
	@param o The DebugTypeInfo object.
	@return True if data DebugTypeInfo have been altered.
	*/
	 bool isModifiedDebugTypeInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o) const;
	/** Updates DebugTypeInfo data to database.
	@param o The DebugTypeInfo object.
	*/
	 void updateDebugTypeInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o);
	/** Inserts DebugTypeInfo data to database.
	@param o The DebugTypeInfo object.
	*/
	 void insertDebugTypeInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o);
	/** Deletes DebugTypeInfo data to database.
	@param o The DebugTypeInfo object.
	*/
	 void deleteDebugTypeInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > o);
	/** Add signal for DebugTypeInfo insertion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addInsertSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for DebugTypeInfo update.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addUpdateSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for DebugTypeInfo deletion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addDeleteSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for DebugTypeInfo transaction result.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addTransactionSignal(typename signal_transaction_t::slot_function_type subscriber);
	/** Remove signal for DebugTypeInfo insertion.
	@param connection The connection
	*/
	 void removeInsertSignal(connection_t connection);
	/** Remove signal for DebugTypeInfo update.
	@param connection The connection
	*/
	 void removeUpdateSignal(connection_t connection);
	/** Remove signal for DebugTypeInfo deletion.
	@param connection The connection
	*/
	 void removeDeleteSignal(connection_t connection);
	/** Remove signal for DebugTypeInfo transaction result.
	@param connection The connection
	*/
	 void removeTransactionSignal(connection_t connection);
};

typedef _DebugTypeInfoAccess<ucs> UniDebugTypeInfoAccess;
typedef _DebugTypeInfoAccess<ansi> DebugTypeInfoAccess;

NAMESPACE_END

#undef C
#undef A

#if !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)
#include "debugTypeInfoAccess_impl.hpp"
#endif // !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)

#endif
