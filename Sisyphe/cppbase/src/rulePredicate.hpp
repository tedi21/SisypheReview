/* 
 * rulePredicate.hpp
 *
 *
 * @date 31-07-2022
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _RULE_PREDICATE_HPP_
#define _RULE_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for Rule object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _Rule<EncodingT>::RuleIDEquality {
private :
	long long	m_identifier;
public :
	/** Creates a new functor allowing to find Rule object.
	@param identifier 
	*/
	RuleIDEquality(long long identifier)
	: m_identifier(identifier)
	{
	}

	RuleIDEquality(const _Rule<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by ID.
template<class EncodingT>
class  _Rule<EncodingT>::RuleIDInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIdentifier() < elem2->getIdentifier());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to find an object with the same element <i>number</i>.
template<class EncodingT>
class  _Rule<EncodingT>::NumberEquality {
private :
	long long	m_number;
public :
	/** Creates a new functor allowing to find Rule object.
	@param number 
	*/
	NumberEquality(long long number)
	: m_number(number)
	{
	}

	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& other) const 
	{
		return (other != NULL && m_number==other->getNumber());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by <i>number</i>.
template<class EncodingT>
class  _Rule<EncodingT>::NumberInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getNumber() < elem2->getNumber());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by <i>number</i>.
template<class EncodingT>
class  _Rule<EncodingT>::NumberSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getNumber() > elem2->getNumber());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to find an object with the same element <i>description</i>.
template<class EncodingT>
class  _Rule<EncodingT>::DescriptionEquality {
private :
	typename EncodingT::string_t	m_description;
public :
	/** Creates a new functor allowing to find Rule object.
	@param description 
	*/
	DescriptionEquality(const typename EncodingT::string_t& description)
	: m_description(description)
	{
	}

	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& other) const 
	{
		return (other != NULL && m_description==other->getDescription());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by <i>description</i>.
template<class EncodingT>
class  _Rule<EncodingT>::DescriptionInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDescription() < elem2->getDescription());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by <i>description</i>.
template<class EncodingT>
class  _Rule<EncodingT>::DescriptionSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDescription() > elem2->getDescription());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to find an object with the same element <i>enabled</i>.
template<class EncodingT>
class  _Rule<EncodingT>::EnabledEquality {
private :
	long long	m_enabled;
public :
	/** Creates a new functor allowing to find Rule object.
	@param enabled 
	*/
	EnabledEquality(long long enabled)
	: m_enabled(enabled)
	{
	}

	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& other) const 
	{
		return (other != NULL && m_enabled==other->getEnabled());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by <i>enabled</i>.
template<class EncodingT>
class  _Rule<EncodingT>::EnabledInferior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getEnabled() < elem2->getEnabled());
	}

};

/// Represents a comparaison class for Rule object.
/// This class is used to sort objects by <i>enabled</i>.
template<class EncodingT>
class  _Rule<EncodingT>::EnabledSuperior {
private :
public :
	bool operator()(const boost::shared_ptr< _Rule<EncodingT> >& elem1, const boost::shared_ptr< _Rule<EncodingT> >& elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getEnabled() > elem2->getEnabled());
	}

};

NAMESPACE_END

#endif
