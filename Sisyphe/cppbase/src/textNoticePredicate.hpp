/* 
 * textNoticePredicate.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTNOTICE_PREDICATE_HPP_
#define _TEXTNOTICE_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for TextNotice object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _TextNotice<EncodingT>::TextNoticeIDEquality {
private :
	long long	m_rowid;
public :
	/** Creates a new functor allowing to find TextNotice object.
	@param rowid 
	*/
	TextNoticeIDEquality(long long rowid)
	: m_rowid(rowid)
	{
	}

	TextNoticeIDEquality(const _TextNotice<EncodingT>& elem)
	: m_rowid(elem.getRowid())
	{
	}

	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > other) const 
	{
		return (other != NULL && m_rowid==other->getRowid());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to find an object with the same element <i>description</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::DescriptionEquality {
private :
	typename EncodingT::string_t	m_description;
public :
	/** Creates a new functor allowing to find TextNotice object.
	@param description 
	*/
	DescriptionEquality(const typename EncodingT::string_t& description)
	: m_description(description)
	{
	}

	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > other) const 
	{
		return (other != NULL && m_description==other->getDescription());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>description</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::DescriptionInferior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDescription() < elem2->getDescription());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>description</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::DescriptionSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDescription() > elem2->getDescription());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to find an object with the same element <i>category</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::CategoryEquality {
private :
	typename EncodingT::string_t	m_category;
public :
	/** Creates a new functor allowing to find TextNotice object.
	@param category 
	*/
	CategoryEquality(const typename EncodingT::string_t& category)
	: m_category(category)
	{
	}

	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > other) const 
	{
		return (other != NULL && m_category==other->getCategory());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>category</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::CategoryInferior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getCategory() < elem2->getCategory());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>category</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::CategorySuperior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getCategory() > elem2->getCategory());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to find an object with the same element <i>lineNumber</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::LineNumberEquality {
private :
	int	m_lineNumber;
public :
	/** Creates a new functor allowing to find TextNotice object.
	@param lineNumber 
	*/
	LineNumberEquality(int lineNumber)
	: m_lineNumber(lineNumber)
	{
	}

	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > other) const 
	{
		return (other != NULL && m_lineNumber==other->getLineNumber());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::LineNumberInferior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() < elem2->getLineNumber());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::LineNumberSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() > elem2->getLineNumber());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to find an object with the same element <i>startBlock</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::StartBlockEquality {
private :
	int	m_startBlock;
public :
	/** Creates a new functor allowing to find TextNotice object.
	@param startBlock 
	*/
	StartBlockEquality(int startBlock)
	: m_startBlock(startBlock)
	{
	}

	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > other) const 
	{
		return (other != NULL && m_startBlock==other->getStartBlock());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>startBlock</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::StartBlockInferior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getStartBlock() < elem2->getStartBlock());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>startBlock</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::StartBlockSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getStartBlock() > elem2->getStartBlock());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to find an object with the same element <i>lengthBlock</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::LengthBlockEquality {
private :
	int	m_lengthBlock;
public :
	/** Creates a new functor allowing to find TextNotice object.
	@param lengthBlock 
	*/
	LengthBlockEquality(int lengthBlock)
	: m_lengthBlock(lengthBlock)
	{
	}

	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > other) const 
	{
		return (other != NULL && m_lengthBlock==other->getLengthBlock());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>lengthBlock</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::LengthBlockInferior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLengthBlock() < elem2->getLengthBlock());
	}

};

/// Represents a comparaison class for TextNotice object.
/// This class is used to sort objects by <i>lengthBlock</i>.
template<class EncodingT>
class  _TextNotice<EncodingT>::LengthBlockSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _TextNotice<EncodingT> > elem1, boost::shared_ptr< _TextNotice<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLengthBlock() > elem2->getLengthBlock());
	}

};

NAMESPACE_END

#endif
