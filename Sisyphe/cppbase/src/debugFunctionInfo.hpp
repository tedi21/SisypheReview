/* 
 * debugFunctionInfo.hpp
 *
 *
 * @date 14-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGFUNCTIONINFO_HPP_
#define _DEBUGFUNCTIONINFO_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _DebugFunctionInfoAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _DebugVariableInfo;

template <class EncodingT>
class _DebugTypeInfo;

template <class EncodingT>
class _DebugFileInfo;

/// debugFunctionInfo table represents function information for debug.
template <class EncodingT>
class  _DebugFunctionInfo {
private :
	long long	m_identifier;
	typename EncodingT::string_t	m_name;
	long long	m_firstLineNumber;
	long long	m_lastLineNumber;
	long long	m_address;
	boost::shared_ptr< _DebugTypeInfo<EncodingT> >	m_debugTypeInfo;
	boost::shared_ptr< _DebugFileInfo<EncodingT> >	m_debugFileInfo;
	typedef std::vector< boost::shared_ptr< _DebugVariableInfo<EncodingT> > >	vector_debugVariableInfo;
	vector_debugVariableInfo	m_debugVariableInfos;
	Category*	m_logger;

protected :
	friend class data_access::_DebugFunctionInfoAccess<EncodingT>;

	/** Creates a new element DebugFunctionInfo.
	@param identifier 
	@param name 
	@param firstLineNumber 
	@param lastLineNumber 
	@param address 
	*/
	_DebugFunctionInfo(long long identifier,
				const typename EncodingT::string_t& name,
				long long firstLineNumber,
				long long lastLineNumber,
				long long address)
	: m_identifier(identifier),
	  m_name(name),
	  m_firstLineNumber(firstLineNumber),
	  m_lastLineNumber(lastLineNumber),
	  m_address(address)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFunctionInfo "
				<< m_identifier << ' '
				<< A(m_name) << ' '
				<< m_firstLineNumber << ' '
				<< m_lastLineNumber << ' '
				<< m_address << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in DebugFunctionInfo.
	@param identifier 
	*/
	void setIdentifier(long long identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element DebugFunctionInfo.
	*/
	_DebugFunctionInfo()
	: m_identifier(-1),
	  m_name(EncodingT::EMPTY),
	  m_firstLineNumber(0),
	  m_lastLineNumber(0),
	  m_address(0)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFunctionInfo ";
	}

	/** Creates a new element DebugFunctionInfo.
	@param name 
	@param firstLineNumber 
	@param lastLineNumber 
	@param address 
	*/
	_DebugFunctionInfo(const typename EncodingT::string_t& name,
				long long firstLineNumber,
				long long lastLineNumber,
				long long address)
	: m_identifier(-1),
	  m_name(name),
	  m_firstLineNumber(firstLineNumber),
	  m_lastLineNumber(lastLineNumber),
	  m_address(address)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _DebugFunctionInfo "
				<< m_identifier << ' '
				<< A(m_name) << ' '
				<< m_firstLineNumber << ' '
				<< m_lastLineNumber << ' '
				<< m_address << ' ';
	}

	/** Returns a const reference to the element <i>identifier</i> in DebugFunctionInfo.
	@return 
	*/
	long long getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>name</i> in DebugFunctionInfo.
	@return 
	*/
	const typename EncodingT::string_t& getName() const 
	{
		return m_name;
	}

	/** Sets a value of the element <i>name</i> in DebugFunctionInfo.
	@param name 
	*/
	void setName(const typename EncodingT::string_t& name)  
	{
		m_name = name;
	}

	/** Returns a const reference to the element <i>firstLineNumber</i> in DebugFunctionInfo.
	@return 
	*/
	long long getFirstLineNumber() const 
	{
		return m_firstLineNumber;
	}

	/** Sets a value of the element <i>firstLineNumber</i> in DebugFunctionInfo.
	@param firstLineNumber 
	*/
	void setFirstLineNumber(long long firstLineNumber)  
	{
		m_firstLineNumber = firstLineNumber;
	}

	/** Returns a const reference to the element <i>lastLineNumber</i> in DebugFunctionInfo.
	@return 
	*/
	long long getLastLineNumber() const 
	{
		return m_lastLineNumber;
	}

	/** Sets a value of the element <i>lastLineNumber</i> in DebugFunctionInfo.
	@param lastLineNumber 
	*/
	void setLastLineNumber(long long lastLineNumber)  
	{
		m_lastLineNumber = lastLineNumber;
	}

	/** Returns a const reference to the element <i>address</i> in DebugFunctionInfo.
	@return 
	*/
	long long getAddress() const 
	{
		return m_address;
	}

	/** Sets a value of the element <i>address</i> in DebugFunctionInfo.
	@param address 
	*/
	void setAddress(long long address)  
	{
		m_address = address;
	}

	/** Returns a const reference to the element <i>debugTypeInfo</i> in DebugFunctionInfo.
	@return 
	*/
	boost::shared_ptr< _DebugTypeInfo<EncodingT> > getDebugTypeInfo() const 
	{
		return m_debugTypeInfo;
	}

	/** Sets a value of the element <i>debugTypeInfo</i> in DebugFunctionInfo.
	@param debugTypeInfo 
	*/
	void setDebugTypeInfo(boost::shared_ptr< _DebugTypeInfo<EncodingT> > debugTypeInfo)  
	{
		m_debugTypeInfo = debugTypeInfo;
	}

	/** Returns whether the element <i>debugTypeInfo</i> in DebugFunctionInfo is NULL.
	@return True if the element <i>debugTypeInfo</i> is NULL, false otherwise.
	*/
	bool isNullDebugTypeInfo() const 
	{
		return !m_debugTypeInfo;
	}

	/** Removes from DebugFunctionInfo an element <i>debugTypeInfo</i>.
	*/
	void eraseDebugTypeInfo()  
	{
		m_debugTypeInfo.reset();
	}

	/** Returns a const reference to the element <i>debugFileInfo</i> in DebugFunctionInfo.
	@return 
	*/
	boost::shared_ptr< _DebugFileInfo<EncodingT> > getDebugFileInfo() const 
	{
		return m_debugFileInfo;
	}

	/** Sets a value of the element <i>debugFileInfo</i> in DebugFunctionInfo.
	@param debugFileInfo 
	*/
	void setDebugFileInfo(boost::shared_ptr< _DebugFileInfo<EncodingT> > debugFileInfo)  
	{
		m_debugFileInfo = debugFileInfo;
	}

	/** Returns whether the element <i>debugFileInfo</i> in DebugFunctionInfo is NULL.
	@return True if the element <i>debugFileInfo</i> is NULL, false otherwise.
	*/
	bool isNullDebugFileInfo() const 
	{
		return !m_debugFileInfo;
	}

	/** Removes from DebugFunctionInfo an element <i>debugFileInfo</i>.
	*/
	void eraseDebugFileInfo()  
	{
		m_debugFileInfo.reset();
	}

	/// Random access iterator types for DebugVariableInfo vector.
	typedef typename vector_debugVariableInfo::iterator	DebugVariableInfoIterator;
	typedef typename vector_debugVariableInfo::const_iterator	DebugVariableInfoConstIterator;

	/** Returns an iterator referring to the first element in the vector container DebugVariableInfo.
	@return An iterator to the beginning of the sequence.
	*/
	DebugVariableInfoIterator getDebugVariableInfosBeginning()  
	{
		return m_debugVariableInfos.begin();
	}

	/** Returns an iterator referring to the past-the-end element in the vector container DebugVariableInfo.
	@return An iterator to the element past the end of the sequence.
	*/
	DebugVariableInfoIterator getDebugVariableInfosEnd()  
	{
		return m_debugVariableInfos.end();
	}

	/** Returns a const iterator referring to the first element in the vector container DebugVariableInfo.
	@return A const iterator to the beginning of the sequence.
	*/
	DebugVariableInfoConstIterator getDebugVariableInfosBeginning() const 
	{
		return m_debugVariableInfos.begin();
	}

	/** Returns a const iterator referring to the past-the-end element in the vector container DebugVariableInfo.
	@return A const iterator to the element past the end of the sequence.
	*/
	DebugVariableInfoConstIterator getDebugVariableInfosEnd() const 
	{
		return m_debugVariableInfos.end();
	}

	/** Returns a reference to the element at position n in the vector DebugVariableInfo.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _DebugVariableInfo<EncodingT> >& getDebugVariableInfoAt(size_t n)  
	{
		return m_debugVariableInfos.at(n);
	}

	/** Returns a const reference to the element at position n in the vector DebugVariableInfo.
	@param n Position of an element in the vector.
	@return The element at the specified position in the vector.
	*/
	boost::shared_ptr< _DebugVariableInfo<EncodingT> > getDebugVariableInfoAt(size_t n) const 
	{
		return m_debugVariableInfos.at(n);
	}

	/** Returns the number of elements in the vector container DebugVariableInfo.
	@return The number of elements that conform the vector's content.
	*/
	size_t getDebugVariableInfosSize() const 
	{
		return m_debugVariableInfos.size();
	}

	/** Returns whether the vector container DebugVariableInfo is empty, i.e. whether its size is 0.
	@return True if the vector size is 0, false otherwise.
	*/
	bool isDebugVariableInfosEmpty() const 
	{
		return m_debugVariableInfos.empty();
	}

	/** Adds a new element at the end of the vector DebugVariableInfo, after its current last element. The content of this new element is initialized to a copy of x.
	@param o Value to be copied to the new element.
	*/
	void addDebugVariableInfo(boost::shared_ptr< _DebugVariableInfo<EncodingT> > o)  
	{
		m_debugVariableInfos.push_back(copy_ptr(o));
	}

	/** The vector DebugVariableInfo is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param o Value to be used to initialize the inserted elements.
	@return An iterator that points to the newly inserted element.
	*/
	DebugVariableInfoIterator insertDebugVariableInfo(DebugVariableInfoIterator pos, boost::shared_ptr< _DebugVariableInfo<EncodingT> > o)  
	{
		return m_debugVariableInfos.insert(pos, copy_ptr(o));
	}

	/** The vector DebugVariableInfo is extended by inserting new elements before the element at position pos.
	@param pos Position in the vector where the new elements are inserted.
	@param first First iterator specifying a range of elements.
	@param last Last iterator specifying a range of elements. Copies of the elements in the range [first,last) are inserted at position pos.
	*/
	void insertDebugVariableInfo(DebugVariableInfoIterator pos, DebugVariableInfoIterator first, DebugVariableInfoIterator last)  
	{
		std::transform(first, last, std::inserter(m_debugVariableInfos, pos), static_cast< boost::shared_ptr< _DebugVariableInfo<EncodingT> >(*)(boost::shared_ptr< _DebugVariableInfo<EncodingT> >) >(copy_ptr));
	}

	/** Removes from the vector container DebugVariableInfo a single element.
	@param pos Iterator pointing to a single element to be removed from the vector.
	*/
	DebugVariableInfoIterator eraseDebugVariableInfo(DebugVariableInfoIterator pos)  
	{
		return m_debugVariableInfos.erase(pos);
	}

	/** Removes from the vector container DebugVariableInfo a range of elements ([first,last)).
	@param first First iterator specifying a range within the vector to be removed: [first,last).
	@param last Last iterator specifying a range within the vector to be removed: [first,last).
	*/
	DebugVariableInfoIterator eraseDebugVariableInfo(DebugVariableInfoIterator first, DebugVariableInfoIterator last)  
	{
		return m_debugVariableInfos.erase(first, last);
	}

	/** All the elements of the vector are dropped: their destructors are called, and then they are removed from the vector container DebugVariableInfo, leaving the container with a size of 0.
	*/
	void clearDebugVariableInfos()  
	{
		m_debugVariableInfos.clear();
	}

	/** Prints DebugFunctionInfo object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "DebugFunctionInfo" << endl
		         << "identifier : " << m_identifier << endl
		         << "name : " << A(m_name) << endl
		         << "firstLineNumber : " << m_firstLineNumber << endl
		         << "lastLineNumber : " << m_lastLineNumber << endl
		         << "address : " << m_address;
	}

	/** Defines <i> operator<< </i> for DebugFunctionInfo.
	@param o Reference of C++ stream object.
	@param elem Const reference of DebugFunctionInfo object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _DebugFunctionInfo<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class DebugFunctionInfoIDEquality;
	class NameEquality;
	class NameInferior;
	class NameSuperior;
	class FirstLineNumberEquality;
	class FirstLineNumberInferior;
	class FirstLineNumberSuperior;
	class LastLineNumberEquality;
	class LastLineNumberInferior;
	class LastLineNumberSuperior;
	class AddressEquality;
	class AddressInferior;
	class AddressSuperior;
};

typedef _DebugFunctionInfo<ucs> UniDebugFunctionInfo;
typedef _DebugFunctionInfo<ansi> DebugFunctionInfo;

NAMESPACE_END

#undef C
#undef A

#include "debugFunctionInfoPredicate.hpp"

#endif
