/* 
 * debugVariableInfoPredicate.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGVARIABLEINFO_PREDICATE_HPP_
#define _DEBUGVARIABLEINFO_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::DebugVariableInfoIDEquality {
private :
	long long	m_identifier;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param identifier 
	*/
	DebugVariableInfoIDEquality(long long identifier)
	: m_identifier(identifier)
	{
	}

	DebugVariableInfoIDEquality(const _DebugVariableInfo<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same element <i>category</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::CategoryEquality {
private :
	typename EncodingT::string_t	m_category;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param category 
	*/
	CategoryEquality(const typename EncodingT::string_t& category)
	: m_category(category)
	{
	}

	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_category==other->getCategory());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>category</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::CategoryInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem1, boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getCategory() < elem2->getCategory());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>category</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::CategorySuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem1, boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getCategory() > elem2->getCategory());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same element <i>name</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::NameEquality {
private :
	typename EncodingT::string_t	m_name;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param name 
	*/
	NameEquality(const typename EncodingT::string_t& name)
	: m_name(name)
	{
	}

	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_name==other->getName());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::NameInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem1, boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() < elem2->getName());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::NameSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem1, boost::shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() > elem2->getName());
	}

};

NAMESPACE_END

#endif
