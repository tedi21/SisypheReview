/* 
 * debugVariableInfoPredicate.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGVARIABLEINFO_PREDICATE_HPP_
#define _DEBUGVARIABLEINFO_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::DebugVariableInfoIDEquality {
private :
	int	m_identifier;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param identifier 
	*/
	DebugVariableInfoIDEquality(int identifier)
	: m_identifier(identifier)
	{
	}

	DebugVariableInfoIDEquality(const _DebugVariableInfo<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same element <i>category</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::CategoryEquality {
private :
	typename EncodingT::string_t	m_category;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param category 
	*/
	CategoryEquality(const typename EncodingT::string_t& category)
	: m_category(category)
	{
	}

	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_category==other->getCategory());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>category</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::CategoryInferior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getCategory() < elem2->getCategory());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>category</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::CategorySuperior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getCategory() > elem2->getCategory());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same element <i>type</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::TypeEquality {
private :
	typename EncodingT::string_t	m_type;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param type 
	*/
	TypeEquality(const typename EncodingT::string_t& type)
	: m_type(type)
	{
	}

	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_type==other->getType());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>type</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::TypeInferior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getType() < elem2->getType());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>type</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::TypeSuperior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getType() > elem2->getType());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same element <i>name</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::NameEquality {
private :
	typename EncodingT::string_t	m_name;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param name 
	*/
	NameEquality(const typename EncodingT::string_t& name)
	: m_name(name)
	{
	}

	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_name==other->getName());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::NameInferior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() < elem2->getName());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::NameSuperior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() > elem2->getName());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to find an object with the same element <i>textValue</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::TextValueEquality {
private :
	typename EncodingT::string_t	m_textValue;
public :
	/** Creates a new functor allowing to find DebugVariableInfo object.
	@param textValue 
	*/
	TextValueEquality(const typename EncodingT::string_t& textValue)
	: m_textValue(textValue)
	{
	}

	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_textValue==other->getTextValue());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>textValue</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::TextValueInferior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getTextValue() < elem2->getTextValue());
	}

};

/// Represents a comparaison class for DebugVariableInfo object.
/// This class is used to sort objects by <i>textValue</i>.
template<class EncodingT>
class  _DebugVariableInfo<EncodingT>::TextValueSuperior {
private :
public :
	bool operator()(shared_ptr< _DebugVariableInfo<EncodingT> > elem1, shared_ptr< _DebugVariableInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getTextValue() > elem2->getTextValue());
	}

};

NAMESPACE_END

#endif
