/* 
 * cppEnumAccess.hpp
 *
 *
 * @date 31-07-2022
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPENUM_ACCESS_HPP_
#define _CPPENUM_ACCESS_HPP_

#include <boost/scoped_ptr.hpp>
#include <memory>
#include <boost/signals2.hpp>
#include <boost/any.hpp>
#include "cppBaseExport.hpp"
#include "cppEnum.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

using namespace entity; 

/// Represents an access class for CppEnum object.
/// This class is used to manage CppEnum entity in database.
template <class EncodingT>
class CPPBASE_API  _CppEnumAccess {
private :
	using backup_t = std::set< boost::shared_ptr< _CppEnum<EncodingT> >, typename _CppEnum<EncodingT>::CppEnumIDInferior >;
	backup_t m_backup;
	// Is a transaction in progress before queries ?
	bool m_transactionOwner;
	static _CppEnumAccess<EncodingT>* m_instance; 

public:
	typedef boost::signals2::signal<void (operation_access_t, typename EncodingT::string_t const&, boost::any const&)>  signal_t;
	typedef boost::signals2::signal<void (operation_access_t)>  signal_transaction_t;
	typedef boost::signals2::connection  connection_t;

private:
	signal_t m_insertSignal;
	signal_t m_updateSignal;
	signal_t m_deleteSignal;
	signal_transaction_t m_transactionSignal;

private:
	/** Creates a new element CppEnumAccess.
	*/
	_CppEnumAccess();
	/** Releases the CppEnumAccess object.
	*/
	~_CppEnumAccess();
	Category*	m_logger;

protected :
public :
	/** Returns CppEnumAccess object.
	@return Instance of CppEnumAccess.
	*/
	 static _CppEnumAccess<EncodingT>* getInstance();
	/** Returns CppEnum objects from database.
	@param filter Condition allowing to filter data.
	@return List of CppEnum objects.
	*/
	 std::vector< boost::shared_ptr< _CppEnum<EncodingT> > > getManyCppEnums(typename EncodingT::string_t const&  filter) const;
	/** Returns all CppEnum objects from database.
	@return List of CppEnum objects.
	*/
	 std::vector< boost::shared_ptr< _CppEnum<EncodingT> > > getAllCppEnums() const;
	/** Returns CppEnum object from database.
	@param identifier 
	@return The CppEnum object.
	*/
	 boost::shared_ptr< _CppEnum<EncodingT> > getOneCppEnum(long long identifier) const;
	/** Returns CppEnum objects from database. Data are locked for update.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	@return List of CppEnum objects.
	*/
	 std::vector< boost::shared_ptr< _CppEnum<EncodingT> > > selectManyCppEnums(typename EncodingT::string_t const&  filter, bool nowait = false, bool addition = false);
	/** Returns CppEnum object from database. Data are locked for update.
	@param identifier 
	@param nowait Asynchonous call.
	@return The CppEnum object.
	*/
	 boost::shared_ptr< _CppEnum<EncodingT> > selectOneCppEnum(long long identifier, bool nowait = false, bool addition = false);
	/** Returns whether the data <i>CppEnum</i> are selected.
	@param o The CppEnum object.
	@return True if the data <i>CppEnum</i> are selected.
	*/
	 bool isSelectedCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > o) const;
	/** Cancel the selection. The CppEnum object cannot be updated or deleted from database.
	*/
	 void cancelSelection();
	/** Fills cppFile data from database.
	@param o The CppEnum object.
	*/
	 void fillCppFile(boost::shared_ptr< _CppEnum<EncodingT> > o);
	/** Fills cppClass data from database.
	@param o The CppEnum object.
	*/
	 void fillCppClass(boost::shared_ptr< _CppEnum<EncodingT> > o);
	/** Fills cppEnumConstant data from database.
	@param o The CppEnum object.
	@param nowait Asynchronous call.
	*/
	 void fillAllCppEnumConstants(boost::shared_ptr< _CppEnum<EncodingT> > o, bool nowait = false);
	/** Fills cppEnumConstant data from database.
	@param o The CppEnum object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneCppEnumConstant(boost::shared_ptr< _CppEnum<EncodingT> > o, long long identifier, bool nowait = false);
	/** Fills cppEnumConstant data from database.
	@param o The CppEnum object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyCppEnumConstants(boost::shared_ptr< _CppEnum<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Returns whether CppEnum data are altered from database.
	@param o The CppEnum object.
	@return True if data CppEnum have been altered.
	*/
	 bool isModifiedCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > o) const;
	/** Updates CppEnum data to database.
	@param o The CppEnum object.
	*/
	 void updateCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > o);
	/** Inserts CppEnum data to database.
	@param o The CppEnum object.
	*/
	 void insertCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > o);
	/** Deletes CppEnum data to database.
	@param o The CppEnum object.
	*/
	 void deleteCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > o);
	/** Add signal for CppEnum insertion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addInsertSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for CppEnum update.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addUpdateSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for CppEnum deletion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addDeleteSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for CppEnum transaction result.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addTransactionSignal(typename signal_transaction_t::slot_function_type subscriber);
	/** Remove signal for CppEnum insertion.
	@param connection The connection
	*/
	 void removeInsertSignal(connection_t connection);
	/** Remove signal for CppEnum update.
	@param connection The connection
	*/
	 void removeUpdateSignal(connection_t connection);
	/** Remove signal for CppEnum deletion.
	@param connection The connection
	*/
	 void removeDeleteSignal(connection_t connection);
	/** Remove signal for CppEnum transaction result.
	@param connection The connection
	*/
	 void removeTransactionSignal(connection_t connection);
};

typedef _CppEnumAccess<ucs> UniCppEnumAccess;
typedef _CppEnumAccess<ansi> CppEnumAccess;

NAMESPACE_END

#undef C
#undef A

#if !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)
#include "cppEnumAccess_impl.hpp"
#endif // !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)

#endif
