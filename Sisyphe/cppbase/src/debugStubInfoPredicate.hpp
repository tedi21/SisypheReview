/* 
 * debugStubInfoPredicate.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGSTUBINFO_PREDICATE_HPP_
#define _DEBUGSTUBINFO_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::DebugStubInfoIDEquality {
private :
	long long	m_identifier;
public :
	/** Creates a new functor allowing to find DebugStubInfo object.
	@param identifier 
	*/
	DebugStubInfoIDEquality(long long identifier)
	: m_identifier(identifier)
	{
	}

	DebugStubInfoIDEquality(const _DebugStubInfo<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to find an object with the same element <i>lineNumber</i>.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::LineNumberEquality {
private :
	long long	m_lineNumber;
public :
	/** Creates a new functor allowing to find DebugStubInfo object.
	@param lineNumber 
	*/
	LineNumberEquality(long long lineNumber)
	: m_lineNumber(lineNumber)
	{
	}

	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_lineNumber==other->getLineNumber());
	}

};

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::LineNumberInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > elem1, boost::shared_ptr< _DebugStubInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() < elem2->getLineNumber());
	}

};

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::LineNumberSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > elem1, boost::shared_ptr< _DebugStubInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() > elem2->getLineNumber());
	}

};

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to find an object with the same element <i>isLineSkipped</i>.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::IsLineSkippedEquality {
private :
	long long	m_isLineSkipped;
public :
	/** Creates a new functor allowing to find DebugStubInfo object.
	@param isLineSkipped 
	*/
	IsLineSkippedEquality(long long isLineSkipped)
	: m_isLineSkipped(isLineSkipped)
	{
	}

	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_isLineSkipped==other->getIsLineSkipped());
	}

};

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to sort objects by <i>isLineSkipped</i>.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::IsLineSkippedInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > elem1, boost::shared_ptr< _DebugStubInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsLineSkipped() < elem2->getIsLineSkipped());
	}

};

/// Represents a comparaison class for DebugStubInfo object.
/// This class is used to sort objects by <i>isLineSkipped</i>.
template<class EncodingT>
class  _DebugStubInfo<EncodingT>::IsLineSkippedSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugStubInfo<EncodingT> > elem1, boost::shared_ptr< _DebugStubInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getIsLineSkipped() > elem2->getIsLineSkipped());
	}

};

NAMESPACE_END

#endif
