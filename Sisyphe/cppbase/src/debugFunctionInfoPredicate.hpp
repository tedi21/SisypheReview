/* 
 * debugFunctionInfoPredicate.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _DEBUGFUNCTIONINFO_PREDICATE_HPP_
#define _DEBUGFUNCTIONINFO_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugFunctionInfoIDEquality {
private :
	int	m_identifier;
public :
	/** Creates a new functor allowing to find DebugFunctionInfo object.
	@param identifier 
	*/
	DebugFunctionInfoIDEquality(int identifier)
	: m_identifier(identifier)
	{
	}

	DebugFunctionInfoIDEquality(const _DebugFunctionInfo<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to find an object with the same element <i>lineNumber</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::LineNumberEquality {
private :
	int	m_lineNumber;
public :
	/** Creates a new functor allowing to find DebugFunctionInfo object.
	@param lineNumber 
	*/
	LineNumberEquality(int lineNumber)
	: m_lineNumber(lineNumber)
	{
	}

	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_lineNumber==other->getLineNumber());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::LineNumberInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() < elem2->getLineNumber());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>lineNumber</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::LineNumberSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLineNumber() > elem2->getLineNumber());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to find an object with the same element <i>address</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::AddressEquality {
private :
	int	m_address;
public :
	/** Creates a new functor allowing to find DebugFunctionInfo object.
	@param address 
	*/
	AddressEquality(int address)
	: m_address(address)
	{
	}

	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_address==other->getAddress());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>address</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::AddressInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getAddress() < elem2->getAddress());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>address</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::AddressSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getAddress() > elem2->getAddress());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to find an object with the same element <i>debugStart</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugStartEquality {
private :
	int	m_debugStart;
public :
	/** Creates a new functor allowing to find DebugFunctionInfo object.
	@param debugStart 
	*/
	DebugStartEquality(int debugStart)
	: m_debugStart(debugStart)
	{
	}

	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_debugStart==other->getDebugStart());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>debugStart</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugStartInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDebugStart() < elem2->getDebugStart());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>debugStart</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugStartSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDebugStart() > elem2->getDebugStart());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to find an object with the same element <i>debugEnd</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugEndEquality {
private :
	int	m_debugEnd;
public :
	/** Creates a new functor allowing to find DebugFunctionInfo object.
	@param debugEnd 
	*/
	DebugEndEquality(int debugEnd)
	: m_debugEnd(debugEnd)
	{
	}

	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_debugEnd==other->getDebugEnd());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>debugEnd</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugEndInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDebugEnd() < elem2->getDebugEnd());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>debugEnd</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugEndSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDebugEnd() > elem2->getDebugEnd());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to find an object with the same element <i>debugReturnType</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugReturnTypeEquality {
private :
	typename EncodingT::string_t	m_debugReturnType;
public :
	/** Creates a new functor allowing to find DebugFunctionInfo object.
	@param debugReturnType 
	*/
	DebugReturnTypeEquality(const typename EncodingT::string_t& debugReturnType)
	: m_debugReturnType(debugReturnType)
	{
	}

	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > other) const 
	{
		return (other != NULL && m_debugReturnType==other->getDebugReturnType());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>debugReturnType</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugReturnTypeInferior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDebugReturnType() < elem2->getDebugReturnType());
	}

};

/// Represents a comparaison class for DebugFunctionInfo object.
/// This class is used to sort objects by <i>debugReturnType</i>.
template<class EncodingT>
class  _DebugFunctionInfo<EncodingT>::DebugReturnTypeSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem1, boost::shared_ptr< _DebugFunctionInfo<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDebugReturnType() > elem2->getDebugReturnType());
	}

};

NAMESPACE_END

#endif
