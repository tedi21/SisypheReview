/* 
 * cppFileTypePredicate.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPFILETYPE_PREDICATE_HPP_
#define _CPPFILETYPE_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for CppFileType object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _CppFileType<EncodingT>::CppFileTypeIDEquality {
private :
	long long	m_identifier;
public :
	/** Creates a new functor allowing to find CppFileType object.
	@param identifier 
	*/
	CppFileTypeIDEquality(long long identifier)
	: m_identifier(identifier)
	{
	}

	CppFileTypeIDEquality(const _CppFileType<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(boost::shared_ptr< _CppFileType<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for CppFileType object.
/// This class is used to find an object with the same element <i>string</i>.
template<class EncodingT>
class  _CppFileType<EncodingT>::StringEquality {
private :
	typename EncodingT::string_t	m_string;
public :
	/** Creates a new functor allowing to find CppFileType object.
	@param string 
	*/
	StringEquality(const typename EncodingT::string_t& string)
	: m_string(string)
	{
	}

	bool operator()(boost::shared_ptr< _CppFileType<EncodingT> > other) const 
	{
		return (other != NULL && m_string==other->getString());
	}

};

/// Represents a comparaison class for CppFileType object.
/// This class is used to sort objects by <i>string</i>.
template<class EncodingT>
class  _CppFileType<EncodingT>::StringInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppFileType<EncodingT> > elem1, boost::shared_ptr< _CppFileType<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getString() < elem2->getString());
	}

};

/// Represents a comparaison class for CppFileType object.
/// This class is used to sort objects by <i>string</i>.
template<class EncodingT>
class  _CppFileType<EncodingT>::StringSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppFileType<EncodingT> > elem1, boost::shared_ptr< _CppFileType<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getString() > elem2->getString());
	}

};

NAMESPACE_END

#endif
