/* 
 * textFileAccess.hpp
 *
 *
 * @date 25-06-2020
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _TEXTFILE_ACCESS_HPP_
#define _TEXTFILE_ACCESS_HPP_

#include <boost/scoped_ptr.hpp>
#include <memory>
#include <boost/signals2.hpp>
#include <boost/any.hpp>
#include "cppBaseExport.hpp"
#include "textFile.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

using namespace entity; 

/// Represents an access class for TextFile object.
/// This class is used to manage TextFile entity in database.
template <class EncodingT>
class CPPBASE_API  _TextFileAccess {
private :
	std::list< boost::shared_ptr< _TextFile<EncodingT> > > m_backup;
	// Is a transaction in progress before queries ?
	bool m_transactionOwner;
	static _TextFileAccess<EncodingT>* m_instance; 

public:
	typedef boost::signals2::signal<void (operation_access_t, typename EncodingT::string_t const&, boost::any const&)>  signal_t;
	typedef boost::signals2::signal<void (operation_access_t)>  signal_transaction_t;
	typedef boost::signals2::connection  connection_t;

private:
	signal_t m_insertSignal;
	signal_t m_updateSignal;
	signal_t m_deleteSignal;
	signal_transaction_t m_transactionSignal;

private:
	/** Creates a new element TextFileAccess.
	*/
	_TextFileAccess();
	/** Releases the TextFileAccess object.
	*/
	~_TextFileAccess();
	Category*	m_logger;

protected :
public :
	/** Returns TextFileAccess object.
	@return Instance of TextFileAccess.
	*/
	 static _TextFileAccess<EncodingT>* getInstance();
	/** Returns TextFile objects from database.
	@param filter Condition allowing to filter data.
	@return List of TextFile objects.
	*/
	 std::vector< boost::shared_ptr< _TextFile<EncodingT> > > getManyTextFiles(typename EncodingT::string_t const&  filter) const;
	/** Returns all TextFile objects from database.
	@return List of TextFile objects.
	*/
	 std::vector< boost::shared_ptr< _TextFile<EncodingT> > > getAllTextFiles() const;
	/** Returns TextFile object from database.
	@param rowid 
	@return The TextFile object.
	*/
	 boost::shared_ptr< _TextFile<EncodingT> > getOneTextFile(long long rowid) const;
	/** Returns TextFile objects from database. Data are locked for update.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	@return List of TextFile objects.
	*/
	 std::vector< boost::shared_ptr< _TextFile<EncodingT> > > selectManyTextFiles(typename EncodingT::string_t const&  filter, bool nowait = false, bool addition = false);
	/** Returns TextFile object from database. Data are locked for update.
	@param rowid 
	@param nowait Asynchonous call.
	@return The TextFile object.
	*/
	 boost::shared_ptr< _TextFile<EncodingT> > selectOneTextFile(long long rowid, bool nowait = false, bool addition = false);
	/** Returns whether the data <i>TextFile</i> are selected.
	@param o The TextFile object.
	@return True if the data <i>TextFile</i> are selected.
	*/
	 bool isSelectedTextFile(boost::shared_ptr< _TextFile<EncodingT> > o) const;
	/** Cancel the selection. The TextFile object cannot be updated or deleted from database.
	*/
	 void cancelSelection();
	/** Fills cppFile data from database.
	@param o The TextFile object.
	@param nowait Asynchronous call.
	*/
	 void fillAllCppFiles(boost::shared_ptr< _TextFile<EncodingT> > o, bool nowait = false);
	/** Fills cppFile data from database.
	@param o The TextFile object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneCppFile(boost::shared_ptr< _TextFile<EncodingT> > o, long long identifier, bool nowait = false);
	/** Fills cppFile data from database.
	@param o The TextFile object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyCppFiles(boost::shared_ptr< _TextFile<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Fills debugFileInfo data from database.
	@param o The TextFile object.
	@param nowait Asynchronous call.
	*/
	 void fillAllDebugFileInfos(boost::shared_ptr< _TextFile<EncodingT> > o, bool nowait = false);
	/** Fills debugFileInfo data from database.
	@param o The TextFile object.
	@param identifier 
	@param nowait Asynchronous call.
	*/
	 void fillOneDebugFileInfo(boost::shared_ptr< _TextFile<EncodingT> > o, long long identifier, bool nowait = false);
	/** Fills debugFileInfo data from database.
	@param o The TextFile object.
	@param filter Condition allowing to filter data.
	@param nowait Asynchonous call.
	*/
	 void fillManyDebugFileInfos(boost::shared_ptr< _TextFile<EncodingT> > o, typename EncodingT::string_t const&  filter, bool nowait = false);
	/** Returns whether TextFile data are altered from database.
	@param o The TextFile object.
	@return True if data TextFile have been altered.
	*/
	 bool isModifiedTextFile(boost::shared_ptr< _TextFile<EncodingT> > o) const;
	/** Updates TextFile data to database.
	@param o The TextFile object.
	*/
	 void updateTextFile(boost::shared_ptr< _TextFile<EncodingT> > o);
	/** Inserts TextFile data to database.
	@param o The TextFile object.
	*/
	 void insertTextFile(boost::shared_ptr< _TextFile<EncodingT> > o);
	/** Deletes TextFile data to database.
	@param o The TextFile object.
	*/
	 void deleteTextFile(boost::shared_ptr< _TextFile<EncodingT> > o);
	/** Add signal for TextFile insertion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addInsertSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for TextFile update.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addUpdateSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for TextFile deletion.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addDeleteSignal(typename signal_t::slot_function_type subscriber);
	/** Add signal for TextFile transaction result.
	@param subscriber The observer
	@return The connection
	*/
	 connection_t addTransactionSignal(typename signal_transaction_t::slot_function_type subscriber);
	/** Remove signal for TextFile insertion.
	@param connection The connection
	*/
	 void removeInsertSignal(connection_t connection);
	/** Remove signal for TextFile update.
	@param connection The connection
	*/
	 void removeUpdateSignal(connection_t connection);
	/** Remove signal for TextFile deletion.
	@param connection The connection
	*/
	 void removeDeleteSignal(connection_t connection);
	/** Remove signal for TextFile transaction result.
	@param connection The connection
	*/
	 void removeTransactionSignal(connection_t connection);
};

typedef _TextFileAccess<ucs> UniTextFileAccess;
typedef _TextFileAccess<ansi> TextFileAccess;

NAMESPACE_END

#undef C
#undef A

#if !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)
#include "textFileAccess_impl.hpp"
#endif // !defined(HAS_CPPBASE_DLL) || defined(BUILD_CPPBASE_DLL)

#endif
