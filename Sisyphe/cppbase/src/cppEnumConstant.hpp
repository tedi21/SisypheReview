/* 
 * cppEnumConstant.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPENUMCONSTANT_HPP_
#define _CPPENUMCONSTANT_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _CppEnumConstantAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _CppEnum;

/// cppEnumConstant table represents a parameter.
template <class EncodingT>
class  _CppEnumConstant {
private :
	int	m_identifier;
	typename EncodingT::string_t	m_name;
	int	m_defaultValue;
	boost::shared_ptr< _CppEnum<EncodingT> >	m_cppEnum;
	int	m_startBlock;
	int	m_lengthBlock;
	Category*	m_logger;

protected :
	friend class data_access::_CppEnumConstantAccess<EncodingT>;

	/** Creates a new element CppEnumConstant.
	@param identifier 
	@param name 
	@param defaultValue 
	@param startBlock 
	@param lengthBlock 
	*/
	_CppEnumConstant(int identifier,
				const typename EncodingT::string_t& name,
				int defaultValue,
				int startBlock,
				int lengthBlock)
	: m_identifier(identifier),
	  m_name(name),
	  m_defaultValue(defaultValue),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppEnumConstant "
				<< m_identifier << ' '
				<< A(m_name) << ' '
				<< m_defaultValue << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in CppEnumConstant.
	@param identifier 
	*/
	void setIdentifier(int identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element CppEnumConstant.
	*/
	_CppEnumConstant()
	: m_identifier(-1),
	  m_name(EncodingT::EMPTY),
	  m_defaultValue(0),
	  m_startBlock(0),
	  m_lengthBlock(0)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppEnumConstant ";
	}

	/** Creates a new element CppEnumConstant.
	@param name 
	@param defaultValue 
	@param startBlock 
	@param lengthBlock 
	*/
	_CppEnumConstant(const typename EncodingT::string_t& name,
				int defaultValue,
				int startBlock,
				int lengthBlock)
	: m_identifier(-1),
	  m_name(name),
	  m_defaultValue(defaultValue),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppEnumConstant "
				<< m_identifier << ' '
				<< A(m_name) << ' '
				<< m_defaultValue << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' ';
	}

	/** Creates a copy of elem as the content for the CppEnumConstant object.
	@param elem A CppEnumConstant object containing elements of the same type.
	*/
	_CppEnumConstant(const _CppEnumConstant<EncodingT>& elem)
	: m_identifier(elem.m_identifier),
	  m_name(elem.m_name),
	  m_defaultValue(elem.m_defaultValue),
	  m_cppEnum(elem.m_cppEnum),
	  m_startBlock(elem.m_startBlock),
	  m_lengthBlock(elem.m_lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppEnumConstant " << ": copy";
	}

	/** Assigns a copy of elem as the new content for the CppEnumConstant object.
	@param elem A CppEnumConstant object containing elements of the same type.
	@return *this
	*/
	_CppEnumConstant<EncodingT>& operator=(const _CppEnumConstant<EncodingT>& elem)  
	{
		m_identifier = elem.m_identifier;
		m_name = elem.m_name;
		m_defaultValue = elem.m_defaultValue;
		m_cppEnum = elem.m_cppEnum;
		m_startBlock = elem.m_startBlock;
		m_lengthBlock = elem.m_lengthBlock;
		return *this;
	}

	/** Returns a const reference to the element <i>identifier</i> in CppEnumConstant.
	@return 
	*/
	int getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>name</i> in CppEnumConstant.
	@return 
	*/
	const typename EncodingT::string_t& getName() const 
	{
		return m_name;
	}

	/** Sets a value of the element <i>name</i> in CppEnumConstant.
	@param name 
	*/
	void setName(const typename EncodingT::string_t& name)  
	{
		m_name = name;
	}

	/** Returns a const reference to the element <i>defaultValue</i> in CppEnumConstant.
	@return 
	*/
	int getDefaultValue() const 
	{
		return m_defaultValue;
	}

	/** Sets a value of the element <i>defaultValue</i> in CppEnumConstant.
	@param defaultValue 
	*/
	void setDefaultValue(int defaultValue)  
	{
		m_defaultValue = defaultValue;
	}

	/** Returns a const reference to the element <i>cppEnum</i> in CppEnumConstant.
	@return 
	*/
	boost::shared_ptr< _CppEnum<EncodingT> > getCppEnum() const 
	{
		return m_cppEnum;
	}

	/** Sets a value of the element <i>cppEnum</i> in CppEnumConstant.
	@param cppEnum 
	*/
	void setCppEnum(boost::shared_ptr< _CppEnum<EncodingT> > cppEnum)  
	{
		m_cppEnum = cppEnum;
	}

	/** Returns whether the element <i>cppEnum</i> in CppEnumConstant is NULL.
	@return True if the element <i>cppEnum</i> is NULL, false otherwise.
	*/
	bool isNullCppEnum() const 
	{
		return !m_cppEnum;
	}

	/** Removes from CppEnumConstant an element <i>cppEnum</i>.
	*/
	void eraseCppEnum()  
	{
		m_cppEnum.reset();
	}

	/** Returns a const reference to the element <i>startBlock</i> in CppEnumConstant.
	@return 
	*/
	int getStartBlock() const 
	{
		return m_startBlock;
	}

	/** Sets a value of the element <i>startBlock</i> in CppEnumConstant.
	@param startBlock 
	*/
	void setStartBlock(int startBlock)  
	{
		m_startBlock = startBlock;
	}

	/** Returns a const reference to the element <i>lengthBlock</i> in CppEnumConstant.
	@return 
	*/
	int getLengthBlock() const 
	{
		return m_lengthBlock;
	}

	/** Sets a value of the element <i>lengthBlock</i> in CppEnumConstant.
	@param lengthBlock 
	*/
	void setLengthBlock(int lengthBlock)  
	{
		m_lengthBlock = lengthBlock;
	}

	/** Prints CppEnumConstant object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "CppEnumConstant" << endl
		         << "identifier : " << m_identifier << endl
		         << "name : " << A(m_name) << endl
		         << "defaultValue : " << m_defaultValue << endl
		         << "startBlock : " << m_startBlock << endl
		         << "lengthBlock : " << m_lengthBlock;
	}

	/** Defines <i> operator<< </i> for CppEnumConstant.
	@param o Reference of C++ stream object.
	@param elem Const reference of CppEnumConstant object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _CppEnumConstant<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class CppEnumConstantIDEquality;
	class NameEquality;
	class NameInferior;
	class NameSuperior;
	class DefaultValueEquality;
	class DefaultValueInferior;
	class DefaultValueSuperior;
	class StartBlockEquality;
	class StartBlockInferior;
	class StartBlockSuperior;
	class LengthBlockEquality;
	class LengthBlockInferior;
	class LengthBlockSuperior;
};

typedef _CppEnumConstant<ucs> UniCppEnumConstant;
typedef _CppEnumConstant<ansi> CppEnumConstant;

NAMESPACE_END

#undef C
#undef A

#include "cppEnumConstantPredicate.hpp"

#endif
