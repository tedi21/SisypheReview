/* 
 * cppAttribute.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPATTRIBUTE_HPP_
#define _CPPATTRIBUTE_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _CppAttributeAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _CppClass;

/// cppAttribute table represents an attribute.
template <class EncodingT>
class  _CppAttribute {
private :
	int	m_identifier;
	typename EncodingT::string_t	m_attrType;
	typename EncodingT::string_t	m_name;
	typename EncodingT::string_t	m_accessSpecifier;
	int	m_isStatic;
	int	m_isConst;
	typename EncodingT::string_t	m_constValue;
	shared_ptr< _CppClass<EncodingT> >	m_cppClass;
	int	m_lineNumber;
	int	m_startBlock;
	int	m_lengthBlock;
	Category*	m_logger;

protected :
	friend class data_access::_CppAttributeAccess<EncodingT>;

	/** Creates a new element CppAttribute.
	@param identifier 
	@param attrType 
	@param name 
	@param accessSpecifier 
	@param isStatic 
	@param isConst 
	@param constValue 
	@param lineNumber 
	@param startBlock 
	@param lengthBlock 
	*/
	_CppAttribute(int identifier,
				const typename EncodingT::string_t& attrType,
				const typename EncodingT::string_t& name,
				const typename EncodingT::string_t& accessSpecifier,
				int isStatic,
				int isConst,
				const typename EncodingT::string_t& constValue,
				int lineNumber,
				int startBlock,
				int lengthBlock)
	: m_identifier(identifier),
	  m_attrType(attrType),
	  m_name(name),
	  m_accessSpecifier(accessSpecifier),
	  m_isStatic(isStatic),
	  m_isConst(isConst),
	  m_constValue(constValue),
	  m_lineNumber(lineNumber),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppAttribute "
				<< m_identifier << ' '
				<< A(m_attrType) << ' '
				<< A(m_name) << ' '
				<< A(m_accessSpecifier) << ' '
				<< m_isStatic << ' '
				<< m_isConst << ' '
				<< A(m_constValue) << ' '
				<< m_lineNumber << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in CppAttribute.
	@param identifier 
	*/
	void setIdentifier(int identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element CppAttribute.
	*/
	_CppAttribute()
	: m_identifier(-1),
	  m_attrType(EncodingT::EMPTY),
	  m_name(EncodingT::EMPTY),
	  m_accessSpecifier(EncodingT::EMPTY),
	  m_isStatic(0),
	  m_isConst(0),
	  m_constValue(EncodingT::EMPTY),
	  m_lineNumber(0),
	  m_startBlock(0),
	  m_lengthBlock(0)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppAttribute ";
	}

	/** Creates a new element CppAttribute.
	@param attrType 
	@param name 
	@param accessSpecifier 
	@param isStatic 
	@param isConst 
	@param constValue 
	@param lineNumber 
	@param startBlock 
	@param lengthBlock 
	*/
	_CppAttribute(const typename EncodingT::string_t& attrType,
				const typename EncodingT::string_t& name,
				const typename EncodingT::string_t& accessSpecifier,
				int isStatic,
				int isConst,
				const typename EncodingT::string_t& constValue,
				int lineNumber,
				int startBlock,
				int lengthBlock)
	: m_identifier(-1),
	  m_attrType(attrType),
	  m_name(name),
	  m_accessSpecifier(accessSpecifier),
	  m_isStatic(isStatic),
	  m_isConst(isConst),
	  m_constValue(constValue),
	  m_lineNumber(lineNumber),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppAttribute "
				<< m_identifier << ' '
				<< A(m_attrType) << ' '
				<< A(m_name) << ' '
				<< A(m_accessSpecifier) << ' '
				<< m_isStatic << ' '
				<< m_isConst << ' '
				<< A(m_constValue) << ' '
				<< m_lineNumber << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' ';
	}

	/** Creates a copy of elem as the content for the CppAttribute object.
	@param elem A CppAttribute object containing elements of the same type.
	*/
	_CppAttribute(const _CppAttribute<EncodingT>& elem)
	: m_identifier(elem.m_identifier),
	  m_attrType(elem.m_attrType),
	  m_name(elem.m_name),
	  m_accessSpecifier(elem.m_accessSpecifier),
	  m_isStatic(elem.m_isStatic),
	  m_isConst(elem.m_isConst),
	  m_constValue(elem.m_constValue),
	  m_cppClass(elem.m_cppClass),
	  m_lineNumber(elem.m_lineNumber),
	  m_startBlock(elem.m_startBlock),
	  m_lengthBlock(elem.m_lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CppAttribute " << ": copy";
	}

	/** Assigns a copy of elem as the new content for the CppAttribute object.
	@param elem A CppAttribute object containing elements of the same type.
	@return *this
	*/
	_CppAttribute<EncodingT>& operator=(const _CppAttribute<EncodingT>& elem)  
	{
		m_identifier = elem.m_identifier;
		m_attrType = elem.m_attrType;
		m_name = elem.m_name;
		m_accessSpecifier = elem.m_accessSpecifier;
		m_isStatic = elem.m_isStatic;
		m_isConst = elem.m_isConst;
		m_constValue = elem.m_constValue;
		m_cppClass = elem.m_cppClass;
		m_lineNumber = elem.m_lineNumber;
		m_startBlock = elem.m_startBlock;
		m_lengthBlock = elem.m_lengthBlock;
		return *this;
	}

	/** Returns a const reference to the element <i>identifier</i> in CppAttribute.
	@return 
	*/
	int getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>attrType</i> in CppAttribute.
	@return 
	*/
	const typename EncodingT::string_t& getAttrType() const 
	{
		return m_attrType;
	}

	/** Sets a value of the element <i>attrType</i> in CppAttribute.
	@param attrType 
	*/
	void setAttrType(const typename EncodingT::string_t& attrType)  
	{
		m_attrType = attrType;
	}

	/** Returns a const reference to the element <i>name</i> in CppAttribute.
	@return 
	*/
	const typename EncodingT::string_t& getName() const 
	{
		return m_name;
	}

	/** Sets a value of the element <i>name</i> in CppAttribute.
	@param name 
	*/
	void setName(const typename EncodingT::string_t& name)  
	{
		m_name = name;
	}

	/** Returns a const reference to the element <i>accessSpecifier</i> in CppAttribute.
	@return 
	*/
	const typename EncodingT::string_t& getAccessSpecifier() const 
	{
		return m_accessSpecifier;
	}

	/** Sets a value of the element <i>accessSpecifier</i> in CppAttribute.
	@param accessSpecifier 
	*/
	void setAccessSpecifier(const typename EncodingT::string_t& accessSpecifier)  
	{
		m_accessSpecifier = accessSpecifier;
	}

	/** Returns a const reference to the element <i>isStatic</i> in CppAttribute.
	@return 
	*/
	int getIsStatic() const 
	{
		return m_isStatic;
	}

	/** Sets a value of the element <i>isStatic</i> in CppAttribute.
	@param isStatic 
	*/
	void setIsStatic(int isStatic)  
	{
		m_isStatic = isStatic;
	}

	/** Returns a const reference to the element <i>isConst</i> in CppAttribute.
	@return 
	*/
	int getIsConst() const 
	{
		return m_isConst;
	}

	/** Sets a value of the element <i>isConst</i> in CppAttribute.
	@param isConst 
	*/
	void setIsConst(int isConst)  
	{
		m_isConst = isConst;
	}

	/** Returns a const reference to the element <i>constValue</i> in CppAttribute.
	@return 
	*/
	const typename EncodingT::string_t& getConstValue() const 
	{
		return m_constValue;
	}

	/** Sets a value of the element <i>constValue</i> in CppAttribute.
	@param constValue 
	*/
	void setConstValue(const typename EncodingT::string_t& constValue)  
	{
		m_constValue = constValue;
	}

	/** Returns a const reference to the element <i>cppClass</i> in CppAttribute.
	@return 
	*/
	shared_ptr< _CppClass<EncodingT> > getCppClass() const 
	{
		return m_cppClass;
	}

	/** Sets a value of the element <i>cppClass</i> in CppAttribute.
	@param cppClass 
	*/
	void setCppClass(shared_ptr< _CppClass<EncodingT> > cppClass)  
	{
		m_cppClass = cppClass;
	}

	/** Returns whether the element <i>cppClass</i> in CppAttribute is NULL.
	@return True if the element <i>cppClass</i> is NULL, false otherwise.
	*/
	bool isNullCppClass() const 
	{
		return !m_cppClass;
	}

	/** Removes from CppAttribute an element <i>cppClass</i>.
	*/
	void eraseCppClass()  
	{
		m_cppClass.reset();
	}

	/** Returns a const reference to the element <i>lineNumber</i> in CppAttribute.
	@return 
	*/
	int getLineNumber() const 
	{
		return m_lineNumber;
	}

	/** Sets a value of the element <i>lineNumber</i> in CppAttribute.
	@param lineNumber 
	*/
	void setLineNumber(int lineNumber)  
	{
		m_lineNumber = lineNumber;
	}

	/** Returns a const reference to the element <i>startBlock</i> in CppAttribute.
	@return 
	*/
	int getStartBlock() const 
	{
		return m_startBlock;
	}

	/** Sets a value of the element <i>startBlock</i> in CppAttribute.
	@param startBlock 
	*/
	void setStartBlock(int startBlock)  
	{
		m_startBlock = startBlock;
	}

	/** Returns a const reference to the element <i>lengthBlock</i> in CppAttribute.
	@return 
	*/
	int getLengthBlock() const 
	{
		return m_lengthBlock;
	}

	/** Sets a value of the element <i>lengthBlock</i> in CppAttribute.
	@param lengthBlock 
	*/
	void setLengthBlock(int lengthBlock)  
	{
		m_lengthBlock = lengthBlock;
	}

	/** Prints CppAttribute object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "CppAttribute" << endl
		         << "identifier : " << m_identifier << endl
		         << "attrType : " << A(m_attrType) << endl
		         << "name : " << A(m_name) << endl
		         << "accessSpecifier : " << A(m_accessSpecifier) << endl
		         << "isStatic : " << m_isStatic << endl
		         << "isConst : " << m_isConst << endl
		         << "constValue : " << A(m_constValue) << endl
		         << "lineNumber : " << m_lineNumber << endl
		         << "startBlock : " << m_startBlock << endl
		         << "lengthBlock : " << m_lengthBlock;
	}

	/** Defines <i> operator<< </i> for CppAttribute.
	@param o Reference of C++ stream object.
	@param elem Const reference of CppAttribute object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _CppAttribute<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class CppAttributeIDEquality;
	class AttrTypeEquality;
	class AttrTypeInferior;
	class AttrTypeSuperior;
	class NameEquality;
	class NameInferior;
	class NameSuperior;
	class AccessSpecifierEquality;
	class AccessSpecifierInferior;
	class AccessSpecifierSuperior;
	class IsStaticEquality;
	class IsStaticInferior;
	class IsStaticSuperior;
	class IsConstEquality;
	class IsConstInferior;
	class IsConstSuperior;
	class ConstValueEquality;
	class ConstValueInferior;
	class ConstValueSuperior;
	class LineNumberEquality;
	class LineNumberInferior;
	class LineNumberSuperior;
	class StartBlockEquality;
	class StartBlockInferior;
	class StartBlockSuperior;
	class LengthBlockEquality;
	class LengthBlockInferior;
	class LengthBlockSuperior;
};

typedef _CppAttribute<ucs> UniCppAttribute;
typedef _CppAttribute<ansi> CppAttribute;

NAMESPACE_END

#undef C
#undef A

#include "cppAttributePredicate.hpp"

#endif
