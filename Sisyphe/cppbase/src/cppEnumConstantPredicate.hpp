/* 
 * cppEnumConstantPredicate.hpp
 *
 *
 * @date 28-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CPPENUMCONSTANT_PREDICATE_HPP_
#define _CPPENUMCONSTANT_PREDICATE_HPP_

NAMESPACE_BEGIN(entity)

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to find an object with the same ID.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::CppEnumConstantIDEquality {
private :
	int	m_identifier;
public :
	/** Creates a new functor allowing to find CppEnumConstant object.
	@param identifier 
	*/
	CppEnumConstantIDEquality(int identifier)
	: m_identifier(identifier)
	{
	}

	CppEnumConstantIDEquality(const _CppEnumConstant<EncodingT>& elem)
	: m_identifier(elem.getIdentifier())
	{
	}

	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > other) const 
	{
		return (other != NULL && m_identifier==other->getIdentifier());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to find an object with the same element <i>name</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::NameEquality {
private :
	typename EncodingT::string_t	m_name;
public :
	/** Creates a new functor allowing to find CppEnumConstant object.
	@param name 
	*/
	NameEquality(const typename EncodingT::string_t& name)
	: m_name(name)
	{
	}

	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > other) const 
	{
		return (other != NULL && m_name==other->getName());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::NameInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() < elem2->getName());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>name</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::NameSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getName() > elem2->getName());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to find an object with the same element <i>defaultValue</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::DefaultValueEquality {
private :
	int	m_defaultValue;
public :
	/** Creates a new functor allowing to find CppEnumConstant object.
	@param defaultValue 
	*/
	DefaultValueEquality(int defaultValue)
	: m_defaultValue(defaultValue)
	{
	}

	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > other) const 
	{
		return (other != NULL && m_defaultValue==other->getDefaultValue());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>defaultValue</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::DefaultValueInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDefaultValue() < elem2->getDefaultValue());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>defaultValue</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::DefaultValueSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getDefaultValue() > elem2->getDefaultValue());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to find an object with the same element <i>startBlock</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::StartBlockEquality {
private :
	int	m_startBlock;
public :
	/** Creates a new functor allowing to find CppEnumConstant object.
	@param startBlock 
	*/
	StartBlockEquality(int startBlock)
	: m_startBlock(startBlock)
	{
	}

	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > other) const 
	{
		return (other != NULL && m_startBlock==other->getStartBlock());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>startBlock</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::StartBlockInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getStartBlock() < elem2->getStartBlock());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>startBlock</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::StartBlockSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getStartBlock() > elem2->getStartBlock());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to find an object with the same element <i>lengthBlock</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::LengthBlockEquality {
private :
	int	m_lengthBlock;
public :
	/** Creates a new functor allowing to find CppEnumConstant object.
	@param lengthBlock 
	*/
	LengthBlockEquality(int lengthBlock)
	: m_lengthBlock(lengthBlock)
	{
	}

	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > other) const 
	{
		return (other != NULL && m_lengthBlock==other->getLengthBlock());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>lengthBlock</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::LengthBlockInferior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLengthBlock() < elem2->getLengthBlock());
	}

};

/// Represents a comparaison class for CppEnumConstant object.
/// This class is used to sort objects by <i>lengthBlock</i>.
template<class EncodingT>
class  _CppEnumConstant<EncodingT>::LengthBlockSuperior {
private :
public :
	bool operator()(boost::shared_ptr< _CppEnumConstant<EncodingT> > elem1, boost::shared_ptr< _CppEnumConstant<EncodingT> > elem2) const 
	{
		return (elem1 != NULL && elem2 != NULL && elem1->getLengthBlock() > elem2->getLengthBlock());
	}

};

NAMESPACE_END

#endif
