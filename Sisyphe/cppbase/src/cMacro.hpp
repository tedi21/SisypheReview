/* 
 * cMacro.hpp
 *
 *
 * @date 26-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * cppBase generated by gensources.
 */

#ifndef _CMACRO_HPP_
#define _CMACRO_HPP_

#include <boost/shared_ptr.hpp>
#include <boost/container/vector.hpp>
#include "copy_ptr.h"
#include "config.hpp"
#include "convert.hpp"
#include "encoding.hpp"

#include "cppBaseExport.hpp"
#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(data_access)

template <class EncodingT>
class _CMacroAccess;

NAMESPACE_END

NAMESPACE_BEGIN(entity)

using namespace log4cpp;
using namespace fctr;
using namespace enc;
using namespace boost;

template <class EncodingT>
class _CppFile;

/// cMacro table represents a macro.
template <class EncodingT>
class  _CMacro {
private :
	long long	m_identifier;
	typename EncodingT::string_t	m_name;
	long long	m_isConst;
	typename EncodingT::string_t	m_constValue;
	boost::shared_ptr< _CppFile<EncodingT> >	m_cppFile;
	long long	m_lineNumber;
	long long	m_startBlock;
	long long	m_lengthBlock;
	Category*	m_logger;

protected :
	friend class data_access::_CMacroAccess<EncodingT>;

	/** Creates a new element CMacro.
	@param identifier 
	@param name 
	@param isConst 
	@param constValue 
	@param lineNumber 
	@param startBlock 
	@param lengthBlock 
	*/
	_CMacro(long long identifier,
				const typename EncodingT::string_t& name,
				long long isConst,
				const typename EncodingT::string_t& constValue,
				long long lineNumber,
				long long startBlock,
				long long lengthBlock)
	: m_identifier(identifier),
	  m_name(name),
	  m_isConst(isConst),
	  m_constValue(constValue),
	  m_lineNumber(lineNumber),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CMacro "
				<< m_identifier << ' '
				<< A(m_name) << ' '
				<< m_isConst << ' '
				<< A(m_constValue) << ' '
				<< m_lineNumber << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' ';
	}

	/** Sets a value of the element <i>identifier</i> in CMacro.
	@param identifier 
	*/
	void setIdentifier(long long identifier)  
	{
		m_identifier = identifier;
	}

public :
	/** Creates a new element CMacro.
	*/
	_CMacro()
	: m_identifier(-1),
	  m_name(EncodingT::EMPTY),
	  m_isConst(0),
	  m_constValue(EncodingT::EMPTY),
	  m_lineNumber(0),
	  m_startBlock(0),
	  m_lengthBlock(0)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CMacro ";
	}

	/** Creates a new element CMacro.
	@param name 
	@param isConst 
	@param constValue 
	@param lineNumber 
	@param startBlock 
	@param lengthBlock 
	*/
	_CMacro(const typename EncodingT::string_t& name,
				long long isConst,
				const typename EncodingT::string_t& constValue,
				long long lineNumber,
				long long startBlock,
				long long lengthBlock)
	: m_identifier(-1),
	  m_name(name),
	  m_isConst(isConst),
	  m_constValue(constValue),
	  m_lineNumber(lineNumber),
	  m_startBlock(startBlock),
	  m_lengthBlock(lengthBlock)
	{
		m_logger = &Category::getInstance(LOGNAME);
		m_logger->debugStream() << "constructor _CMacro "
				<< m_identifier << ' '
				<< A(m_name) << ' '
				<< m_isConst << ' '
				<< A(m_constValue) << ' '
				<< m_lineNumber << ' '
				<< m_startBlock << ' '
				<< m_lengthBlock << ' ';
	}

	/** Returns a const reference to the element <i>identifier</i> in CMacro.
	@return 
	*/
	long long getIdentifier() const 
	{
		return m_identifier;
	}

	/** Returns a const reference to the element <i>name</i> in CMacro.
	@return 
	*/
	const typename EncodingT::string_t& getName() const 
	{
		return m_name;
	}

	/** Sets a value of the element <i>name</i> in CMacro.
	@param name 
	*/
	void setName(const typename EncodingT::string_t& name)  
	{
		m_name = name;
	}

	/** Returns a const reference to the element <i>isConst</i> in CMacro.
	@return 
	*/
	long long getIsConst() const 
	{
		return m_isConst;
	}

	/** Sets a value of the element <i>isConst</i> in CMacro.
	@param isConst 
	*/
	void setIsConst(long long isConst)  
	{
		m_isConst = isConst;
	}

	/** Returns a const reference to the element <i>constValue</i> in CMacro.
	@return 
	*/
	const typename EncodingT::string_t& getConstValue() const 
	{
		return m_constValue;
	}

	/** Sets a value of the element <i>constValue</i> in CMacro.
	@param constValue 
	*/
	void setConstValue(const typename EncodingT::string_t& constValue)  
	{
		m_constValue = constValue;
	}

	/** Returns a const reference to the element <i>cppFile</i> in CMacro.
	@return 
	*/
	boost::shared_ptr< _CppFile<EncodingT> > getCppFile() const 
	{
		return m_cppFile;
	}

	/** Sets a value of the element <i>cppFile</i> in CMacro.
	@param cppFile 
	*/
	void setCppFile(boost::shared_ptr< _CppFile<EncodingT> > cppFile)  
	{
		m_cppFile = cppFile;
	}

	/** Returns whether the element <i>cppFile</i> in CMacro is NULL.
	@return True if the element <i>cppFile</i> is NULL, false otherwise.
	*/
	bool isNullCppFile() const 
	{
		return !m_cppFile;
	}

	/** Removes from CMacro an element <i>cppFile</i>.
	*/
	void eraseCppFile()  
	{
		m_cppFile.reset();
	}

	/** Returns a const reference to the element <i>lineNumber</i> in CMacro.
	@return 
	*/
	long long getLineNumber() const 
	{
		return m_lineNumber;
	}

	/** Sets a value of the element <i>lineNumber</i> in CMacro.
	@param lineNumber 
	*/
	void setLineNumber(long long lineNumber)  
	{
		m_lineNumber = lineNumber;
	}

	/** Returns a const reference to the element <i>startBlock</i> in CMacro.
	@return 
	*/
	long long getStartBlock() const 
	{
		return m_startBlock;
	}

	/** Sets a value of the element <i>startBlock</i> in CMacro.
	@param startBlock 
	*/
	void setStartBlock(long long startBlock)  
	{
		m_startBlock = startBlock;
	}

	/** Returns a const reference to the element <i>lengthBlock</i> in CMacro.
	@return 
	*/
	long long getLengthBlock() const 
	{
		return m_lengthBlock;
	}

	/** Sets a value of the element <i>lengthBlock</i> in CMacro.
	@param lengthBlock 
	*/
	void setLengthBlock(long long lengthBlock)  
	{
		m_lengthBlock = lengthBlock;
	}

	/** Prints CMacro object on a C++ stream.
	@param o Reference of C++ stream object.
	@return The reference of C++ stream object.
	*/
	ostream& printConsole(ostream& o) const 
	{
		return o << "CMacro" << endl
		         << "identifier : " << m_identifier << endl
		         << "name : " << A(m_name) << endl
		         << "isConst : " << m_isConst << endl
		         << "constValue : " << A(m_constValue) << endl
		         << "lineNumber : " << m_lineNumber << endl
		         << "startBlock : " << m_startBlock << endl
		         << "lengthBlock : " << m_lengthBlock;
	}

	/** Defines <i> operator<< </i> for CMacro.
	@param o Reference of C++ stream object.
	@param elem Const reference of CMacro object.
	@return The reference of C++ stream object.
	*/
	friend ostream& operator<<(ostream& o, const _CMacro<EncodingT>& elem)  
	{
		return elem.printConsole(o<<"[ ")<<" ]";
	}

	class CMacroIDEquality;
	class NameEquality;
	class NameInferior;
	class NameSuperior;
	class IsConstEquality;
	class IsConstInferior;
	class IsConstSuperior;
	class ConstValueEquality;
	class ConstValueInferior;
	class ConstValueSuperior;
	class LineNumberEquality;
	class LineNumberInferior;
	class LineNumberSuperior;
	class StartBlockEquality;
	class StartBlockInferior;
	class StartBlockSuperior;
	class LengthBlockEquality;
	class LengthBlockInferior;
	class LengthBlockSuperior;
};

typedef _CMacro<ucs> UniCMacro;
typedef _CMacro<ansi> CMacro;

NAMESPACE_END

#undef C
#undef A

#include "cMacroPredicate.hpp"

#endif
