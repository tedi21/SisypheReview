<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE document_schema SYSTEM "document_schema.dtd">
<document_schema>

  <Workspace Author="Teddy DIDE" Brief="Word Interpreter generated by gensources." Name="word_interpreter" Option="0" Type="Project" Version="1.00">
    <File Name="WordXMLDocument">
      <Entity Alias="DocumentNode" Class="Function" FunctionName="getDocumentNode" Name="WordXMLDocument:getDocumentNode@WordXMLNode">
        <Comments> Retourne le noeud racine du document.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLDocument" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getDocumentNode" Type="UInt64"/>
      </Entity>
      <Entity Class="Data" Name="WordXMLDocument">
        <Comments> Classe représentant un document XML.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="createNode" Name="WordXMLDocument:createNode@String@WordXMLNode">
        <Comments> Crée un nouveau noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLDocument" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="createNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="tagName" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="createTextNode" Name="WordXMLDocument:createTextNode@String@WordXMLNode">
        <Comments> Crée un noeud texte.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLDocument" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="createTextNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="txt" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="parse" Name="WordXMLDocument:parse@String@void">
        <Comments> Ouvre un fichier Word XML.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLDocument" Type="UInt64"/>
        <Attribute Modifier="Const " Name="doc" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="save" Name="WordXMLDocument:save@void">
        <Comments> Enregistre le document.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLDocument" Type="UInt64"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:createNode@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLDocument:createNode@String@WordXMLNode" TargetREF="createNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:createNode@String@WordXMLNode_WordXMLDocument" Source="WordXMLDocument" SourceREF="Id" Target="WordXMLDocument:createNode@String@WordXMLNode" TargetREF="WordXMLDocument"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:createTextNode@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLDocument:createTextNode@String@WordXMLNode" TargetREF="createTextNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:createTextNode@String@WordXMLNode_WordXMLDocument" Source="WordXMLDocument" SourceREF="Id" Target="WordXMLDocument:createTextNode@String@WordXMLNode" TargetREF="WordXMLDocument"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:getDocumentNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLDocument:getDocumentNode@WordXMLNode" TargetREF="getDocumentNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:getDocumentNode@WordXMLNode_WordXMLDocument" Source="WordXMLDocument" SourceREF="Id" Target="WordXMLDocument:getDocumentNode@WordXMLNode" TargetREF="WordXMLDocument"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:parse@String@void_WordXMLDocument" Source="WordXMLDocument" SourceREF="Id" Target="WordXMLDocument:parse@String@void" TargetREF="WordXMLDocument"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLDocument:save@void_WordXMLDocument" Source="WordXMLDocument" SourceREF="Id" Target="WordXMLDocument:save@void" TargetREF="WordXMLDocument"/>
      <Content Type="Declaration-body">
        WordXMLDocument* m_object;  
        bool m_allocated;
    </Content>
      <Content Type="Initialization-body">
    m_object = new WordXMLDocument();
    m_allocated = true;
    </Content>
      <Content Type="Destruction-body">
    if (m_allocated)
    {
        delete m_object;
        m_allocated = false;
    }
    </Content>
      <Content Type="Copy-body">
    m_object = const_cast&lt;WordXMLDocument*&gt;(&amp;object);
    m_allocated = false;
    </Content>
      <Content Type="Value-body">
    return *m_object;
    </Content>
      <Content Target="WordXMLDocument:getDocumentNode@WordXMLNode" TargetREF="getDocumentNode" Type="ReturnDescription">
    Le noeud racine du document XML.
    </Content>
      <Content Target="WordXMLDocument:getDocumentNode@WordXMLNode" Type="Example">
xml = new WordXML();
xml.Initialize();
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//o:Author");
inode = 0;
while inode &lt; nodes.Length do
    node = nodes.Item(inode);
    print(node.Content);
    inode.Increment();
endwhile
nodes = null;
xmlDocument = null;
xml.Terminate();
xml = null;
    </Content>
      <Content Target="WordXMLDocument:createNode@String@WordXMLNode" TargetREF="tagName" Type="ParameterDescription">
    Le nom du noeud.
    </Content>
      <Content Target="WordXMLDocument:createNode@String@WordXMLNode" TargetREF="createNode" Type="ReturnDescription">
    Le noeud créé.
    </Content>
      <Content Target="WordXMLDocument:createNode@String@WordXMLNode" Type="Example">
xml = new WordXML();
xml.Initialize();
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
contentNode = rootNode.Nodes(rootNode.BodyTag).Item(0);
/* Note : Pour insérer ou ajouter du texte, 
   utiliser les fonctions InsertString ou AppendString 
   de WordXMLNode qui gèrent plus efficacement 
   l'insertion des noeuds Paragraph, Run et Text. */
/* Insertion d'un nouveau paragraphe */
paragraphNode = xmlDocument.CreateNode(rootNode.ParagraphTag);
contentNode.Append(paragraphNode);
/* Insertion d'un nouveau run */
runNode = xmlDocument.CreateNode(rootNode.RunTag);
paragraphNode.Append(runNode);
/* Insertion d'un texte */
node = xmlDocument.CreateTextNode("Hello world !!!");
runNode.Append(node);
xmlDocument.Save();
xmlDocument = null;
xml.Terminate();
xml = null;
    </Content>
      <Content Target="WordXMLDocument:createTextNode@String@WordXMLNode" TargetREF="txt" Type="ParameterDescription">
    Le nom du noeud *Text*.
    </Content>
      <Content Target="WordXMLDocument:createTextNode@String@WordXMLNode" TargetREF="createTextNode" Type="ReturnDescription">
    Le noeud *Text* créé.
    </Content>
      <Content Target="WordXMLDocument:createTextNode@String@WordXMLNode" Type="Example">
	Voir l'exemple CreateNode.
    </Content>
      <Content Target="WordXMLDocument:parse@String@void" TargetREF="doc" Type="ParameterDescription">
    Le nom du document Word.
    </Content>
      <Content Target="WordXMLDocument:parse@String@void" Type="Example">
    Voir l'exemple DocumentNode.
    </Content>
      <Content Target="WordXMLDocument:save@void" Type="Example">
	Voir l'exemple CreateNode.
    </Content>
    </File>
    <File Name="WordXMLNode">
      <Entity Alias="TagName" Class="Function" FunctionName="getTagName" Name="WordXMLNode:getTagName@String">
        <Comments> Retourne le nom du noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="getTagName" Type="String"/>
      </Entity>
      <Entity Alias="Nodes" Class="Function" FunctionName="getNodes" Name="WordXMLNode:getNodes@WordXMLNodeList">
        <Comments> Retourne les noeuds fils.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getNodes" Type="UInt64"/>
      </Entity>
      <Entity Alias="Nodes" Class="Function" FunctionName="getNodes" Name="WordXMLNode:getNodes@String@WordXMLNodeList">
        <Comments> Retourne les noeuds fils avec le nom *tagName*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getNodes" Type="UInt64"/>
        <Attribute Modifier="Const " Name="tagName" Type="String"/>
      </Entity>
      <Entity Alias="NextNode" Class="Function" FunctionName="getNextNode" Name="WordXMLNode:getNextNode@WordXMLNode">
        <Comments> Retourne le noeud suivant.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getNextNode" Type="UInt64"/>
      </Entity>
      <Entity Alias="NextNode" Class="Function" FunctionName="getNextNode" Name="WordXMLNode:getNextNode@String@WordXMLNode">
        <Comments> Retourne le noeud suivant avec le nom *tagName*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getNextNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="tagName" Type="String"/>
      </Entity>
      <Entity Alias="PreviousNode" Class="Function" FunctionName="getPreviousNode" Name="WordXMLNode:getPreviousNode@WordXMLNode">
        <Comments> Retourne le noeud précèdent.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getPreviousNode" Type="UInt64"/>
      </Entity>
      <Entity Alias="PreviousNode" Class="Function" FunctionName="getPreviousNode" Name="WordXMLNode:getPreviousNode@String@WordXMLNode">
        <Comments> Retourne le noeud précèdent avec le nom *tagName*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getPreviousNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="tagName" Type="String"/>
      </Entity>
      <Entity Alias="Parent" Class="Function" FunctionName="getParent" Name="WordXMLNode:getParent@WordXMLNode">
        <Comments> Retourne le noeud parent.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getParent" Type="UInt64"/>
      </Entity>
      <Entity Alias="Parent" Class="Function" FunctionName="getParent" Name="WordXMLNode:getParent@String@WordXMLNode">
        <Comments> Retourne le noeud parent avec le nom *tagName*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getParent" Type="UInt64"/>
        <Attribute Modifier="Const " Name="tagName" Type="String"/>
      </Entity>
      <Entity Alias="Content" Class="Function" FunctionName="getContent" Name="WordXMLNode:getContent@String">
        <Comments> Retourne le contenu d'un noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="getContent" Type="String"/>
      </Entity>
      <Entity Alias="Attributes" Class="Function" FunctionName="getAttribute" Name="WordXMLNode:getAttribute@String@String">
        <Comments> Retourne la valeur de l'attribut *attrName*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="getAttribute" Type="String"/>
        <Attribute Modifier="Const " Name="attrName" Type="String"/>
      </Entity>
      <Entity Alias="AttributesNames" Class="Function" FunctionName="getAttributesNames" Name="WordXMLNode:getAttributesNames@StringList">
        <Comments> Retourne les noms des attributs du noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getAttributesNames" Type="UInt64"/>
      </Entity>
      <Entity Alias="Document" Class="Function" FunctionName="getDocument" Name="WordXMLNode:getDocument@WordXMLDocumentPtr">
        <Comments> Retourne le document.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="getDocument" Type="UInt64"/>
      </Entity>
      <Entity Alias="Validity" Class="Function" FunctionName="isValid" Name="WordXMLNode:isValid@Boolean">
        <Comments> Indique si le noeud est valide.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="isValid" Type="Boolean"/>
      </Entity>
      <Entity Alias="Content" Class="Function" FunctionName="setContent" Name="WordXMLNode:setContent@String@void">
        <Comments> Définit le contenu.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="content" Type="String"/>
      </Entity>
      <Entity Alias="Attributes" Class="Function" FunctionName="setAttribute" Name="WordXMLNode:setAttribute@String@String@void">
        <Comments> Définit un attribut.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="attrName" Type="String"/>
        <Attribute Modifier="Const " Name="attrValue" Type="String"/>
      </Entity>
      <Entity Alias="removeAttributes" Class="Function" FunctionName="eraseAttribute" Name="WordXMLNode:eraseAttribute@String@void">
        <Comments> Supprime un attribut.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="attrName" Type="String"/>
      </Entity>
      <Entity Alias="PropertiesNode" Class="Function" FunctionName="createPropertiesNode" Name="WordXMLNode:createPropertiesNode@WordXMLNode">
        <Comments> Retourne le noeud Propriétés correspondant au noeud conteneur en cours ou crée le noeud si celui-ci n'existe pas.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="createPropertiesNode" Type="UInt64"/>
      </Entity>
      <Entity Alias="PropertiesNode" Class="Function" FunctionName="setPropertiesNode" Name="WordXMLNode:setPropertiesNode@WordXMLNode@void">
        <Comments> Définit le noeud *Propriétés*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Const " Name="node" Type="UInt64"/>
      </Entity>
      <Entity Alias="removePropertiesNode" Class="Function" FunctionName="erasePropertiesNode" Name="WordXMLNode:erasePropertiesNode@void">
        <Comments> Supprime le noeud *Propriétés*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
      </Entity>
      <Entity Class="Data" Name="WordXMLNode">
        <Comments> Classe représentant un noeud XML du document Word.</Comments>
        <Attribute Alias="DocumentTag" Modifier="Const Static " Name="DOCUMENT_TAG" Type="String">
          <Comments> Le nom du noeud *DOCUMENT*. </Comments>
        </Attribute>
        <Attribute Alias="BodyTag" Modifier="Const Static " Name="BODY_TAG" Type="String">
          <Comments> Le nom du noeud *BODY*. </Comments>
        </Attribute>
        <Attribute Alias="SectionTag" Modifier="Const Static " Name="SECTION_TAG" Type="String">
          <Comments> Le nom du noeud *SECTION*. </Comments>
        </Attribute>
        <Attribute Alias="SubSectionTag" Modifier="Const Static " Name="SUBSECTION_TAG" Type="String">
          <Comments> Le nom du noeud *SUBSECTION*. </Comments>
        </Attribute>
        <Attribute Alias="TableTag" Modifier="Const Static " Name="TABLE_TAG" Type="String">
          <Comments> Le nom du noeud *TABLE*. </Comments>
        </Attribute>
        <Attribute Alias="RowTag" Modifier="Const Static " Name="ROW_TAG" Type="String">
          <Comments> Le nom du noeud *ROW*. </Comments>
        </Attribute>
        <Attribute Alias="CellTag" Modifier="Const Static " Name="CELL_TAG" Type="String">
          <Comments> Le nom du noeud *CELL*. </Comments>
        </Attribute>
        <Attribute Alias="ParagraphTag" Modifier="Const Static " Name="PARAGRAPH_TAG" Type="String">
          <Comments> Le nom du noeud *PARAGRAPH*. </Comments>
        </Attribute>
        <Attribute Alias="RevisionTag" Modifier="Const Static " Name="REVISION_TAG" Type="String">
          <Comments> Le nom du noeud *REVISION*. </Comments>
        </Attribute>
        <Attribute Alias="RunTag" Modifier="Const Static " Name="RUN_TAG" Type="String">
          <Comments> Le nom du noeud *RUN*. </Comments>
        </Attribute>
        <Attribute Alias="NoLength" Modifier="Const Static " Name="NO_LENGTH" Type="UInt32">
          <Comments> Valeur par défaut indiquant que le paramètre de la taille est à ignorer (cf. méthode *eraseString*). </Comments>
        </Attribute>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Alias="WordXMLDocument" Class="Data" Name="WordXMLDocumentPtr"/>
      <Entity Class="Data" Name="StringList"/>
      <Entity Class="Function" FunctionName="evaluate" Name="WordXMLNode:evaluate@String@WordXMLNodeList">
        <Comments> Execute une requête XPath.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="evaluate" Type="UInt64"/>
        <Attribute Modifier="Const " Name="xpath" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="hasAttribute" Name="WordXMLNode:hasAttribute@String@Boolean">
        <Comments> Indique si le noeud à un attribut *attrName*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="hasAttribute" Type="Boolean"/>
        <Attribute Modifier="Const " Name="attrName" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="getString" Name="WordXMLNode:getString@String">
        <Comments> Retourne le texte brut du noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="getString" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="append" Name="WordXMLNode:append@WordXMLNode@void">
        <Comments> Ajoute un nouveau noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Const " Name="newChild" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="erase" Name="WordXMLNode:erase@void">
        <Comments> Supprime le noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="replace" Name="WordXMLNode:replace@WordXMLNode@WordXMLNode@void">
        <Comments> Remplace un noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Const " Name="newChild" Type="UInt64"/>
        <Attribute Modifier="Ref Const " Name="oldChild" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="insertBefore" Name="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void">
        <Comments> Insère un nouveau noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Const " Name="newChild" Type="UInt64"/>
        <Attribute Modifier="Ref Const " Name="refChild" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="cloneNode" Name="WordXMLNode:cloneNode@Boolean@WordXMLNode">
        <Comments> Clone le noeud.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="cloneNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="deep" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="appendString" Name="WordXMLNode:appendString@Boolean@String@WordXMLNodeList">
        <Comments> Ajoute du texte.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="appendString" Type="UInt64"/>
        <Attribute Modifier="Const " Name="trackedChanges" Type="Boolean"/>
        <Attribute Modifier="Const " Name="str" Type="String"/>
      </Entity>
      <Entity Class="Function" FunctionName="eraseString" Name="WordXMLNode:eraseString@Boolean@UInt32@UInt32@void">
        <Comments> Supprime du texte.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Const " Name="trackedChanges" Type="Boolean"/>
        <Attribute Modifier="Const " Name="pos" Type="UInt32"/>
        <Attribute Modifier="Const " Name="length" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="insertString" Name="WordXMLNode:insertString@Boolean@UInt32@String@WordXMLNodeList">
        <Comments> Insère du texte.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="WordXMLNode" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="insertString" Type="UInt64"/>
        <Attribute Modifier="Const " Name="trackedChanges" Type="Boolean"/>
        <Attribute Modifier="Const " Name="pos" Type="UInt32"/>
        <Attribute Modifier="Const " Name="str" Type="String"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getTagName@String_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getTagName@String" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:evaluate@String@WordXMLNodeList_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNode:evaluate@String@WordXMLNodeList" TargetREF="evaluate"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:evaluate@String@WordXMLNodeList_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:evaluate@String@WordXMLNodeList" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNodes@WordXMLNodeList_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNode:getNodes@WordXMLNodeList" TargetREF="getNodes"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNodes@WordXMLNodeList_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getNodes@WordXMLNodeList" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNodes@String@WordXMLNodeList_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNode:getNodes@String@WordXMLNodeList" TargetREF="getNodes"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNodes@String@WordXMLNodeList_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getNodes@String@WordXMLNodeList" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNextNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getNextNode@WordXMLNode" TargetREF="getNextNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNextNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getNextNode@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNextNode@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getNextNode@String@WordXMLNode" TargetREF="getNextNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getNextNode@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getNextNode@String@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getPreviousNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getPreviousNode@WordXMLNode" TargetREF="getPreviousNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getPreviousNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getPreviousNode@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getPreviousNode@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getPreviousNode@String@WordXMLNode" TargetREF="getPreviousNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getPreviousNode@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getPreviousNode@String@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getParent@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getParent@WordXMLNode" TargetREF="getParent"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getParent@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getParent@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getParent@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getParent@String@WordXMLNode" TargetREF="getParent"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getParent@String@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getParent@String@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getContent@String_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getContent@String" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:hasAttribute@String@Boolean_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:hasAttribute@String@Boolean" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getAttribute@String@String_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getAttribute@String@String" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getAttributesNames@StringList_StringList" Source="StringList" SourceREF="Id" Target="WordXMLNode:getAttributesNames@StringList" TargetREF="getAttributesNames"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getAttributesNames@StringList_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getAttributesNames@StringList" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getString@String_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getString@String" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getDocument@WordXMLDocumentPtr_WordXMLDocumentPtr" Source="WordXMLDocumentPtr" SourceREF="Id" Target="WordXMLNode:getDocument@WordXMLDocumentPtr" TargetREF="getDocument"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:getDocument@WordXMLDocumentPtr_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:getDocument@WordXMLDocumentPtr" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:isValid@Boolean_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:isValid@Boolean" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:setContent@String@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:setContent@String@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:setAttribute@String@String@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:setAttribute@String@String@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:eraseAttribute@String@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:eraseAttribute@String@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:createPropertiesNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:createPropertiesNode@WordXMLNode" TargetREF="createPropertiesNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:createPropertiesNode@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:createPropertiesNode@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:setPropertiesNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:setPropertiesNode@WordXMLNode@void" TargetREF="node"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:setPropertiesNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:setPropertiesNode@WordXMLNode@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:erasePropertiesNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:erasePropertiesNode@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:append@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:append@WordXMLNode@void" TargetREF="newChild"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:append@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:append@WordXMLNode@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:erase@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:erase@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:replace@WordXMLNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:replace@WordXMLNode@WordXMLNode@void" TargetREF="newChild"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:replace@WordXMLNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:replace@WordXMLNode@WordXMLNode@void" TargetREF="oldChild"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:replace@WordXMLNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:replace@WordXMLNode@WordXMLNode@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void" TargetREF="newChild"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void" TargetREF="refChild"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:cloneNode@Boolean@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:cloneNode@Boolean@WordXMLNode" TargetREF="cloneNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:cloneNode@Boolean@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:cloneNode@Boolean@WordXMLNode" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:appendString@Boolean@String@WordXMLNodeList_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNode:appendString@Boolean@String@WordXMLNodeList" TargetREF="appendString"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:appendString@Boolean@String@WordXMLNodeList_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:appendString@Boolean@String@WordXMLNodeList" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:eraseString@Boolean@UInt32@UInt32@void_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:eraseString@Boolean@UInt32@UInt32@void" TargetREF="WordXMLNode"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:insertString@Boolean@UInt32@String@WordXMLNodeList_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNode:insertString@Boolean@UInt32@String@WordXMLNodeList" TargetREF="insertString"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNode:insertString@Boolean@UInt32@String@WordXMLNodeList_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNode:insertString@Boolean@UInt32@String@WordXMLNodeList" TargetREF="WordXMLNode"/>
      <Content Target="WordXMLNode:getDocument@WordXMLDocumentPtr" Type="Implementation-body">
    shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new WordXMLDocumentInterpreter&lt;EncodingT&gt;());
    res.reset(new WordXMLDocumentInterpreter&lt;EncodingT&gt;(*m_object.getDocument()));
    return res;
    </Content>
      <Content Target="WordXMLNode" TargetREF="DOCUMENT_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
print(rootNode.DocumentTag == rootNode.TagName);
    </Content>
      <Content Target="WordXMLNode" TargetREF="BODY_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
bodyNode = rootNode.Nodes(rootNode.BodyTag).Item(0);
print(bodyNode.TagName);
    </Content>
      <Content Target="WordXMLNode" TargetREF="SECTION_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.SectionTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="SUBSECTION_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.SubSectionTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="TABLE_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.TableTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="ROW_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.RowTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="CELL_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.CellTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="PARAGRAPH_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.ParagraphTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="REVISION_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.RevisionTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="RUN_TAG" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.RunTag));
if nodes.Length &gt; 0 then
    print(nodes.Item(0).TagName);
endif
    </Content>
      <Content Target="WordXMLNode" TargetREF="NO_LENGTH" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodes = rootNode.Evaluate("//" &amp; (rootNode.CellTag));
inode = 0;
while inode &lt; nodes.Length do
    node = nodes.Item(inode);
    /* Supprime tous les textes contenus dans les cellules des tableaux. */
    node.EraseString(false, 0, rootNode.NoLength);
    /* Une cellule doit contenir au minimum un paragraphe. */
    node.AppendString(false, "");
    inode = inode + 1;
endwhile
    </Content>
      <Content Target="WordXMLNode:appendString@Boolean@String@WordXMLNodeList" TargetREF="trackedChanges" Type="ParameterDescription">
    True, active le suivi de modification. False, le texte ajouté n'est pas en suivi de modification.
    </Content>
      <Content Target="WordXMLNode:appendString@Boolean@String@WordXMLNodeList" TargetREF="str" Type="ParameterDescription">
    Le texte à ajouter.
    </Content>
      <Content Target="WordXMLNode:appendString@Boolean@String@WordXMLNodeList" TargetREF="appendString" Type="ReturnDescription">
    La liste des noeuds *run &lt;w:r&gt;* créés lors de l'ajout du texte.
    </Content>
      <Content Target="WordXMLNode:appendString@Boolean@String@WordXMLNodeList" Type="Example">
xml = new WordXML();
xml.Initialize();
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
/* Mise à jour de l'auteur. */
/* Recherche des noeuds o:Author et o:Revision. */
xpathNodeList = rootNode.Evaluate("//o:Author | //o:Revision");
inode = 0;
while inode &lt; xpathNodeList.Length do
    /* Récupération du noeud dans la liste. */
    xpathNode = xpathNodeList.Item(inode);
    /* Suppression du contenu précèdent : suppression du noeud fils. */
    xpathNode.Nodes.Item(0).Erase();
    if xpathNode.TagName == "o:Author" then
        /* Ajout d'un nouveau contenu pour l'auteur. */
        xpathNode.Content = "WordXML";
    else
        /* Ajout d'un nouveau contenu pour la révision. */
        xpathNode.Content = "1";
    endif
    inode.Increment();
endwhile
xpathNodeList = null;
/* Ajout d'un texte dans le document */
bodyNode = rootNode.Nodes(rootNode.BodyTag).Item(0);
nodeList = bodyNode.AppendString(false, 
"Title" &amp; CrLf &amp; 
"All that we see or seem is but a dream within a dream." &amp; CrLf &amp; 
"Edgar Allan Poe");
/* Ajout du Style */
/* en gras pour le titre */
nodeTitleProperties = nodeList.Item(0).PropertiesNode;
boldNode = xmlDocument.CreateNode("w:b");
nodeTitleProperties.Append(boldNode);
/* en italique pour l'auteur */
nodeAuthorProperties = nodeList.Item(2).PropertiesNode;
italicNode = xmlDocument.CreateNode("w:i");
nodeAuthorProperties.Append(italicNode );
/* Paragraphe de l'auteur avec un alignement centré */
nodeParagraphProperties = nodeList.Item(2)
                        .Parent(rootNode.ParagraphTag).PropertiesNode;
alignNode = xmlDocument.CreateNode("w:jc");
alignNode.Attributes("w:val") = "center";
nodeParagraphProperties.Append(alignNode);
/* Suppression du mot Title */
bodyNode.EraseString(true, 0, 5);
/* Insertion du mot Quote */
bodyNode.InsertString(true, 0, "Quote");
xmlDocument.Save();
xmlDocument = null;
xml.Terminate();
xml = null;
    </Content>
      <Content Target="WordXMLNode:getTagName@String" TargetREF="getTagName" Type="ReturnDescription">
    Le tag du noeud courant.
    </Content>
      <Content Target="WordXMLNode:getTagName@String" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getNodes@WordXMLNodeList" TargetREF="getNodes" Type="ReturnDescription">
   La liste des noeuds fils du noeud courant.
    </Content>
      <Content Target="WordXMLNode:getNodes@WordXMLNodeList" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getNodes@String@WordXMLNodeList" TargetREF="tagName" Type="ParameterDescription">
    Le tag des noeuds fils à considérer.
    </Content>
      <Content Target="WordXMLNode:getNodes@String@WordXMLNodeList" TargetREF="getNodes" Type="ReturnDescription">
    La liste des noeuds fils avec le tag *tagName* du noeud courant.
    </Content>
      <Content Target="WordXMLNode:getNodes@String@WordXMLNodeList" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getNextNode@WordXMLNode" TargetREF="getNextNode" Type="ReturnDescription">
    Le noeud suivant ou un noeud invalide si le noeud suivant n'existe pas.
    </Content>
      <Content Target="WordXMLNode:getNextNode@WordXMLNode" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
node = rootNode.Nodes(rootNode.ParagraphTag).Item(0);
/* Liste les noeuds du même niveau suivant le noeud node */
while node.Validity do
    print(node.TagName);
    node = node.NextNode;
endwhile
    </Content>
      <Content Target="WordXMLNode:getNextNode@String@WordXMLNode" TargetREF="tagName" Type="ParameterDescription">
    Le tag des noeuds suivant à considérer.
    </Content>
      <Content Target="WordXMLNode:getNextNode@String@WordXMLNode" TargetREF="getNextNode" Type="ReturnDescription">
    Le noeud *tagName* suivant ou un noeud invalide si le noeud *tagName* suivant n'existe pas.
    </Content>
      <Content Target="WordXMLNode:getNextNode@String@WordXMLNode" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
node = rootNode.Nodes(rootNode.ParagraphTag).Item(0);
/* Liste les noeuds Paragraph du même niveau suivant le noeud node */
while node.Validity do
    print(node.TagName);
    node = node.NextNode(rootNode.ParagraphTag);
endwhile
    </Content>
      <Content Target="WordXMLNode:getPreviousNode@WordXMLNode" TargetREF="getPreviousNode" Type="ReturnDescription">
    Le noeud précédant ou un noeud invalide si le noeud précédant n'existe pas.
    </Content>
      <Content Target="WordXMLNode:getPreviousNode@WordXMLNode" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodeList = rootNode.Nodes(rootNode.ParagraphTag);
node = nodeList.Item(nodeList.Length - 1);
/* Liste les noeuds du même niveau précédant le noeud node. */
while node.Validity do
    print(node.TagName);
    node = node.PreviousNode;
endwhile
    </Content>
      <Content Target="WordXMLNode:getPreviousNode@String@WordXMLNode" TargetREF="tagName" Type="ParameterDescription">
    Le tag des noeuds précèdant à considérer.
    </Content>
      <Content Target="WordXMLNode:getPreviousNode@String@WordXMLNode" TargetREF="getPreviousNode" Type="ReturnDescription">
    Le noeud *tagName* précédant ou un noeud invalide si le noeud *tagName* précédant n'existe pas.
    </Content>
      <Content Target="WordXMLNode:getPreviousNode@String@WordXMLNode" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nodeList = rootNode.Nodes(rootNode.ParagraphTag);
node = nodeList.Item(nodeList.Length - 1);
/* Liste les noeuds Paragraph du même niveau précédant le noeud node. */
while node.Validity do
    print(node.TagName);
    node = node.PreviousNode(rootNode.ParagraphTag);
endwhile
    </Content>
      <Content Target="WordXMLNode:getParent@WordXMLNode" TargetREF="getParent" Type="ReturnDescription">
    Le noeud Parent du noeud courant ou un noeud invalide si le noeud Parent n'existe pas.
    </Content>
      <Content Target="WordXMLNode:getParent@WordXMLNode" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getPreviousNode@String@WordXMLNode" TargetREF="tagName" Type="ParameterDescription">
    Le tag du noeud Parent à considérer.
    </Content>
      <Content Target="WordXMLNode:getParent@String@WordXMLNode" TargetREF="getParent" Type="ReturnDescription">
    Le noeud Parent avec le tag *tagName* du noeud courant ou un noeud invalide si le noeud Parent avec le tag *tagName* n'existe pas.
    </Content>
      <Content Target="WordXMLNode:getParent@String@WordXMLNode" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getContent@String" TargetREF="getContent" Type="ReturnDescription">
    Le contenu d'un noeud XML.
    </Content>
      <Content Target="WordXMLNode:getContent@String" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getAttribute@String@String" TargetREF="attrName" Type="ParameterDescription">
    Le tag de l'attribut à rechercher.
    </Content>
      <Content Target="WordXMLNode:getAttribute@String@String" TargetREF="getAttribute" Type="ReturnDescription">
    La valeur de l'attribut.
    </Content>
      <Content Target="WordXMLNode:getAttribute@String@String" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:getAttributesNames@StringList" TargetREF="getAttributesNames" Type="ReturnDescription">
    La liste des attributs du noeud courant.
    </Content>
      <Content Target="WordXMLNode:getAttributesNames@StringList" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
nameList = rootNode.AttributesNames;
it = nameList.Begin;
while it != nameList.End do
    print(it.Current);
    it.Increment();
endwhile
    </Content>
      <Content Target="WordXMLNode:getDocument@WordXMLDocumentPtr" TargetREF="getDocument" Type="ReturnDescription">
    Une référence vers l'objet *Document* contenant le noeud.
    </Content>
      <Content Target="WordXMLNode:getDocument@WordXMLDocumentPtr" Type="Example">
xmlDocumentPtr = node.Document;
rootNode = xmlDocumentPtr.DocumentNode;
    </Content>
      <Content Target="WordXMLNode:isValid@Boolean" TargetREF="isValid" Type="ReturnDescription">
    Indique si le noeud est un noeud XML valide du document.
    </Content>
      <Content Target="WordXMLNode:isValid@Boolean" Type="Example">
print(node.Validity);
    </Content>
      <Content Target="WordXMLNode:setContent@String@void" TargetREF="content" Type="ParameterDescription">
    Le contenu du noeud.
    </Content>
      <Content Target="WordXMLNode:setContent@String@void" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:setAttribute@String@String@void" TargetREF="attrName" Type="ParameterDescription">
    Le nom de l'attribut.
    </Content>
      <Content Target="WordXMLNode:setAttribute@String@String@void" TargetREF="attrValue" Type="ParameterDescription">
    La valeur de l'attribut.
    </Content>
      <Content Target="WordXMLNode:setAttribute@String@String@void" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:eraseAttribute@String@void" TargetREF="attrName" Type="ParameterDescription">
    La nom de l'attribut.
    </Content>
      <Content Target="WordXMLNode:eraseAttribute@String@void" Type="Example">
node.Attributes("w:val") = null;
    </Content>
      <Content Target="WordXMLNode:createPropertiesNode@WordXMLNode" TargetREF="createPropertiesNode" Type="ReturnDescription">
    Le noeud propriétés pour le noeud courant.
    </Content>
      <Content Target="WordXMLNode:createPropertiesNode@WordXMLNode" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:setPropertiesNode@WordXMLNode@void" TargetREF="node" Type="ParameterDescription">
    Le noeud propriétés pour le noeud courant.
    </Content>
      <Content Target="WordXMLNode:setPropertiesNode@WordXMLNode@void" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:erasePropertiesNode@void" Type="Example">
node.PropertiesNode = null;
    </Content>
      <Content Target="WordXMLNode:evaluate@String@WordXMLNodeList" TargetREF="xpath" Type="ParameterDescription">
    La requête XPath.
    </Content>
      <Content Target="WordXMLNode:evaluate@String@WordXMLNodeList" TargetREF="evaluate" Type="ReturnDescription">
    La liste des noeuds résultat de la requête XPath.
    </Content>
      <Content Target="WordXMLNode:evaluate@String@WordXMLNodeList" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:hasAttribute@String@Boolean" TargetREF="attrName" Type="ParameterDescription">
    Le nom de l'attribut.
    </Content>
      <Content Target="WordXMLNode:hasAttribute@String@Boolean" TargetREF="hasAttribute" Type="ReturnDescription">
    True, si l'attribut existe, False sinon.
    </Content>
      <Content Target="WordXMLNode:hasAttribute@String@Boolean" Type="Example">
print(node.HasAttribute("w:val"));
    </Content>
      <Content Target="WordXMLNode:getString@String" TargetREF="getString" Type="ReturnDescription">
    Le texte concaténé contenu dans les noeuds fils du noeud courant.
    </Content>
      <Content Target="WordXMLNode:getString@String" Type="Example">
xmlDocument = new WordXMLDocument();
xmlDocument.Parse("modelWord.xml");
rootNode = xmlDocument.DocumentNode;
print(rootNode.GetString());
    </Content>
      <Content Target="WordXMLNode:append@WordXMLNode@void" TargetREF="newChild" Type="ParameterDescription">
    Le nouveau noeud à ajouter.
    </Content>
      <Content Target="WordXMLNode:append@WordXMLNode@void" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:erase@void" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:replace@WordXMLNode@WordXMLNode@void" TargetREF="newChild" Type="ParameterDescription">
    Le nouveau noeud.
    </Content>
      <Content Target="WordXMLNode:replace@WordXMLNode@WordXMLNode@void" TargetREF="oldChild" Type="ParameterDescription">
    L'ancien noeud.
    </Content>
      <Content Target="WordXMLNode:replace@WordXMLNode@WordXMLNode@void" Type="Example">
node.Replace(newChild, oldChild);
    </Content>
      <Content Target="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void" TargetREF="newChild" Type="ParameterDescription">
    Le nouveau noeud à insérer.
    </Content>
      <Content Target="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void" TargetREF="refChild" Type="ParameterDescription">
    Le noeud suivant le noeud à insérer. Détermine la position du noeud à insérer dans la liste.
    </Content>
      <Content Target="WordXMLNode:insertBefore@WordXMLNode@WordXMLNode@void" Type="Example">
node.InsertBefore(newChild, refChild);
    </Content>
      <Content Target="WordXMLNode:cloneNode@Boolean@WordXMLNode" TargetREF="deep" Type="ParameterDescription">
    Indique si la copie se fait en profondeur ou non. Si la copie se fait en profondeur, les noeuds fils sont aussi copiés. Dans le cas contraire, seulement le noeud est copié. 
    </Content>
      <Content Target="WordXMLNode:cloneNode@Boolean@WordXMLNode" TargetREF="cloneNode" Type="ReturnDescription">
    Le noeud copié.
    </Content>
      <Content Target="WordXMLNode:cloneNode@Boolean@WordXMLNode" Type="Example">
node.CloneNode(true);
    </Content>
      <Content Target="WordXMLNode:eraseString@Boolean@Uint32@Uint32@void" TargetREF="trackedChanges" Type="ParameterDescription">
    True, active le suivi de modification. False, le texte supprimé n'est pas en suivi de modification.
    </Content>
      <Content Target="WordXMLNode:eraseString@Boolean@Uint32@Uint32@void" TargetREF="pos" Type="ParameterDescription">
    La position de départ du texte à supprimer.
    </Content>
      <Content Target="WordXMLNode:eraseString@Boolean@Uint32@Uint32@void" TargetREF="length" Type="ParameterDescription">
    La longueur du texte à supprimer.
    </Content>
      <Content Target="WordXMLNode:eraseString@Boolean@Uint32@Uint32@void" Type="Example">
    Voir l'exemple AppendString.
    </Content>
      <Content Target="WordXMLNode:insertString@Boolean@Uint32@String@WordXMLNodeList" TargetREF="trackedChanges" Type="ParameterDescription">
    True, active le suivi de modification. False, le texte inséré n'est pas en suivi de modification.
    </Content>
      <Content Target="WordXMLNode:insertString@Boolean@Uint32@String@WordXMLNodeList" TargetREF="pos" Type="ParameterDescription">
    La position de départ du texte à insérer.
    </Content>
      <Content Target="WordXMLNode:insertString@Boolean@Uint32@String@WordXMLNodeList" TargetREF="str" Type="ParameterDescription">
    Le texte à insérer.
    </Content>
      <Content Target="WordXMLNode:insertString@Boolean@Uint32@String@WordXMLNodeList" TargetREF="insertString" Type="ReturnDescription">
    La liste des noeuds *run &lt;w:r&gt;* créés lors de l'insertion du texte.
    </Content>
      <Content Target="WordXMLNode:insertString@Boolean@Uint32@String@WordXMLNodeList" Type="Example">
    Voir l'exemple AppendString.
    </Content>
    </File>
    <File Name="WordXMLNodeList">
      <Entity Class="Data" Name="WordXMLNodeList">
        <Comments> Classe représentant une liste de noeuds XML du document Word.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="item" Name="WordXMLNodeList:item@UInt32@WordXMLNode">
        <Comments> Retourne le noeud à l'index *i*.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNodeList" Type="UInt64"/>
        <Attribute Modifier="Ref Auto " Name="item" Type="UInt64"/>
        <Attribute Modifier="Const " Name="i" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="length" Name="WordXMLNodeList:length@UInt32">
        <Comments> Retourne la taille de la liste.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordXMLNodeList" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="length" Type="UInt32"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNodeList:item@UInt32@WordXMLNode_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="WordXMLNodeList:item@UInt32@WordXMLNode" TargetREF="item"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNodeList:item@UInt32@WordXMLNode_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNodeList:item@UInt32@WordXMLNode" TargetREF="WordXMLNodeList"/>
      <Relation Multiplicity="Zero-One" Name="R_WordXMLNodeList:length@UInt32_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="WordXMLNodeList:length@UInt32" TargetREF="WordXMLNodeList"/>
      <Content Target="WordXMLNodeList:item@Uint32@WordXMLNode" TargetREF="i" Type="ParameterDescription">
    L'indice du noeud dans la liste.
    </Content>
      <Content Target="WordXMLNodeList:item@Uint32@WordXMLNode" TargetREF="item" Type="ReturnDescription">
    Le noeud dans la liste à la position *i*.
    </Content>
      <Content Target="WordXMLNodeList:item@Uint32@WordXMLNode" Type="Example">
xpathNodeList = rootNode.Evaluate("//o:Author");
inode = 0;
if inode &lt; xpathNodeList.Length then
    /* Récupération du noeud dans la liste. */
    xpathNode = xpathNodeList.Item(inode);
endif
    </Content>
      <Content Target="WordXMLNodeList:length@Uint32" TargetREF="length" Type="ReturnDescription">
    La taille de la liste.
    </Content>
      <Content Target="WordXMLNodeList:length@Uint32" Type="Example">
    Voir l'exemple Item.
    </Content>
    </File>
    <File Name="WordMacro">
      <Entity Class="Data" Name="WordMacro">
        <Comments> Classe permettant d'executer des macros Word. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="convertToXML" Name="WordMacro:convertToXML@String@String@Boolean@Boolean">
        <Comments> Convertie un fichier en xml.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordMacro" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="convertToXML" Type="Boolean"/>
        <Attribute Modifier="Const " Name="file" Type="String"/>
        <Attribute Modifier="Const " Name="xmlFile" Type="String"/>
        <Attribute Modifier="Const " Name="acceptAllRevisions" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="convertToDOC" Name="WordMacro:convertToDOC@String@String@Boolean@Boolean">
        <Comments> Convertie un fichier en doc.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordMacro" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="convertToDOC" Type="Boolean"/>
        <Attribute Modifier="Const " Name="file" Type="String"/>
        <Attribute Modifier="Const " Name="docFile" Type="String"/>
        <Attribute Modifier="Const " Name="acceptAllRevisions" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="convertToPDF" Name="WordMacro:convertToPDF@String@String@Boolean@Boolean">
        <Comments> Convertie un fichier en pdf.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordMacro" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="convertToPDF" Type="Boolean"/>
        <Attribute Modifier="Const " Name="file" Type="String"/>
        <Attribute Modifier="Const " Name="pdfFile" Type="String"/>
        <Attribute Modifier="Const " Name="acceptAllRevisions" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="convertToXDOC" Name="WordMacro:convertToXDOC@String@String@Boolean@Boolean">
        <Comments> Convertie un fichier en xdoc.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual " Name="WordMacro" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="convertToXDOC" Type="Boolean"/>
        <Attribute Modifier="Const " Name="file" Type="String"/>
        <Attribute Modifier="Const " Name="xdocFile" Type="String"/>
        <Attribute Modifier="Const " Name="acceptAllRevisions" Type="Boolean"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_WordMacro:convertToXML@String@String@Boolean@Boolean_WordMacro" Source="WordMacro" SourceREF="Id" Target="WordMacro:convertToXML@String@String@Boolean@Boolean" TargetREF="WordMacro"/>
      <Relation Multiplicity="Zero-One" Name="R_WordMacro:convertToDOC@String@String@Boolean@Boolean_WordMacro" Source="WordMacro" SourceREF="Id" Target="WordMacro:convertToDOC@String@String@Boolean@Boolean" TargetREF="WordMacro"/>
      <Relation Multiplicity="Zero-One" Name="R_WordMacro:convertToPDF@String@String@Boolean@Boolean_WordMacro" Source="WordMacro" SourceREF="Id" Target="WordMacro:convertToPDF@String@String@Boolean@Boolean" TargetREF="WordMacro"/>
      <Relation Multiplicity="Zero-One" Name="R_WordMacro:convertToXDOC@String@String@Boolean@Boolean_WordMacro" Source="WordMacro" SourceREF="Id" Target="WordMacro:convertToXDOC@String@String@Boolean@Boolean" TargetREF="WordMacro"/>
      <Content Target="WordMacro:convertToXML@String@String@Boolean@Boolean" TargetREF="file" Type="ParameterDescription">
    Le nom du document Word.
    </Content>
      <Content Target="WordMacro:convertToXML@String@String@Boolean@Boolean" TargetREF="xmlFile" Type="ParameterDescription">
    Le nom du document Word XML.
    </Content>
      <Content Target="WordMacro:convertToXML@String@String@Boolean@Boolean" TargetREF="acceptAllRevisions" Type="ParameterDescription">
    True, le suivi de modification est accepté. False, le document d'origine est convertie tel quel.
    </Content>
      <Content Target="WordMacro:convertToXML@String@String@Boolean@Boolean" TargetREF="convertToXML" Type="ReturnDescription">
    True, le document est convertie. False, le document n'est pas convertie.
    </Content>
      <Content Target="WordMacro:convertToXML@String@String@Boolean@Boolean" Type="Example">
word = new WordMacro();
docDir = new Folder(docPath);
tempDir = new Folder(tempPath);
word.ConvertToXML(docDir.AbsolutePath, tempDir.AbsolutePath &amp; "\xmldoc.xml", false);
    </Content>
      <Content Target="WordMacro:convertToDOC@String@String@Boolean@Boolean" TargetREF="file" Type="ParameterDescription">
    Le nom du document Word XML.
    </Content>
      <Content Target="WordMacro:convertToDOC@String@String@Boolean@Boolean" TargetREF="docFile" Type="ParameterDescription">
    Le nom du document Word.
    </Content>
      <Content Target="WordMacro:convertToDOC@String@String@Boolean@Boolean" TargetREF="acceptAllRevisions" Type="ParameterDescription">
    True, le suivi de modification est accepté. False, le document d'origine est convertie tel quel.
    </Content>
      <Content Target="WordMacro:convertToDOC@String@String@Boolean@Boolean" TargetREF="convertToDOC" Type="ReturnDescription">
    True, le document est convertie. False, le document n'est pas convertie.
    </Content>
      <Content Target="WordMacro:convertToDOC@String@String@Boolean@Boolean" Type="Example">
word = new WordMacro();
fileDir = new Folder(filePath);
tempDir = new Folder(tempPath);
word.convertToDOC(fileDir.AbsolutePath, tempDir.AbsolutePath &amp; "\filedoc.doc", false);
    </Content>
      <Content Target="WordMacro:convertToPDF@String@String@Boolean@Boolean" TargetREF="file" Type="ParameterDescription">
    Le nom du document Word.
    </Content>
      <Content Target="WordMacro:convertToPDF@String@String@Boolean@Boolean" TargetREF="pdfFile" Type="ParameterDescription">
    Le nom du document PDF.
    </Content>
      <Content Target="WordMacro:convertToPDF@String@String@Boolean@Boolean" TargetREF="acceptAllRevisions" Type="ParameterDescription">
    True, le suivi de modification est accepté. False, le document d'origine est convertie tel quel.
    </Content>
      <Content Target="WordMacro:convertToPDF@String@String@Boolean@Boolean" TargetREF="convertToPDF" Type="ReturnDescription">
    True, le document est convertie. False, le document n'est pas convertie.
    </Content>
      <Content Target="WordMacro:convertToPDF@String@String@Boolean@Boolean" Type="Example">
word = new WordMacro();
fileDir = new Folder(filePath);
tempDir = new Folder(tempPath);
word.convertToPDF(fileDir.AbsolutePath, tempDir.AbsolutePath &amp; "\filepdf.pdf", false);
    </Content>
      <Content Target="WordMacro:convertToXDOC@String@String@Boolean@Boolean" TargetREF="file" Type="ParameterDescription">
    Le nom du document Word.
    </Content>
      <Content Target="WordMacro:convertToXDOC@String@String@Boolean@Boolean" TargetREF="xdocFile" Type="ParameterDescription">
    Le nom du document XDOC.
    </Content>
      <Content Target="WordMacro:convertToXDOC@String@String@Boolean@Boolean" TargetREF="acceptAllRevisions" Type="ParameterDescription">
    True, le suivi de modification est accepté. False, le document d'origine est convertie tel quel.
    </Content>
      <Content Target="WordMacro:convertToXDOC@String@String@Boolean@Boolean" TargetREF="convertToXDOC" Type="ReturnDescription">
    True, le document est convertie. False, le document n'est pas convertie.
    </Content>
      <Content Target="WordMacro:convertToXDOC@String@String@Boolean@Boolean" Type="Example">
word = new WordMacro();
fileDir = new Folder(filePath);
tempDir = new Folder(tempPath);
word.convertToXDOC(fileDir.AbsolutePath, tempDir.AbsolutePath &amp; "\filedoc.xdoc", false);
    </Content>
    </File>
    <File Name="libword">
      <Entity Class="Package" Name="libword">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_libword_WordMacro" Source="WordMacro" SourceREF="Id" Target="libword" TargetREF="Id"/>
      <Relation Multiplicity="Zero-One" Name="R_libword_WordXMLDocument" Source="WordXMLDocument" SourceREF="Id" Target="libword" TargetREF="Id"/>
      <Relation Multiplicity="Zero-One" Name="R_libword_WordXMLNode" Source="WordXMLNode" SourceREF="Id" Target="libword" TargetREF="Id"/>
      <Relation Multiplicity="Zero-One" Name="R_libword_WordXMLNodeList" Source="WordXMLNodeList" SourceREF="Id" Target="libword" TargetREF="Id"/>
    </File>
  </Workspace>

</document_schema>
