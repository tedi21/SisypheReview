/*
 * WordXMLInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#ifndef _WORDXML_INTERPRETER_H_
#define _WORDXML_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "WordXMLDocument.h"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace libword;

NAMESPACE_BEGIN(interp)

	// Classe permettant d'initialiser ou libérer les objets XML.
	template <class EncodingT>
	class WordXMLInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		WordXMLInterpreter();

		~WordXMLInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

		// Initialise le parseur XML.
		void initialize() const;

		// Libère les objets XML.
		void terminate() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( WordXMLInterpreter, C("WordXML") );
			METHOD_KEY_REGISTER ( WordXMLInterpreter, void, initialize, const_t, C("WordXML::Initialize") );
			METHOD_KEY_REGISTER ( WordXMLInterpreter, void, terminate, const_t, C("WordXML::Terminate") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("WordXML") );
			METHOD_KEY_UNREGISTER ( C("WordXML::Initialize") );
			METHOD_KEY_UNREGISTER ( C("WordXML::Terminate") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "WordXMLInterpreter_impl.hpp"

#endif