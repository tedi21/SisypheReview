/*
 * WordXMLDocumentInterpreter_impl.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

template <class EncodingT>
class WordXMLNodeInterpreter;

template <class EncodingT>
WordXMLDocumentInterpreter<EncodingT>::WordXMLDocumentInterpreter()
{
m_object = new WordXMLDocument();
    m_allocated = true;
}

template <class EncodingT>
void WordXMLDocumentInterpreter<EncodingT>::tidyValue()
{
if (m_allocated)
    {
        delete m_object;
        m_allocated = false;
    }
}

template <class EncodingT>
WordXMLDocumentInterpreter<EncodingT>::~WordXMLDocumentInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void WordXMLDocumentInterpreter<EncodingT>::initValue(const WordXMLDocument& object)
{
m_object = const_cast<WordXMLDocument*>(&object);
    m_allocated = false;
}

template <class EncodingT>
WordXMLDocument& WordXMLDocumentInterpreter<EncodingT>::value()
{
return *m_object;
}

template <class EncodingT>
const WordXMLDocument& WordXMLDocumentInterpreter<EncodingT>::value() const
{
return *m_object;
}

template <class EncodingT>
WordXMLDocumentInterpreter<EncodingT>::WordXMLDocumentInterpreter(const WordXMLDocument& object)
{
	initValue(object);
}

template <class EncodingT>
WordXMLDocumentInterpreter<EncodingT>::WordXMLDocumentInterpreter(const WordXMLDocumentInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
WordXMLDocumentInterpreter<EncodingT>& WordXMLDocumentInterpreter<EncodingT>::operator=(const WordXMLDocumentInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const WordXMLDocument& WordXMLDocumentInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void WordXMLDocumentInterpreter<EncodingT>::setValue(WordXMLDocument const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t WordXMLDocumentInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > WordXMLDocumentInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new WordXMLDocumentInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t WordXMLDocumentInterpreter<EncodingT>::getClassName() const
{
	return C("WordXMLDocument");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > WordXMLDocumentInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("WordXMLDocument"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in WordXMLDocument, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Crée un nouveau noeud.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordXMLDocumentInterpreter<EncodingT>::createNode(const shared_ptr< Base<EncodingT> >& tagName)
{
	shared_ptr< Base<EncodingT> > res(new WordXMLNodeInterpreter<EncodingT>());
	typename EncodingT::string_t nativeTagName;
	if (check_string<EncodingT>(tagName, nativeTagName))
	{
		res.reset(new WordXMLNodeInterpreter<EncodingT>(value().createNode(nativeTagName.c_str())));
	}
	return res;
}

// Crée un noeud texte.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordXMLDocumentInterpreter<EncodingT>::createTextNode(const shared_ptr< Base<EncodingT> >& txt)
{
	shared_ptr< Base<EncodingT> > res(new WordXMLNodeInterpreter<EncodingT>());
	typename EncodingT::string_t nativeTxt;
	if (check_string<EncodingT>(txt, nativeTxt))
	{
		res.reset(new WordXMLNodeInterpreter<EncodingT>(value().createTextNode(nativeTxt.c_str())));
	}
	return res;
}

// Retourne le noeud racine du document.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordXMLDocumentInterpreter<EncodingT>::getDocumentNode()
{
	shared_ptr< Base<EncodingT> > res(new WordXMLNodeInterpreter<EncodingT>());
	res.reset(new WordXMLNodeInterpreter<EncodingT>(value().getDocumentNode()));
	return res;
}

// Ouvre un fichier Word XML.
template <class EncodingT>
void WordXMLDocumentInterpreter<EncodingT>::parse(const shared_ptr< Base<EncodingT> >& doc)
{
	typename EncodingT::string_t nativeDoc;
	if (check_string<EncodingT>(doc, nativeDoc))
	{
		value().parse(nativeDoc.c_str());
	}
}

// Enregistre le document.
template <class EncodingT>
void WordXMLDocumentInterpreter<EncodingT>::save() const
{
	value().save();
}


template <class EncodingT>
bool check_WordXMLDocument(shared_ptr< Base<EncodingT> > const& val, WordXMLDocument& a)
{
	shared_ptr< WordXMLDocumentInterpreter<EncodingT> > value  = dynamic_pointer_cast< WordXMLDocumentInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "WordXMLDocument expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_WordXMLDocument(shared_ptr< Base<EncodingT> >& val, WordXMLDocument const& a)
{
	shared_ptr< WordXMLDocumentInterpreter<EncodingT> > value  = dynamic_pointer_cast< WordXMLDocumentInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "WordXMLDocument expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C