/*
 * StringListIteratorInterpreter_impl.hpp
 *
 *
 * @date 29-05-2015
 * @author Teddy DIDE
 * @version 1.00
 * STL Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

template <class EncodingT>
StringListIteratorInterpreter<EncodingT>::StringListIteratorInterpreter()
{}

template <class EncodingT>
StringListIteratorInterpreter<EncodingT>::~StringListIteratorInterpreter()
{}

template <class EncodingT>
StringListIteratorInterpreter<EncodingT>::StringListIteratorInterpreter(const StringListIterator& object)
: m_object(object)
{}

template <class EncodingT>
const StringListIterator& StringListIteratorInterpreter<EncodingT>::getValue() const
{
	return m_object;
}

template <class EncodingT>
void StringListIteratorInterpreter<EncodingT>::setValue(StringListIterator const& object)
{
	m_object = object;
}

template <class EncodingT>
typename EncodingT::string_t StringListIteratorInterpreter<EncodingT>::toString() const
{
    return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListIteratorInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new StringListIteratorInterpreter<EncodingT>());
}

template <class EncodingT>
typename EncodingT::string_t StringListIteratorInterpreter<EncodingT>::getClassName() const
{
	return C("StringListIterator");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListIteratorInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("StringListIterator"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in StringListIterator, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Retourne la valeur courante
template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListIteratorInterpreter<EncodingT>::current() const
{
	return shared_ptr< Base<EncodingT> > (new String<EncodingT>(*m_object));
}

// Retourne l'itérateur du début
template <class EncodingT>
void StringListIteratorInterpreter<EncodingT>::increment()
{
    ++m_object;
}

// Retourne l'itérateur de fin
template <class EncodingT>
void StringListIteratorInterpreter<EncodingT>::decrement()
{
    --m_object;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListIteratorInterpreter<EncodingT>::equals(shared_ptr< Base<EncodingT> > const& val) const
{
    shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>);
    StringListIterator ite;     
    if (check_StringListIterator(val, ite))
    {
        res.reset(new Bool<EncodingT>(m_object == ite));
    }
    return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListIteratorInterpreter<EncodingT>::notEquals(shared_ptr< Base<EncodingT> > const& val) const
{
    shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>);
    StringListIterator ite;
    if (check_StringListIterator(val, ite))
    {
        res.reset(new Bool<EncodingT>(m_object != ite));
    }
    return res;
}

template <class EncodingT>
bool check_StringListIterator(shared_ptr< Base<EncodingT> > const& val, StringListIterator& a)
{
	shared_ptr< StringListIteratorInterpreter<EncodingT> > value  = dynamic_pointer_cast< StringListIteratorInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "StringListIterator expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_StringListIterator(shared_ptr< Base<EncodingT> >& val, StringListIterator const& a)
{
	shared_ptr< StringListIteratorInterpreter<EncodingT> > value  = dynamic_pointer_cast< StringListIteratorInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "StringListIterator expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C
