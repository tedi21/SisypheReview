/*
 * StringListInterpreter.hpp
 *
 *
 * @date 29-05-2015
 * @author Teddy DIDE
 * @version 1.00
 * STL Interpreter generated by gensources.
 */

#ifndef _STRINGLIST_INTERPRETER_H_
#define _STRINGLIST_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include <list>
typedef std::list<std::wstring> StringList;

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace std;

NAMESPACE_BEGIN(interp)

	// Classe représentant une liste de chaîne de caractères
	template <class EncodingT>
	class StringListInterpreter
	: public Base<EncodingT>
	{
	private:
		StringList m_object;

	public:
		StringListInterpreter();

		~StringListInterpreter();

		StringListInterpreter(const StringList& object);

		const StringList& getValue() const;

		void setValue(StringList const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

		// Retourne l'itérateur du début
		shared_ptr< Base<EncodingT> > begin() const;

		// Retourne l'itérateur de fin
		shared_ptr< Base<EncodingT> > end() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( StringListInterpreter, C("StringList") );
			METHOD_KEY_REGISTER ( StringListInterpreter, shared_ptr< Base<EncodingT> >, begin, const_t, C("StringList::Begin") );
			METHOD_KEY_REGISTER ( StringListInterpreter, shared_ptr< Base<EncodingT> >, end, const_t, C("StringList::End") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("StringList") );
			METHOD_KEY_UNREGISTER ( C("StringList::Begin") );
			METHOD_KEY_UNREGISTER ( C("StringList::End") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_StringList(shared_ptr< Base<EncodingT> > const& val, StringList& a);

	template <class EncodingT>
	bool reset_StringList(shared_ptr< Base<EncodingT> >& val, StringList const& a);

NAMESPACE_END

#undef A
#undef C
#include "StringListInterpreter_impl.hpp"

#endif
