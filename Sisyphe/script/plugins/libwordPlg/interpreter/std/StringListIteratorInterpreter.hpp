/*
 * StringListIteratorInterpreter.hpp
 *
 *
 * @date 29-05-2015
 * @author Teddy DIDE
 * @version 1.00
 * STL Interpreter generated by gensources.
 */

#ifndef _STRINGLIST_ITERATOR_INTERPRETER_H_
#define _STRINGLIST_ITERATOR_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include <list>
typedef std::list<std::wstring>::const_iterator StringListIterator;

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace std;

NAMESPACE_BEGIN(interp)

	// Classe représentant une liste de chaîne de caractères
	template <class EncodingT>
	class StringListIteratorInterpreter
	: public Base<EncodingT>
	{
	private:
		StringListIterator m_object;

	public:
		StringListIteratorInterpreter();

		~StringListIteratorInterpreter();

		StringListIteratorInterpreter(const StringListIterator& object);

		const StringListIterator& getValue() const;

		void setValue(StringListIterator const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);
        
        // Retourne la valeur courante
        shared_ptr< Base<EncodingT> > current() const;

		// Incrémente l'itérateur
        void increment();

		// Décrémente l'itérateur
        void decrement();
        
        FACTORY_PROTOTYPE1(equals, In< shared_ptr< Base<EncodingT> > >)
        shared_ptr< Base<EncodingT> > equals(shared_ptr< Base<EncodingT> > const& val) const;

        FACTORY_PROTOTYPE1(notEquals, In< shared_ptr< Base<EncodingT> > >)
        shared_ptr< Base<EncodingT> > notEquals(shared_ptr< Base<EncodingT> > const& val) const;       

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( StringListIteratorInterpreter, C("StringListIterator") );
            METHOD_KEY_REGISTER1( StringListIteratorInterpreter, shared_ptr< Base<EncodingT> >, equals, const_t, C("StringListIterator::equals") );
            METHOD_KEY_REGISTER1( StringListIteratorInterpreter, shared_ptr< Base<EncodingT> >, notEquals, const_t, C("StringListIterator::notEquals") );
            METHOD_KEY_REGISTER ( StringListIteratorInterpreter, shared_ptr< Base<EncodingT> >, current, const_t, C("StringListIterator::Current") );
			METHOD_KEY_REGISTER ( StringListIteratorInterpreter, void, increment, no_const_t, C("StringListIterator::Increment") );
			METHOD_KEY_REGISTER ( StringListIteratorInterpreter, void, decrement, no_const_t, C("StringListIterator::Decrement") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("StringListIterator") );
            METHOD_KEY_UNREGISTER1( C("StringListIterator::equals") );
            METHOD_KEY_UNREGISTER1( C("StringListIterator::notEquals") );
            METHOD_KEY_UNREGISTER ( C("StringListIterator::Current") );
			METHOD_KEY_UNREGISTER ( C("StringListIterator::Increment") );
			METHOD_KEY_UNREGISTER ( C("StringListIterator::Decrement") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_StringListIterator(shared_ptr< Base<EncodingT> > const& val, StringListIterator& a);

	template <class EncodingT>
	bool reset_StringListIterator(shared_ptr< Base<EncodingT> >& val, StringListIterator const& a);

NAMESPACE_END

#undef A
#undef C
#include "StringListIteratorInterpreter_impl.hpp"

#endif
