<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE document_schema SYSTEM "document_schema.dtd">
<document_schema>

  <Workspace Author="Teddy DIDE" Brief="Debug Interpreter generated by gensources." Name="Debug_interpreter" Option="1" Type="Project" Version="1.00">
    <File Name="DebugEngine">
      <Content Type="Global-inclusion">
#include "IDebugClientPtrInterpreter.hpp"
#include "IDebugControlPtrInterpreter.hpp"
#include "IDebugSystemObjectsPtrInterpreter.hpp"
#include "IDebugSymbolsPtrInterpreter.hpp"

class EventCallbacks : public DebugBaseEventCallbacks   // event callback class has 16 methods
{
private:
  CDebugPtr&lt;IDebugControl3&gt;  m_Control;
  CDebugPtr&lt;IDebugBreakpoint&gt; m_Breakpoint;

public:
       EventCallbacks(IDebugControl3 *control);
       STDMETHOD_(ULONG, AddRef)         ( THIS );
       STDMETHOD_(ULONG, Release)        ( THIS );
       STDMETHOD(Breakpoint)             ( THIS_ IN PDEBUG_BREAKPOINT Bp );
       STDMETHOD(ChangeDebuggeeState)    ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(ChangeEngineState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(ChangeSymbolState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(CreateThread)           ( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset,IN ULONG64  StartOffset);
       STDMETHOD(Exception)              ( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance );
       STDMETHOD(ExitProcess)            ( THIS_ IN ULONG  ExitCode );
       STDMETHOD(ExitThread)             ( THIS_ IN ULONG  ExitCode );
       STDMETHOD(GetInterestMask)        ( THIS_ OUT PULONG Mask );
       STDMETHOD(SessionStatus)          ( THIS_ IN ULONG Status );
       STDMETHOD(SystemError)            ( THIS_ IN ULONG  Error, IN ULONG  Level );
       STDMETHOD(UnloadModule)           ( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset );
       STDMETHOD(LoadModule)             (  THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,
                                          IN ULONG ModuleSize,  IN PCSTR ModuleName,IN PCSTR ImageName,  IN ULONG CheckSum,
                                          IN ULONG TimeDateStamp );
       STDMETHOD(CreateProcess)          ( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle, IN ULONG64 BaseOffset, IN ULONG ModuleSize, 
                                          IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum,
                                          IN ULONG TimeDateStamp,  IN ULONG64 InitialThreadHandle,   IN ULONG64 ThreadDataOffset,
                                          IN ULONG64 StartOffset );
};
</Content>
      <Content Type="Global-body">
template &lt;class EncodingT&gt;
IDebugClient* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugClient = NULL;
template &lt;class EncodingT&gt;
IDebugControl3* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugControl = NULL;
template &lt;class EncodingT&gt;
EventCallbacks* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_eventCallback = NULL;
template &lt;class EncodingT&gt;
IDebugSystemObjects* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugSystemObjects = NULL;
template &lt;class EncodingT&gt;
IDebugSymbols* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugSymbols = NULL;

EventCallbacks::EventCallbacks(IDebugControl3 *control)
: m_Control(control)
{
}

STDMETHODIMP_(ULONG) EventCallbacks::AddRef(    THIS )  // event callback method 1
{
       return 1;
}
STDMETHODIMP_(ULONG) EventCallbacks::Release( THIS )  //event callback method 2
{
       return 0;
}
STDMETHODIMP EventCallbacks::Breakpoint( THIS_ IN PDEBUG_BREAKPOINT Bp ) //event callback method 3
{
       return DEBUG_STATUS_BREAK;
}
STDMETHODIMP EventCallbacks::CreateProcess(THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle,
       IN ULONG64 BaseOffset,IN ULONG ModuleSize,IN PCSTR ModuleName,IN PCSTR ImageName,
       IN ULONG CheckSum, IN ULONG TimeDateStamp,IN ULONG64 InitialThreadHandle,
       IN ULONG64 ThreadDataOffset,  IN ULONG64 StartOffset
       ) //event callback method 4  and so on till method 16
{
       HRESULT status = 0; //we are setting a break point in Address Of Entrypoint of the debuggee
       IDebugBreakpoint* breakpoint = NULL;
       if (( status = m_Control-&gt;AddBreakpoint(DEBUG_BREAKPOINT_CODE,DEBUG_ANY_ID, &amp;breakpoint)) == S_OK)
       {
              if (( status = breakpoint-&gt;SetOffset(StartOffset)) == S_OK)
              {
                     if (( status = breakpoint-&gt;SetFlags(DEBUG_BREAKPOINT_ENABLED)) == S_OK)
                     {
                            m_Breakpoint.reset(breakpoint);
                            breakpoint-&gt;Release();
                     }
              }
       }
       return DEBUG_STATUS_NO_CHANGE;
}

STDMETHODIMP EventCallbacks::CreateThread( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset, IN ULONG64  StartOffset )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::Exception( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance )
{
       return DEBUG_STATUS_BREAK;
}
STDMETHODIMP EventCallbacks::ExitProcess (THIS_ IN ULONG  ExitCode )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ExitThread (THIS_ IN ULONG  ExitCode )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::GetInterestMask( THIS_ OUT PULONG Mask )
{
       *Mask =
              DEBUG_EVENT_BREAKPOINT |
              DEBUG_EVENT_EXCEPTION |
              DEBUG_EVENT_CREATE_THREAD |
              DEBUG_EVENT_EXIT_THREAD |
              DEBUG_EVENT_CREATE_PROCESS |
              DEBUG_EVENT_EXIT_PROCESS |
              DEBUG_EVENT_LOAD_MODULE |
              DEBUG_EVENT_UNLOAD_MODULE |
              DEBUG_EVENT_SYSTEM_ERROR |
              DEBUG_EVENT_SESSION_STATUS |
              DEBUG_EVENT_CHANGE_DEBUGGEE_STATE |
              DEBUG_EVENT_CHANGE_ENGINE_STATE |
              DEBUG_EVENT_CHANGE_SYMBOL_STATE;
       return S_OK;
}
STDMETHODIMP EventCallbacks::LoadModule( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,
       IN ULONG ModuleSize,IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum, IN ULONG TimeDateStamp )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::SystemError( THIS_ IN ULONG  Error, IN ULONG  Level )
{
       return DEBUG_STATUS_BREAK;
}
STDMETHODIMP EventCallbacks::UnloadModule( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::SessionStatus( THIS_ IN ULONG SessionStatus )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ChangeDebuggeeState( THIS_ IN ULONG Flags, IN ULONG64 Argument )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ChangeEngineState( THIS_ IN ULONG Flags, IN ULONG64 Argument )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ChangeSymbolState( THIS_ IN ULONG Flags, IN ULONG64 Argument ) // method 16
{
       return DEBUG_STATUS_NO_CHANGE;
}
</Content>
      <Content Type="Declaration">
private:
  static IDebugClient *m_debugClient;
  static EventCallbacks *m_eventCallback;
  static IDebugControl3 *m_debugControl;
  static IDebugSystemObjects* m_debugSystemObjects;
  static IDebugSymbols* m_debugSymbols;
  
public:
  // Retourne l'objet DebugClient
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugClient() const;
  
  // Retourne l'objet DebugControl
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugControl() const;
  
  // Retourne l'objet DebugSystemObjects
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugSystemObjects() const;
  
  // Retourne l'objet DebugSymbols
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugSymbols() const;
</Content>
      <Content Type="Implementation">
  // Retourne l'objet DebugClient
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugClient() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugClientPtrInterpreter&lt;EncodingT&gt;(m_debugClient));
  }
  
  // Retourne l'objet DebugControl
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugControl() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugControlPtrInterpreter&lt;EncodingT&gt;(m_debugControl));
  }
  
  // Retourne l'objet DebugSystemObjects
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugSystemObjects() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugSystemObjectsPtrInterpreter&lt;EncodingT&gt;(m_debugSystemObjects));
  }
 
  // Retourne l'objet DebugSymbols
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugSymbols() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugSymbolsPtrInterpreter&lt;EncodingT&gt;(m_debugSymbols));
  }
</Content>
      <Content Type="Register">
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugClient, const_t, C("DebugEngine::DebugClient") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugControl, const_t, C("DebugEngine::DebugControl") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugSystemObjects, const_t, C("DebugEngine::DebugSystemObjects") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugSymbols, const_t, C("DebugEngine::DebugSymbols") );
</Content>
      <Content Type="Unregister">
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugClient") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugControl") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSystemObjects") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSymbols") );
</Content>
      <Content Target="DebugEngine:initialize@Boolean" Type="Implementation-body">
  if (m_debugClient == NULL)
  {
    HRESULT hr = DebugCreate(IID_IDebugClient, (void**)&amp;m_debugClient);
    if(SUCCEEDED(hr))
    {  
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugControl3, (void**)&amp;m_debugControl);
        if (SUCCEEDED(hr))
        {
            m_eventCallback = new EventCallbacks(m_debugControl);
            hr = m_debugClient-&gt;SetEventCallbacks(m_eventCallback);
        }
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugSystemObjects, (void**)&amp;m_debugSystemObjects);
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugSymbols, (void**)&amp;m_debugSymbols);
    }
  }
  return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_debugClient != NULL));
</Content>
      <Content Target="DebugEngine:terminate@Boolean" Type="Implementation-body">
  if(m_debugSymbols != NULL)
  {
    m_debugSymbols-&gt;Release();
    m_debugSymbols = NULL;
  }
  if(m_debugSystemObjects != NULL)
  {
    m_debugSystemObjects-&gt;Release();
    m_debugSystemObjects = NULL;
  }
  if(m_debugClient != NULL)
  {
    m_debugClient-&gt;EndSession(DEBUG_END_PASSIVE);
    m_debugClient-&gt;Release();
    m_debugClient = NULL;
  }
  if(m_debugControl != NULL)
  {
    m_debugControl-&gt;Release();
    m_debugControl = NULL;
  }
  delete m_eventCallback;
  m_eventCallback = NULL;
  return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_debugClient == NULL));
</Content>
      <Content Target="DebugEngine:DvAlloc@Uint32@Int" Type="Implementation-body">
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	unsigned long nativeSize;
	if (check_numeric(size, nativeSize))
	{
        unsigned long long hProcess;
        HRESULT hr = m_debugSystemObjects-&gt;GetCurrentProcessHandle(&amp;hProcess);
        if (SUCCEEDED(hr))
        {
            res.reset(new Numeric&lt;EncodingT&gt;((int) VirtualAllocEx((HANDLE) hProcess, NULL, nativeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)));
        }
    }
	return res;
</Content>
      <Content Target="DebugEngine:DvFree@Int@Uint32@Boolean" Type="Implementation-body">
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Bool&lt;EncodingT&gt;(false));
	unsigned long nativeSize;
  int nativeBaseAddress;
	if (check_numeric(baseAddress, nativeBaseAddress) &amp;&amp; check_numeric(size, nativeSize))
	{
        unsigned long long hProcess;
        HRESULT hr = m_debugSystemObjects-&gt;GetCurrentProcessHandle(&amp;hProcess);
        if (SUCCEEDED(hr))
        {
            res.reset(new Bool&lt;EncodingT&gt;(VirtualFreeEx((HANDLE) hProcess, (LPVOID)nativeBaseAddress, nativeSize, MEM_RELEASE)));
        }
  }
	return res;
</Content>
    </File>
    <File Name="IDebugClientPtr">
      <Entity Class="Data" Name="IDebugClientPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugClient&gt; IDebugClientPtr;
#include "IDebugControlPtrInterpreter.hpp"
</Content>
      <Content Target="IDebugClientPtr:CreateProcess@AnsiString@Uint32@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	typename EncodingT::string_t nativeCommandLine;
	unsigned long nativeCreateFlags;
	if (check_string&lt;EncodingT&gt;(commandLine, nativeCommandLine) &amp;&amp; 
		  check_numeric(createFlags, nativeCreateFlags))
	{
        char ansiCommandLine[MAX_PATH];
        std::copy(nativeCommandLine.begin(), nativeCommandLine.end(), ansiCommandLine);
        res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;CreateProcess(0, ansiCommandLine, nativeCreateFlags)));
	}
	return res;
</Content>
      <Content Target="IDebugClientPtr:GetRunningProcessSystemIds@Uint32*@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	unsigned long nativeId, nativeActualCount;
  res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetRunningProcessSystemIds(0, &amp;nativeId, 1, &amp;nativeActualCount)));
	reset_numeric(processId, nativeId);
	return res;
</Content>
      <Content Target="IDebugClientPtr:GetRunningProcessDescription@Uint32@Uint32@AnsiString@AnsiString@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	unsigned long nativeSystemId;
	unsigned long nativeFlags;
	if (check_numeric(systemId, nativeSystemId) &amp;&amp; 
		  check_numeric(flags, nativeFlags))
	{
    char ansiNativeExeName[MAX_PATH];
    char ansiNativeDescription[MAX_PATH];
    unsigned long nativeActualExeNameSize, nativeActualDescriptionSize;
		res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetRunningProcessDescription(0, nativeSystemId, nativeFlags, ansiNativeExeName, MAX_PATH, &amp;nativeActualExeNameSize, ansiNativeDescription, MAX_PATH, &amp;nativeActualDescriptionSize)));
		reset_string&lt;ansi&gt;(exeName, ansiNativeExeName);
		reset_string&lt;ansi&gt;(description, ansiNativeDescription);
	}
	return res;
</Content>
    </File>
    <File Name="IDebugControlPtr">
      <Entity Class="Data" Name="IDebugControlPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugControl3&gt; IDebugControlPtr;
#include "IDebugBreakpointPtrInterpreter.hpp"
</Content>
      <Content Target="IDebugControlPtr:GetPromptText@AnsiString@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	char nativeBuffer[2048];
  res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetPromptText(nativeBuffer, 2048, NULL)));
	reset_string&lt;ansi&gt;(buffer, nativeBuffer);
	return res;
</Content>
    </File>
    <File Name="DebugStatus">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="CreateFlags">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="WaitFlags">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="TimeOut">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DEBUG_VALUE">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugValue">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugExecute">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugOutCTL">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="IDebugSystemObjectsPtr">
      <Entity Class="Data" Name="IDebugSystemObjectsPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugSystemObjects&gt; IDebugSystemObjectsPtr;
</Content>
      <Content Target="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	char nativeBuffer[MAX_PATH];
  res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetCurrentProcessExecutableName(nativeBuffer, MAX_PATH, NULL)));
	reset_string&lt;ansi&gt;(buffer, nativeBuffer);
	return res;
</Content>
    </File>
    <File Name="IDebugSymbolsPtr">
      <Entity Class="Data" Name="IDebugSymbolsPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugSymbols&gt; IDebugSymbolsPtr;
</Content>
    </File>
    <File Name="ImageFileMachine">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugBreakpoint">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugBreakpointFlag">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="IDebugBreakpointPtr">
      <Entity Class="Data" Name="IDebugBreakpointPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugBreakpoint&gt; IDebugBreakpointPtr;
</Content>
    </File>
  </Workspace>

</document_schema>
