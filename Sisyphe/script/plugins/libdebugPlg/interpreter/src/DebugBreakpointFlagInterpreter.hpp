/*
 * DebugBreakpointFlagInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUGBREAKPOINTFLAG_INTERPRETER_H_
#define _DEBUGBREAKPOINTFLAG_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	template <class EncodingT>
	class DebugBreakpointFlagInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		DebugBreakpointFlagInterpreter();

		~DebugBreakpointFlagInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

		shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_GO_ONLY() const;

		shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_DEFERRED() const;

		shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_ENABLED() const;

		shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_ADDER_ONLY() const;

		shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_ONE_SHOT() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DebugBreakpointFlagInterpreter, C("DebugBreakpointFlag") );
			METHOD_KEY_REGISTER ( DebugBreakpointFlagInterpreter, shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_GO_ONLY, const_t, C("DebugBreakpointFlag::DEBUG_BREAKPOINT_GO_ONLY") );
			METHOD_KEY_REGISTER ( DebugBreakpointFlagInterpreter, shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_DEFERRED, const_t, C("DebugBreakpointFlag::DEBUG_BREAKPOINT_DEFERRED") );
			METHOD_KEY_REGISTER ( DebugBreakpointFlagInterpreter, shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_ENABLED, const_t, C("DebugBreakpointFlag::DEBUG_BREAKPOINT_ENABLED") );
			METHOD_KEY_REGISTER ( DebugBreakpointFlagInterpreter, shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_ADDER_ONLY, const_t, C("DebugBreakpointFlag::DEBUG_BREAKPOINT_ADDER_ONLY") );
			METHOD_KEY_REGISTER ( DebugBreakpointFlagInterpreter, shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_ONE_SHOT, const_t, C("DebugBreakpointFlag::DEBUG_BREAKPOINT_ONE_SHOT") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("DebugBreakpointFlag") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpointFlag::DEBUG_BREAKPOINT_GO_ONLY") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpointFlag::DEBUG_BREAKPOINT_DEFERRED") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpointFlag::DEBUG_BREAKPOINT_ENABLED") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpointFlag::DEBUG_BREAKPOINT_ADDER_ONLY") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpointFlag::DEBUG_BREAKPOINT_ONE_SHOT") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "DebugBreakpointFlagInterpreter_impl.hpp"

#endif