/*
 * IDebugSymbolsPtrInterpreter_impl.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
IDebugSymbolsPtrInterpreter<EncodingT>::IDebugSymbolsPtrInterpreter()
{
}

template <class EncodingT>
void IDebugSymbolsPtrInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
IDebugSymbolsPtrInterpreter<EncodingT>::~IDebugSymbolsPtrInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void IDebugSymbolsPtrInterpreter<EncodingT>::initValue(const IDebugSymbolsPtr& object)
{
	m_object = object;
}

template <class EncodingT>
IDebugSymbolsPtr& IDebugSymbolsPtrInterpreter<EncodingT>::value()
{
	return m_object;
}

template <class EncodingT>
const IDebugSymbolsPtr& IDebugSymbolsPtrInterpreter<EncodingT>::value() const
{
	return m_object;
}

template <class EncodingT>
IDebugSymbolsPtrInterpreter<EncodingT>::IDebugSymbolsPtrInterpreter(const IDebugSymbolsPtr& object)
{
	initValue(object);
}

template <class EncodingT>
IDebugSymbolsPtrInterpreter<EncodingT>::IDebugSymbolsPtrInterpreter(const IDebugSymbolsPtrInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
IDebugSymbolsPtrInterpreter<EncodingT>& IDebugSymbolsPtrInterpreter<EncodingT>::operator=(const IDebugSymbolsPtrInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const IDebugSymbolsPtr& IDebugSymbolsPtrInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void IDebugSymbolsPtrInterpreter<EncodingT>::setValue(IDebugSymbolsPtr const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t IDebugSymbolsPtrInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugSymbolsPtrInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new IDebugSymbolsPtrInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t IDebugSymbolsPtrInterpreter<EncodingT>::getClassName() const
{
	return C("IDebugSymbolsPtr");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugSymbolsPtrInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("IDebugSymbolsPtr"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in IDebugSymbolsPtr, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugSymbolsPtrInterpreter<EncodingT>::appendSymbolPath(const shared_ptr< Base<EncodingT> >& addition)
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	typename ansi::string_t nativeAddition;
	if (check_string<ansi>(addition, nativeAddition))
	{
		res.reset(new Numeric<EncodingT>(value()->AppendSymbolPath(nativeAddition.c_str())));
	}
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugSymbolsPtrInterpreter<EncodingT>::getSymbolModule(const shared_ptr< Base<EncodingT> >& symbol, shared_ptr< Base<EncodingT> >& base)
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	typename ansi::string_t nativeSymbol;
	unsigned long long nativeBase;
	if (check_string<ansi>(symbol, nativeSymbol) && 
		check_numeric(base, nativeBase))
	{
		res.reset(new Numeric<EncodingT>(value()->GetSymbolModule(nativeSymbol.c_str(), &nativeBase)));
		reset_numeric(base, nativeBase);
	}
	return res;
}


template <class EncodingT>
bool check_IDebugSymbolsPtr(shared_ptr< Base<EncodingT> > const& val, IDebugSymbolsPtr& a)
{
	shared_ptr< IDebugSymbolsPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugSymbolsPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugSymbolsPtr expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_IDebugSymbolsPtr(shared_ptr< Base<EncodingT> >& val, IDebugSymbolsPtr const& a)
{
	shared_ptr< IDebugSymbolsPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugSymbolsPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugSymbolsPtr expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C