<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE document_schema SYSTEM "document_schema.dtd">
<document_schema>

  <Workspace Author="Teddy DIDE" Brief="Debug Interpreter generated by gensources." Name="Debug_interpreter" Option="1" Type="Project" Version="1.00">
    <File Name="DebugEngine">
      <Entity Class="Data" Name="DebugEngine">
        <Comments> Classe permettant de démarrer le moteur de débogage. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="initialize" Name="DebugEngine:initialize@Boolean">
        <Comments> Initialise le moteur de débogage.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="initialize" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="terminate" Name="DebugEngine:terminate@Boolean">
        <Comments> Libère les objets debug.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Const Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="terminate" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="DvAlloc" Name="DebugEngine:DvAlloc@UInt32@Int">
        <Comments> Allocate additional memory to the target process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="DvAlloc" Type="Int"/>
        <Attribute Modifier="Const " Name="size" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="DvFree" Name="DebugEngine:DvFree@Int@UInt32@Boolean">
        <Comments> Frees a memory allocation owned by the target process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="DvFree" Type="Boolean"/>
        <Attribute Modifier="Const " Name="baseAddress" Type="Int"/>
        <Attribute Modifier="Const " Name="size" Type="UInt32"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:initialize@Boolean_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:initialize@Boolean" TargetREF="DebugEngine"/>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:terminate@Boolean_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:terminate@Boolean" TargetREF="DebugEngine"/>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:DvAlloc@UInt32@Int_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:DvAlloc@UInt32@Int" TargetREF="DebugEngine"/>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:DvFree@Int@UInt32@Boolean_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:DvFree@Int@UInt32@Boolean" TargetREF="DebugEngine"/>
      <Content Type="Global-inclusion">
#include "IDebugClientPtrInterpreter.hpp"
#include "IDebugControlPtrInterpreter.hpp"
#include "IDebugSystemObjectsPtrInterpreter.hpp"
#include "IDebugSymbolsPtrInterpreter.hpp"

class EventCallbacks : public DebugBaseEventCallbacks   // event callback class has 16 methods
{
private:
  CDebugPtr&lt;IDebugControl3&gt;  m_Control;
  CDebugPtr&lt;IDebugBreakpoint&gt; m_Breakpoint;

public:
       EventCallbacks(IDebugControl3 *control);
       STDMETHOD_(ULONG, AddRef)         ( THIS );
       STDMETHOD_(ULONG, Release)        ( THIS );
       STDMETHOD(Breakpoint)             ( THIS_ IN PDEBUG_BREAKPOINT Bp );
       STDMETHOD(ChangeDebuggeeState)    ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(ChangeEngineState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(ChangeSymbolState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(CreateThread)           ( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset,IN ULONG64  StartOffset);
       STDMETHOD(Exception)              ( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance );
       STDMETHOD(ExitProcess)            ( THIS_ IN ULONG  ExitCode );
       STDMETHOD(ExitThread)             ( THIS_ IN ULONG  ExitCode );
       STDMETHOD(GetInterestMask)        ( THIS_ OUT PULONG Mask );
       STDMETHOD(SessionStatus)          ( THIS_ IN ULONG Status );
       STDMETHOD(SystemError)            ( THIS_ IN ULONG  Error, IN ULONG  Level );
       STDMETHOD(UnloadModule)           ( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset );
       STDMETHOD(LoadModule)             (  THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,
                                          IN ULONG ModuleSize,  IN PCSTR ModuleName,IN PCSTR ImageName,  IN ULONG CheckSum,
                                          IN ULONG TimeDateStamp );
       STDMETHOD(CreateProcess)          ( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle, IN ULONG64 BaseOffset, IN ULONG ModuleSize, 
                                          IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum,
                                          IN ULONG TimeDateStamp,  IN ULONG64 InitialThreadHandle,   IN ULONG64 ThreadDataOffset,
                                          IN ULONG64 StartOffset );
};
</Content>
      <Content Type="Global-body">
template &lt;class EncodingT&gt;
IDebugClient* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugClient = NULL;
template &lt;class EncodingT&gt;
IDebugControl3* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugControl = NULL;
template &lt;class EncodingT&gt;
EventCallbacks* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_eventCallback = NULL;
template &lt;class EncodingT&gt;
IDebugSystemObjects* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugSystemObjects = NULL;
template &lt;class EncodingT&gt;
IDebugSymbols* interp::DebugEngineInterpreter&lt;EncodingT&gt;::m_debugSymbols = NULL;

EventCallbacks::EventCallbacks(IDebugControl3 *control)
: m_Control(control)
{
}

STDMETHODIMP_(ULONG) EventCallbacks::AddRef(    THIS )  // event callback method 1
{
       return 1;
}
STDMETHODIMP_(ULONG) EventCallbacks::Release( THIS )  //event callback method 2
{
       return 0;
}
STDMETHODIMP EventCallbacks::Breakpoint( THIS_ IN PDEBUG_BREAKPOINT Bp ) //event callback method 3
{
       return DEBUG_STATUS_BREAK;
}
STDMETHODIMP EventCallbacks::CreateProcess(THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle,
       IN ULONG64 BaseOffset,IN ULONG ModuleSize,IN PCSTR ModuleName,IN PCSTR ImageName,
       IN ULONG CheckSum, IN ULONG TimeDateStamp,IN ULONG64 InitialThreadHandle,
       IN ULONG64 ThreadDataOffset,  IN ULONG64 StartOffset
       ) //event callback method 4  and so on till method 16
{
       HRESULT status = 0; //we are setting a break point in Address Of Entrypoint of the debuggee
       IDebugBreakpoint* breakpoint = NULL;
       if (( status = m_Control-&gt;AddBreakpoint(DEBUG_BREAKPOINT_CODE,DEBUG_ANY_ID, &amp;breakpoint)) == S_OK)
       {
              if (( status = breakpoint-&gt;SetOffset(StartOffset)) == S_OK)
              {
                     if (( status = breakpoint-&gt;SetFlags(DEBUG_BREAKPOINT_ENABLED)) == S_OK)
                     {
                            m_Breakpoint.reset(breakpoint);
                            breakpoint-&gt;Release();
                     }
              }
       }
       return DEBUG_STATUS_NO_CHANGE;
}

STDMETHODIMP EventCallbacks::CreateThread( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset, IN ULONG64  StartOffset )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::Exception( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance )
{
       return DEBUG_STATUS_BREAK;
}
STDMETHODIMP EventCallbacks::ExitProcess (THIS_ IN ULONG  ExitCode )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ExitThread (THIS_ IN ULONG  ExitCode )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::GetInterestMask( THIS_ OUT PULONG Mask )
{
       *Mask =
              DEBUG_EVENT_BREAKPOINT |
              DEBUG_EVENT_EXCEPTION |
              DEBUG_EVENT_CREATE_THREAD |
              DEBUG_EVENT_EXIT_THREAD |
              DEBUG_EVENT_CREATE_PROCESS |
              DEBUG_EVENT_EXIT_PROCESS |
              DEBUG_EVENT_LOAD_MODULE |
              DEBUG_EVENT_UNLOAD_MODULE |
              DEBUG_EVENT_SYSTEM_ERROR |
              DEBUG_EVENT_SESSION_STATUS |
              DEBUG_EVENT_CHANGE_DEBUGGEE_STATE |
              DEBUG_EVENT_CHANGE_ENGINE_STATE |
              DEBUG_EVENT_CHANGE_SYMBOL_STATE;
       return S_OK;
}
STDMETHODIMP EventCallbacks::LoadModule( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,
       IN ULONG ModuleSize,IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum, IN ULONG TimeDateStamp )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::SystemError( THIS_ IN ULONG  Error, IN ULONG  Level )
{
       return DEBUG_STATUS_BREAK;
}
STDMETHODIMP EventCallbacks::UnloadModule( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::SessionStatus( THIS_ IN ULONG SessionStatus )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ChangeDebuggeeState( THIS_ IN ULONG Flags, IN ULONG64 Argument )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ChangeEngineState( THIS_ IN ULONG Flags, IN ULONG64 Argument )
{
       return DEBUG_STATUS_NO_CHANGE;
}
STDMETHODIMP EventCallbacks::ChangeSymbolState( THIS_ IN ULONG Flags, IN ULONG64 Argument ) // method 16
{
       return DEBUG_STATUS_NO_CHANGE;
}
</Content>
      <Content Type="Declaration">
private:
  static IDebugClient *m_debugClient;
  static EventCallbacks *m_eventCallback;
  static IDebugControl3 *m_debugControl;
  static IDebugSystemObjects* m_debugSystemObjects;
  static IDebugSymbols* m_debugSymbols;
  
public:
  // Retourne l'objet DebugClient
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugClient() const;
  
  // Retourne l'objet DebugControl
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugControl() const;
  
  // Retourne l'objet DebugSystemObjects
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugSystemObjects() const;
  
  // Retourne l'objet DebugSymbols
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugSymbols() const;
</Content>
      <Content Type="Implementation">
  // Retourne l'objet DebugClient
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugClient() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugClientPtrInterpreter&lt;EncodingT&gt;(m_debugClient));
  }
  
  // Retourne l'objet DebugControl
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugControl() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugControlPtrInterpreter&lt;EncodingT&gt;(m_debugControl));
  }
  
  // Retourne l'objet DebugSystemObjects
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugSystemObjects() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugSystemObjectsPtrInterpreter&lt;EncodingT&gt;(m_debugSystemObjects));
  }
 
  // Retourne l'objet DebugSymbols
  template &lt;class EncodingT&gt;
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugSymbols() const
  {
    return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugSymbolsPtrInterpreter&lt;EncodingT&gt;(m_debugSymbols));
  }
</Content>
      <Content Type="Register">
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugClient, const_t, C("DebugEngine::DebugClient") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugControl, const_t, C("DebugEngine::DebugControl") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugSystemObjects, const_t, C("DebugEngine::DebugSystemObjects") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugSymbols, const_t, C("DebugEngine::DebugSymbols") );
</Content>
      <Content Type="Unregister">
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugClient") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugControl") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSystemObjects") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSymbols") );
</Content>
      <Content Target="DebugEngine:initialize@Boolean" Type="Implementation-body">
  if (m_debugClient == NULL)
  {
    HRESULT hr = DebugCreate(IID_IDebugClient, (void**)&amp;m_debugClient);
    if(SUCCEEDED(hr))
    {  
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugControl3, (void**)&amp;m_debugControl);
        if (SUCCEEDED(hr))
        {
            m_eventCallback = new EventCallbacks(m_debugControl);
            hr = m_debugClient-&gt;SetEventCallbacks(m_eventCallback);
        }
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugSystemObjects, (void**)&amp;m_debugSystemObjects);
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugSymbols, (void**)&amp;m_debugSymbols);
    }
  }
  return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_debugClient != NULL));
</Content>
      <Content Target="DebugEngine:terminate@Boolean" Type="Implementation-body">
  if(m_debugSymbols != NULL)
  {
    m_debugSymbols-&gt;Release();
    m_debugSymbols = NULL;
  }
  if(m_debugSystemObjects != NULL)
  {
    m_debugSystemObjects-&gt;Release();
    m_debugSystemObjects = NULL;
  }
  if(m_debugClient != NULL)
  {
    m_debugClient-&gt;EndSession(DEBUG_END_PASSIVE);
    m_debugClient-&gt;Release();
    m_debugClient = NULL;
  }
  if(m_debugControl != NULL)
  {
    m_debugControl-&gt;Release();
    m_debugControl = NULL;
  }
  delete m_eventCallback;
  m_eventCallback = NULL;
  return shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_debugClient == NULL));
</Content>
      <Content Target="DebugEngine:DvAlloc@Uint32@Int" Type="Implementation-body">
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	unsigned long nativeSize;
	if (check_numeric(size, nativeSize))
	{
        unsigned long long hProcess;
        HRESULT hr = m_debugSystemObjects-&gt;GetCurrentProcessHandle(&amp;hProcess);
        if (SUCCEEDED(hr))
        {
            res.reset(new Numeric&lt;EncodingT&gt;((int) VirtualAllocEx((HANDLE) hProcess, NULL, nativeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)));
        }
    }
	return res;
</Content>
      <Content Target="DebugEngine:DvFree@Int@Uint32@Boolean" Type="Implementation-body">
  shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Bool&lt;EncodingT&gt;(false));
	unsigned long nativeSize;
  int nativeBaseAddress;
	if (check_numeric(baseAddress, nativeBaseAddress) &amp;&amp; check_numeric(size, nativeSize))
	{
        unsigned long long hProcess;
        HRESULT hr = m_debugSystemObjects-&gt;GetCurrentProcessHandle(&amp;hProcess);
        if (SUCCEEDED(hr))
        {
            res.reset(new Bool&lt;EncodingT&gt;(VirtualFreeEx((HANDLE) hProcess, (LPVOID)nativeBaseAddress, nativeSize, MEM_RELEASE)));
        }
  }
	return res;
</Content>
    </File>
    <File Name="IDebugClientPtr">
      <Entity Class="Data" Name="IDebugClientPtr">
        <Comments> Classe permettant d'accéder à un client de débogage. </Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="CreateProcess" Name="IDebugClientPtr:CreateProcess@AnsiString@UInt32@Int32">
        <Comments> La méthode CreateProcess crée un processus à partir de la ligne de commande en paramètre.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="CreateProcess" Type="Int32"/>
        <Attribute Modifier="Const " Name="commandLine" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="createFlags" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetRunningProcessSystemIds" Name="IDebugClientPtr:GetRunningProcessSystemIds@UInt32*@Int32">
        <Comments> The GetRunningProcessSystemIds method returns the process ID.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetRunningProcessSystemIds" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="processId" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetRunningProcessDescription" Name="IDebugClientPtr:GetRunningProcessDescription@UInt32@UInt32@AnsiString@AnsiString@Int32">
        <Comments> The GetRunningProcessDescription method returns a description of the process that includes the executable image name, the service names, the MTS package names, and the command line.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetRunningProcessDescription" Type="Int32"/>
        <Attribute Modifier="Const " Name="systemId" Type="UInt32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
        <Attribute Modifier="" Name="exeName" Type="AnsiString"/>
        <Attribute Modifier="" Name="description" Type="AnsiString"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:CreateProcess@AnsiString@UInt32@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:CreateProcess@AnsiString@UInt32@Int32" TargetREF="IDebugClientPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:GetRunningProcessSystemIds@UInt32*@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:GetRunningProcessSystemIds@UInt32*@Int32" TargetREF="IDebugClientPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:GetRunningProcessDescription@UInt32@UInt32@AnsiString@AnsiString@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:GetRunningProcessDescription@UInt32@UInt32@AnsiString@AnsiString@Int32" TargetREF="IDebugClientPtr"/>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugClient&gt; IDebugClientPtr;
#include "IDebugControlPtrInterpreter.hpp"
</Content>
      <Content Target="IDebugClientPtr:CreateProcess@AnsiString@Uint32@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	typename EncodingT::string_t nativeCommandLine;
	unsigned long nativeCreateFlags;
	if (check_string&lt;EncodingT&gt;(commandLine, nativeCommandLine) &amp;&amp; 
		  check_numeric(createFlags, nativeCreateFlags))
	{
        char ansiCommandLine[MAX_PATH];
        std::copy(nativeCommandLine.begin(), nativeCommandLine.end(), ansiCommandLine);
        res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;CreateProcess(0, ansiCommandLine, nativeCreateFlags)));
	}
	return res;
</Content>
      <Content Target="IDebugClientPtr:GetRunningProcessSystemIds@Uint32*@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	unsigned long nativeId, nativeActualCount;
  res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetRunningProcessSystemIds(0, &amp;nativeId, 1, &amp;nativeActualCount)));
	reset_numeric(processId, nativeId);
	return res;
</Content>
      <Content Target="IDebugClientPtr:GetRunningProcessDescription@Uint32@Uint32@AnsiString@AnsiString@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	unsigned long nativeSystemId;
	unsigned long nativeFlags;
	if (check_numeric(systemId, nativeSystemId) &amp;&amp; 
		  check_numeric(flags, nativeFlags))
	{
    char ansiNativeExeName[MAX_PATH];
    char ansiNativeDescription[MAX_PATH];
    unsigned long nativeActualExeNameSize, nativeActualDescriptionSize;
		res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetRunningProcessDescription(0, nativeSystemId, nativeFlags, ansiNativeExeName, MAX_PATH, &amp;nativeActualExeNameSize, ansiNativeDescription, MAX_PATH, &amp;nativeActualDescriptionSize)));
		reset_string&lt;ansi&gt;(exeName, ansiNativeExeName);
		reset_string&lt;ansi&gt;(description, ansiNativeDescription);
	}
	return res;
</Content>
    </File>
    <File Name="IDebugControlPtr">
      <Entity Class="Data" Name="IDebugControlPtr">
        <Comments> Classe permettant d'accéder aux contrôles de débogage. </Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="WaitForEvent" Name="IDebugControlPtr:WaitForEvent@UInt32@UInt32@Int32">
        <Comments> Waits for an event that breaks into the debugger engine application. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="WaitForEvent" Type="Int32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
        <Attribute Modifier="Const " Name="timeout" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetTextMacro" Name="IDebugControlPtr:SetTextMacro@UInt32@AnsiString@Int32">
        <Comments> The SetTextMacro method sets the value of a fixed-name alias.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetTextMacro" Type="Int32"/>
        <Attribute Modifier="Const " Name="slot" Type="UInt32"/>
        <Attribute Modifier="Const " Name="macro" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="Evaluate" Name="IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32">
        <Comments> The Evaluate method evaluates an expression, returning the result.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="Evaluate" Type="Int32"/>
        <Attribute Modifier="Const " Name="expression" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="desiredType" Type="UInt32"/>
        <Attribute Modifier="Ref Virtual " Name="debugValue" Type="UInt64"/>
        <Attribute Modifier="Virtual " Name="remainderIndex" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="Execute" Name="IDebugControlPtr:Execute@UInt32@AnsiString@UInt32@Int32">
        <Comments> The Execute method executes the specified debugger commands.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="Execute" Type="Int32"/>
        <Attribute Modifier="Const " Name="outputControl" Type="UInt32"/>
        <Attribute Modifier="Const " Name="command" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="Assemble" Name="IDebugControlPtr:Assemble@UInt64@AnsiString@UInt64*@Int32">
        <Comments> The Assemble method assembles a single processor instruction. The assembled instruction is placed in the target's memory.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="Assemble" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="instr" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="endOffset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetExecutionStatus" Name="IDebugControlPtr:GetExecutionStatus@UInt32*@Int32">
        <Comments> The GetExecutionStatus method returns information about the execution status of the debugger engine.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetExecutionStatus" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="status" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetActualProcessorType" Name="IDebugControlPtr:GetActualProcessorType@UInt32*@Int32">
        <Comments> The GetActualProcessorType method returns the processor type of the physical processor of the computer that is running the target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetActualProcessorType" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="type" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetEffectiveProcessorType" Name="IDebugControlPtr:SetEffectiveProcessorType@UInt32@Int32">
        <Comments> The SetEffectiveProcessorType method sets the effective processor type of the processor of the computer that is running the target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetEffectiveProcessorType" Type="Int32"/>
        <Attribute Modifier="Const " Name="type" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetPromptText" Name="IDebugControlPtr:GetPromptText@AnsiString@Int32">
        <Comments> Returns the standard prompt text that will be prepended to the formatted output specified in the OutputPrompt and OutputPromptVaList methods.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetPromptText" Type="Int32"/>
        <Attribute Modifier="" Name="buffer" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="OpenLogFile" Name="IDebugControlPtr:OpenLogFile@AnsiString@Boolean@Int32">
        <Comments> Opens a log file that will receive output from the client objects.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="OpenLogFile" Type="Int32"/>
        <Attribute Modifier="Const " Name="file" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="append" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="CloseLogFile" Name="IDebugControlPtr:CloseLogFile@Int32">
        <Comments> Closes the currently-open log file.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="CloseLogFile" Type="Int32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetReturnOffset" Name="IDebugControlPtr:GetReturnOffset@UInt64*@Int32">
        <Comments> Returns the return address for the current function.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetReturnOffset" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="AddBreakpoint" Name="IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32">
        <Comments> Creates a new breakpoint for the current target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AddBreakpoint" Type="Int32"/>
        <Attribute Modifier="Const " Name="type" Type="UInt32"/>
        <Attribute Modifier="Const " Name="desiredId" Type="UInt32"/>
        <Attribute Modifier="Ref Virtual " Name="bp" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="RemoveBreakpoint" Name="IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32">
        <Comments> Removes a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="RemoveBreakpoint" Type="Int32"/>
        <Attribute Modifier="Ref Const " Name="bp" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetExpressionSyntax" Name="IDebugControlPtr:SetExpressionSyntax@UInt32@Int32">
        <Comments> The SetExpressionSyntax method sets the syntax that the engine will use to evaluate expressions.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetExpressionSyntax" Type="Int32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:WaitForEvent@UInt32@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:WaitForEvent@UInt32@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:SetTextMacro@UInt32@AnsiString@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:SetTextMacro@UInt32@AnsiString@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32_DEBUG_VALUE" Source="DEBUG_VALUE" SourceREF="Id" Target="IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32" TargetREF="debugValue"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Execute@UInt32@AnsiString@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:Execute@UInt32@AnsiString@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Assemble@UInt64@AnsiString@UInt64*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:Assemble@UInt64@AnsiString@UInt64*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetExecutionStatus@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetExecutionStatus@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetActualProcessorType@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetActualProcessorType@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:SetEffectiveProcessorType@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:SetEffectiveProcessorType@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetPromptText@AnsiString@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetPromptText@AnsiString@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:OpenLogFile@AnsiString@Boolean@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:OpenLogFile@AnsiString@Boolean@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:CloseLogFile@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:CloseLogFile@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetReturnOffset@UInt64*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetReturnOffset@UInt64*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32" TargetREF="bp"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32" TargetREF="bp"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:SetExpressionSyntax@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:SetExpressionSyntax@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugControl3&gt; IDebugControlPtr;
#include "IDebugBreakpointPtrInterpreter.hpp"
</Content>
      <Content Target="IDebugControlPtr:GetPromptText@AnsiString@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	char nativeBuffer[2048];
  res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetPromptText(nativeBuffer, 2048, NULL)));
	reset_string&lt;ansi&gt;(buffer, nativeBuffer);
	return res;
</Content>
    </File>
    <File Name="DebugStatus">
      <Entity Class="Enumeration" Name="DebugStatus">
        <Comments> Spécifie l'état du moteur de débogage</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_STATUS_NO_CHANGE" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_STATUS_GO" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_STATUS_GO_HANDLED" Type="UInt64"/>
        <Attribute Default="3" Modifier="Const Static " Name="DEBUG_STATUS_GO_NOT_HANDLED" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_STATUS_STEP_OVER" Type="UInt64"/>
        <Attribute Default="5" Modifier="Const Static " Name="DEBUG_STATUS_STEP_INTO" Type="UInt64"/>
        <Attribute Default="6" Modifier="Const Static " Name="DEBUG_STATUS_BREAK" Type="UInt64"/>
        <Attribute Default="7" Modifier="Const Static " Name="DEBUG_STATUS_NO_DEBUGGEE" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_STATUS_STEP_BRANCH" Type="UInt64"/>
        <Attribute Default="9" Modifier="Const Static " Name="DEBUG_STATUS_IGNORE_EVENT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="CreateFlags">
      <Entity Class="Enumeration" Name="CreateFlags">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_PROCESS" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_ONLY_THIS_PROCESS" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="WaitFlags">
      <Entity Class="Enumeration" Name="WaitFlags">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_WAIT_DEFAULT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="TimeOut">
      <Entity Class="Enumeration" Name="TimeOut">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="-1" Modifier="Const Static " Name="INFINITE" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DEBUG_VALUE">
      <Entity Class="Data" Name="DEBUG_VALUE">
        <Comments> The DEBUG_VALUE structure holds register and expression values.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="" Name="I8" Type="SByte"/>
        <Attribute Modifier="" Name="I16" Type="UInt16"/>
        <Attribute Modifier="" Name="I32" Type="UInt32"/>
        <Attribute Modifier="" Name="I64" Type="UInt64"/>
        <Attribute Modifier="" Name="F32" Type="Single"/>
        <Attribute Modifier="" Name="F64" Type="Double"/>
        <Attribute Modifier="" Name="Type" Type="UInt32"/>
        <Attribute Modifier="" Name="TailOfRawBytes" Type="UInt32"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugValue">
      <Entity Class="Enumeration" Name="DebugValue">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_VALUE_INT8" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_VALUE_INT16" Type="UInt64"/>
        <Attribute Default="3" Modifier="Const Static " Name="DEBUG_VALUE_INT32" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_VALUE_INT64" Type="UInt64"/>
        <Attribute Default="5" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT32" Type="UInt64"/>
        <Attribute Default="6" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT64" Type="UInt64"/>
        <Attribute Default="7" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT80" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT82" Type="UInt64"/>
        <Attribute Default="9" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT128" Type="UInt64"/>
        <Attribute Default="10" Modifier="Const Static " Name="DEBUG_VALUE_VECTOR64" Type="UInt64"/>
        <Attribute Default="11" Modifier="Const Static " Name="DEBUG_VALUE_VECTOR128" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugExecute">
      <Entity Class="Enumeration" Name="DebugExecute">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_EXECUTE_DEFAULT" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_EXECUTE_ECHO" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_EXECUTE_NOT_LOGGED" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_EXECUTE_NO_REPEAT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugOutCTL">
      <Entity Class="Enumeration" Name="DebugOutCTL">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_OUTCTL_THIS_CLIENT" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_OUTCTL_ALL_CLIENTS" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_OUTCTL_ALL_OTHER_CLIENTS" Type="UInt64"/>
        <Attribute Default="3" Modifier="Const Static " Name="DEBUG_OUTCTL_IGNORE" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_OUTCTL_LOG_ONLY" Type="UInt64"/>
        <Attribute Default="7" Modifier="Const Static " Name="DEBUG_OUTCTL_SEND_MASK" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_OUTCTL_NOT_LOGGED" Type="UInt64"/>
        <Attribute Default="16" Modifier="Const Static " Name="DEBUG_OUTCTL_OVERRIDE_MASK" Type="UInt64"/>
        <Attribute Default="-1" Modifier="Const Static " Name="DEBUG_OUTCTL_AMBIENT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="IDebugSystemObjectsPtr">
      <Entity Class="Data" Name="IDebugSystemObjectsPtr">
        <Comments> Classe permettant d'accéder aux informations du processus en cours de débogage.</Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentProcessId" Name="IDebugSystemObjectsPtr:GetCurrentProcessId@UInt32*@Int32">
        <Comments> Returns the engine process ID for the current process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSystemObjectsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentProcessId" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="processId" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentProcessDataOffset" Name="IDebugSystemObjectsPtr:GetCurrentProcessDataOffset@UInt64*@Int32">
        <Comments> Returns the location of the system data structure describing the current process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSystemObjectsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentProcessDataOffset" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentProcessExecutableName" Name="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32">
        <Comments> Returns the name of executable file loaded in the current process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSystemObjectsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentProcessExecutableName" Type="Int32"/>
        <Attribute Modifier="" Name="buffer" Type="AnsiString"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSystemObjectsPtr:GetCurrentProcessId@UInt32*@Int32_IDebugSystemObjectsPtr" Source="IDebugSystemObjectsPtr" SourceREF="Id" Target="IDebugSystemObjectsPtr:GetCurrentProcessId@UInt32*@Int32" TargetREF="IDebugSystemObjectsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSystemObjectsPtr:GetCurrentProcessDataOffset@UInt64*@Int32_IDebugSystemObjectsPtr" Source="IDebugSystemObjectsPtr" SourceREF="Id" Target="IDebugSystemObjectsPtr:GetCurrentProcessDataOffset@UInt64*@Int32" TargetREF="IDebugSystemObjectsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32_IDebugSystemObjectsPtr" Source="IDebugSystemObjectsPtr" SourceREF="Id" Target="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32" TargetREF="IDebugSystemObjectsPtr"/>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugSystemObjects&gt; IDebugSystemObjectsPtr;
</Content>
      <Content Target="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32" Type="Implementation-body">
	shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	char nativeBuffer[MAX_PATH];
  res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;GetCurrentProcessExecutableName(nativeBuffer, MAX_PATH, NULL)));
	reset_string&lt;ansi&gt;(buffer, nativeBuffer);
	return res;
</Content>
    </File>
    <File Name="IDebugSymbolsPtr">
      <Entity Class="Data" Name="IDebugSymbolsPtr">
        <Comments> Classe permettant d'accéder aux informations de symboles de débogage.</Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="AppendSymbolPath" Name="IDebugSymbolsPtr:AppendSymbolPath@AnsiString@Int32">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AppendSymbolPath" Type="Int32"/>
        <Attribute Modifier="Const " Name="addition" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetSymbolModule" Name="IDebugSymbolsPtr:GetSymbolModule@AnsiString@UInt64*@Int32">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetSymbolModule" Type="Int32"/>
        <Attribute Modifier="Const " Name="symbol" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="base" Type="UInt64"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:AppendSymbolPath@AnsiString@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:AppendSymbolPath@AnsiString@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetSymbolModule@AnsiString@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetSymbolModule@AnsiString@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugSymbols&gt; IDebugSymbolsPtr;
</Content>
    </File>
    <File Name="ImageFileMachine">
      <Entity Class="Enumeration" Name="ImageFileMachine">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="467" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_AM33" Type="UInt64"/>
        <Attribute Default="34404" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_AMD64" Type="UInt64"/>
        <Attribute Default="448" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_ARM" Type="UInt64"/>
        <Attribute Default="452" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_ARMV7" Type="UInt64"/>
        <Attribute Default="3772" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_EBC" Type="UInt64"/>
        <Attribute Default="332" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_I386" Type="UInt64"/>
        <Attribute Default="512" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_IA64" Type="UInt64"/>
        <Attribute Default="36929" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_M32R" Type="UInt64"/>
        <Attribute Default="614" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_MIPS16" Type="UInt64"/>
        <Attribute Default="870" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_MIPSFPU" Type="UInt64"/>
        <Attribute Default="1126" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_MIPSFPU16" Type="UInt64"/>
        <Attribute Default="496" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_POWERPC" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugBreakpoint">
      <Entity Class="Enumeration" Name="DebugBreakpoint">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_BREAKPOINT_CODE" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_BREAKPOINT_DATA" Type="UInt64"/>
        <Attribute Default="-1" Modifier="Const Static " Name="DEBUG_ANY_ID" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="DebugBreakpointFlag">
      <Entity Class="Enumeration" Name="DebugBreakpointFlag">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_BREAKPOINT_GO_ONLY" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_BREAKPOINT_DEFERRED" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_BREAKPOINT_ENABLED" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_BREAKPOINT_ADDER_ONLY" Type="UInt64"/>
        <Attribute Default="16" Modifier="Const Static " Name="DEBUG_BREAKPOINT_ONE_SHOT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="IDebugBreakpointPtr">
      <Entity Class="Data" Name="IDebugBreakpointPtr">
        <Comments> Classe permettant d'accéder aux informations d'un breakpoint.</Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetOffset" Name="IDebugBreakpointPtr:SetOffset@UInt64@Int32">
        <Comments> Sets the location that triggers a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetOffset" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetFlags" Name="IDebugBreakpointPtr:SetFlags@UInt32@Int32">
        <Comments> Sets the flags for a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetFlags" Type="Int32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:SetOffset@UInt64@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:SetOffset@UInt64@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:SetFlags@UInt32@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:SetFlags@UInt32@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Content Type="Global-inclusion">
#include "DebugPtr.h"
typedef CDebugPtr&lt;IDebugBreakpoint&gt; IDebugBreakpointPtr;
</Content>
    </File>
  </Workspace>

</document_schema>
