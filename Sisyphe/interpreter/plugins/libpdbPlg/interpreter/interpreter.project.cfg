///////////////////////////////////////////////////////////////////////////////
// Workspace
///////////////////////////////////////////////////////////////////////////////

Author = Teddy DIDE; 
Brief = Pdb Interpreter generated by gensources.;
Name = Pdb_interpreter;
Option = 0;
Type = Project;
Version = 1.00;

///////////////////////////////////////////////////////////////////////////////
// PdbParser
///////////////////////////////////////////////////////////////////////////////

file[PdbParser]

./content[Global-inclusion] = ${
#include "Bool.hpp"
// Debug Interface Access (DIA) specific
#include <dia2.h>
#include "IDiaDataSourcePtrInterpreter.hpp"
}$

./content[Global-body] = ${
template <class EncodingT>
IDiaDataSource* interp::PdbParserInterpreter<EncodingT>::m_diaDataSource = NULL;
}$

./content[Declaration] = ${
private:
  static IDiaDataSource *m_diaDataSource;
  
public:
  // Retourne l'objet DiaDataSource
  boost::shared_ptr< Base<EncodingT> > getDataSource() const;
}$

./content[Implementation] = ${
// Retourne l'objet DiaDataSource
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::getDataSource() const
{
  return boost::shared_ptr< Base<EncodingT> > (new IDiaDataSourcePtrInterpreter<EncodingT>(IDiaDataSourcePtr(m_diaDataSource)));
}
}$

./content[Register] = ${
METHOD_KEY_REGISTER ( PdbParserInterpreter, boost::shared_ptr< Base<EncodingT> >, getDataSource, const_t, C("PdbParser::DataSource") );
}$

./content[Unregister] = ${
METHOD_KEY_UNREGISTER ( C("PdbParser::DataSource") );
}$

./content[Boolean PdbParser::initialize()][Implementation-body] = ${
  static GUID IID_IDiaDataSource = {0x79F1BB5F,0xB66E,0x48e5,{0xB6,0xA9,0x15,0x45,0xC3,0x23,0xCA,0x3D}};
  static GUID IID_DiaSource71 = {0xe60afbee,0x502d,0x46ae,{0x85,0x8f,0x82,0x72,0xa0,0x9b,0xd7,0x07}};
  static GUID IID_DiaSource80 = {0xbce36434,0x2c24,0x499e,{0xbf,0x49,0x8b,0xd9,0x9b,0x0e,0xeb,0x68}};
  static GUID IID_DiaSource90 = {0x4C41678E,0x887B,0x4365,{0xA0,0x9E,0x92,0x5D,0x28,0xDB,0x33,0xC2}};
  static GUID IID_DiaSource100 = {0xB86AE24D,0xBF2F,0x4ac9,{0xB5,0xA2,0x34,0xB1,0x4E,0x4C,0xE1,0x1D}};
  static GUID IID_DiaSource110 = {0x761D3BCD,0x1304,0x41D5,{0x94,0xE8,0xEA,0xC5,0x4E,0x4A,0xC1,0x72}};
  static GUID IID_DiaSource120 = {0x3bfcea48,0x620f,0x4b6b,{0x81,0xf7,0xb9,0xaf,0x75,0x45,0x4c,0x7d}};
  static GUID IID_DiaSource140 = {0xe6756135,0x1e65,0x4d17,{0x85,0x76,0x61,0x07,0x61,0x39,0x8c,0x3c}};

  if (m_diaDataSource == NULL)
  {
    HMODULE hmodule = LoadLibrary(L"MSDIA140");
    if (hmodule)
    {
      BOOL (WINAPI*DllGetClassObject)(REFCLSID,REFIID,LPVOID) =
          (BOOL(WINAPI*)(REFCLSID,REFIID,LPVOID))GetProcAddress(hmodule, "DllGetClassObject");

      if (DllGetClassObject) 
      {
        IClassFactory *pClassFactory = NULL;
        HRESULT hr = DllGetClassObject(IID_DiaSource140, IID_IClassFactory, &pClassFactory);
        if(SUCCEEDED(hr))
        {
          IDiaDataSource  *ppSource;
          hr = pClassFactory->CreateInstance(NULL, IID_IDiaDataSource, (void**)&ppSource);
          if(SUCCEEDED(hr)) m_diaDataSource = ppSource;
          pClassFactory->Release();
        }
      }
    }
  }
  return boost::shared_ptr< Base<EncodingT> > (new Bool<EncodingT>(m_diaDataSource != NULL));
}$

./content[Boolean PdbParser::terminate()][Implementation-body] = ${
if(m_diaDataSource != NULL)
{
  m_diaDataSource->Release();
  m_diaDataSource = NULL;
  CoUninitialize();
}
return boost::shared_ptr< Base<EncodingT> > (new Bool<EncodingT>(m_diaDataSource == NULL));
}$

// Documentation

./content[Boolean PdbParser::initialize()]
./-[ReturnDescription] = ${
True si l'initialisation est effectuée.
}$
  
./-[Example] = ${
pdbParser = new PdbParser();
pdbParser.Initialize();
pdbDataSource = pdbParser.DataSource;
}$
   
./content[Boolean PdbParser::terminate()]
./-[ReturnDescription] = ${
True si la destruction est effectuée.
}$
   
./-[Example] = ${
pdbParser.Terminate();
pdbParser = null;
}$

///////////////////////////////////////////////////////////////////////////////
// IDiaDataSourcePtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaDataSourcePtr]

./entity[IDiaDataSourcePtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaDataSource> IDiaDataSourcePtr;
#include "IDiaSessionPtrInterpreter.hpp"
}$

// Documentation

./content[Int32 IDiaDataSourcePtr::loadDataFromPdb(String)]
./-[ReturnDescription] = ${
0 si la lecture du fichier PDB est effectuée.
}$

./-[ParameterDescription][pdbPath] = ${
Le chemin du fichier PDB à ouvrir.
}$

./-[Example] = ${
pdbParser = new PdbParser();
pdbParser.Initialize();
pdbDataSource = pdbParser.DataSource;
pdbDataSource.LoadDataFromPdb("projet.pdb");
}$

///////////////////////////////////////////////////////////////////////////////
// IDiaSessionPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaSessionPtr]

./entity[IDiaSessionPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaSession> IDiaSessionPtr;
#include "IDiaSymbolPtrInterpreter.hpp"
#include "IDiaEnumLineNumbersPtrInterpreter.hpp"
#include "IDiaEnumSourceFilesPtrInterpreter.hpp"
#include "IDiaEnumSymbolsByAddrPtrInterpreter.hpp"
#include "IDiaEnumTablesPtrInterpreter.hpp"
}$


./content[Int32 IDiaSessionPtr::findFile(String,Uint32,IDiaEnumSourceFilesPtr*)][Implementation-body] = ${
  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDiaSessionPtr valuePtr = value();
  if (valuePtr != NULL)
	{
    typename EncodingT::string_t nativeName;
    unsigned long nativeOption;
    IDiaEnumSourceFilesPtr nativePpResult;
    if (check_string<EncodingT>(name, nativeName) && 
      check_numeric_i(option, nativeOption) && 
      check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))
    {
      res.reset(new Numeric<EncodingT>(valuePtr->findFile(NULL, nativeName.c_str(), nativeOption, &nativePpResult)));
      reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);
    }
  }
	return res;
}$

./content[Int32 IDiaSessionPtr::findFile(IDiaEnumSourceFilesPtr*)][Implementation-body] = ${
  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDiaSessionPtr valuePtr = value();
  if (valuePtr != NULL)
	{
    IDiaEnumSourceFilesPtr nativePpResult;
    if (check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))
    {
      res.reset(new Numeric<EncodingT>(valuePtr->findFile(NULL, NULL, nsNone, &nativePpResult)));
      reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);
    }
  }
	return res;
}$

./content[Int32 IDiaSessionPtr::findFile(IDiaSymbolPtr,IDiaEnumSourceFilesPtr*)][Implementation-body] = ${
  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDiaSessionPtr valuePtr = value();
	if (valuePtr != NULL)
	{
    IDiaSymbolPtr nativePCompiland;
    IDiaEnumSourceFilesPtr nativePpResult;
    if (check_IDiaSymbolPtr(pCompiland, nativePCompiland) &&
        check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))
    {
      res.reset(new Numeric<EncodingT>(valuePtr->findFile(nativePCompiland, NULL, nsNone, &nativePpResult)));
      reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);
    }
  }
	return res;
}$

./content[Int32 IDiaSessionPtr::findChildren(IDiaSymbolPtr,SymTagEnumType,IDiaEnumSymbolsPtr*)][Implementation-body] = ${
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDiaSessionPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    IDiaSymbolPtr nativeParent;
    SymTagEnumType nativeSymtag;
    IDiaEnumSymbolsPtr nativePpResult;
    if (check_IDiaSymbolPtr(parent, nativeParent) &&
        check_SymTagEnumType(symtag, nativeSymtag) && 
        check_IDiaEnumSymbolsPtr(ppResult, nativePpResult))
    {
      res.reset(new Numeric<EncodingT>(valuePtr->findChildren(nativeParent, nativeSymtag, NULL, nsNone, &nativePpResult)));
      reset_IDiaEnumSymbolsPtr(ppResult, nativePpResult);
    }
  }
	return res;
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaEnumTablesPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaEnumTablesPtr]

./entity[IDiaEnumTablesPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumTables> IDiaEnumTablesPtr;
#include "IDiaTablePtrInterpreter.hpp"
}$

./content[Int32 IDiaEnumTablesPtr::ItemByName(string,IDiaTablePtr*)][Implementation-body] = ${
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	IDiaEnumTablesPtr valuePtr = value();
	if (valuePtr != NULL)
	{
		IDiaTablePtr nativeTable;
		typename EncodingT::string_t nativeLabel;
		if (check_string<EncodingT>(label, nativeLabel) &&
        check_IDiaTablePtr(table, nativeTable))
		{
      VARIANT var;  
      var.vt = VT_BSTR;  
      var.bstrVal = SysAllocString(nativeLabel.c_str());  
			res.reset(new Numeric<EncodingT>(valuePtr->Item(var, &nativeTable)));
			reset_IDiaTablePtr(table, nativeTable);
      VariantClear(&var);
		}
	}
	return res;
}$

./content[Int32 IDiaEnumTablesPtr::ItemByIndex(Int32,IDiaTablePtr*)][Implementation-body] = ${
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	IDiaEnumTablesPtr valuePtr = value();
	if (valuePtr != NULL)
	{ 
		IDiaTablePtr nativeTable;
		long nativeIndex;
		if (check_numeric_i(index, nativeIndex) &&
        check_IDiaTablePtr(table, nativeTable))
		{
      VARIANT var;  
      var.vt = VT_I4;  
      var.lVal = nativeIndex; 
			res.reset(new Numeric<EncodingT>(valuePtr->Item(var, &nativeTable)));
			reset_IDiaTablePtr(table, nativeTable);
      VariantClear(&var);
		}
	}
	return res;
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaEnumSymbolsByAddrPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaEnumSymbolsByAddrPtr]

./entity[IDiaEnumSymbolsByAddrPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumSymbolsByAddr> IDiaEnumSymbolsByAddrPtr;
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaSymbolPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaSymbolPtr]

./entity[IDiaSymbolPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaSymbol> IDiaSymbolPtr;
#include "IDiaEnumSymbolsPtrInterpreter.hpp"
#include "SymTagEnumTypeInterpreter.hpp"
}$

./content[Int32 IDiaSymbolPtr::get_name(String*)][Implementation-body] = ${
	  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
    IDiaSymbolPtr valuePtr = value();
    if (valuePtr != NULL)
    {
      BSTR nativePRetVal;
      res.reset(new Numeric<EncodingT>(valuePtr->get_name(&nativePRetVal)));
      reset_string<EncodingT>(pRetVal, nativePRetVal);
    }
	  return res;
}$

./content[Int32 IDiaSymbolPtr::get_undecoratedName(String*)][Implementation-body] = ${
	  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
    IDiaSymbolPtr valuePtr = value();
    if (valuePtr != NULL)
    {
      BSTR nativePRetVal;
      res.reset(new Numeric<EncodingT>(valuePtr->get_undecoratedName(&nativePRetVal)));
      reset_string<EncodingT>(pRetVal, nativePRetVal);
    }
	  return res;
}$

./content[Int32 IDiaSymbolPtr::findChildren(SymTagEnumType,IDiaEnumSymbolsPtr*)][Implementation-body] = ${
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDiaSymbolPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    SymTagEnumType nativeSymtag;
    IDiaEnumSymbolsPtr nativePpResult;
    if (check_SymTagEnumType(symtag, nativeSymtag) && 
        check_IDiaEnumSymbolsPtr(ppResult, nativePpResult))
    {
      res.reset(new Numeric<EncodingT>(valuePtr->findChildren(nativeSymtag, NULL, nsNone, &nativePpResult)));
      reset_IDiaEnumSymbolsPtr(ppResult, nativePpResult);
    }
  }
	return res;
}$

./content[Int32 IDiaSymbolPtr::get_types(IDiaSymbolPtr)][Implementation-body] = ${
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDiaSymbolPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    std::vector< IDiaSymbolPtr > nativeTypes;
    DWORD count;
    HRESULT hres = valuePtr->get_types(0, &count, NULL);
    if (hres == S_OK) 
    {
      IDiaSymbol** rgpDiaSymbols = (IDiaSymbol**) _alloca(sizeof(IDiaSymbol *) * count);
      hres = valuePtr->get_types(count, &count, rgpDiaSymbols);
      if (hres == S_OK) 
      {
        for (ULONG i = 0; i < count; i++) 
        {
          nativeTypes.push_back(IDiaSymbolPtr(rgpDiaSymbols[i]));
          rgpDiaSymbols[i]->Release();
        }
      }
    }
    res.reset(new Numeric<EncodingT>(hres));
    reset_array(types, nativeTypes, reset_IDiaSymbolPtr<EncodingT>);
  }
	return res;
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaEnumSymbolsPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaEnumSymbolsPtr]

./entity[IDiaEnumSymbolsPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumSymbols> IDiaEnumSymbolsPtr;
#include "IDiaSymbolPtrInterpreter.hpp"
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// SymTagEnumType
///////////////////////////////////////////////////////////////////////////////

file[SymTagEnumType]

./content[Global-inclusion] = ${
typedef enum SymTagEnum SymTagEnumType;

NAMESPACE_BEGIN(interp)

template <class EncodingT>
bool check_SymTagEnumType(boost::shared_ptr< Base<EncodingT> > const& val, SymTagEnumType& s);

NAMESPACE_END
}$

./content[Global-body] = ${
NAMESPACE_BEGIN(interp)

template <class EncodingT>
bool check_SymTagEnumType(boost::shared_ptr< Base<EncodingT> > const& val, SymTagEnumType& s)
{
	boost::shared_ptr< Numeric<EncodingT> > value  = dynamic_pointer_cast< Numeric<EncodingT> >(val);
	if (value)
	{
		s = (SymTagEnumType) value->LLvalue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "Numeric expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// NameSearchOptions
///////////////////////////////////////////////////////////////////////////////

file[NameSearchOptions]

./content[Global-inclusion] = ${
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaLineNumberPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaLineNumberPtr]

./entity[IDiaLineNumberPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaLineNumber> IDiaLineNumberPtr;
#include "IDiaSourceFilePtrInterpreter.hpp"
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaEnumLineNumbersPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaEnumLineNumbersPtr]

./entity[IDiaEnumLineNumbersPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumLineNumbers> IDiaEnumLineNumbersPtr;
#include "IDiaLineNumberPtrInterpreter.hpp"
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaSourceFilePtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaSourceFilePtr]

./entity[IDiaSourceFilePtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaSourceFile> IDiaSourceFilePtr;
}$

./content[Int32 IDiaSourceFilePtr::get_fileName(String*)][Implementation-body] = ${
	  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
    IDiaSourceFilePtr valuePtr = value();
    if (valuePtr != NULL)
    {
      BSTR nativePRetVal;
      res.reset(new Numeric<EncodingT>(valuePtr->get_fileName(&nativePRetVal)));
      reset_string<EncodingT>(pRetVal, nativePRetVal);
    }
    return res;
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaEnumSourceFilesPtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaEnumSourceFilesPtr]

./entity[IDiaEnumSourceFilesPtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumSourceFiles> IDiaEnumSourceFilesPtr;
#include "IDiaSourceFilePtrInterpreter.hpp"
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// IDiaTablePtr
///////////////////////////////////////////////////////////////////////////////

file[IDiaTablePtr]

./entity[IDiaTablePtr]/Attribute[Id]/Modifier = Virtual;

./content[Global-inclusion] = ${
#include "DiaPtr.h"
typedef CDiaPtr<IDiaTable> IDiaTablePtr;
}$

./content[Int32 IDiaTablePtr::get_name(String*)][Implementation-body] = ${
	  boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
    IDiaTablePtr valuePtr = value();
    if (valuePtr != NULL)
    {
      BSTR nativePRetVal;
      res.reset(new Numeric<EncodingT>(valuePtr->get_name(&nativePRetVal)));
      reset_string<EncodingT>(pRetVal, nativePRetVal);
    }
	  return res;
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// DataKind
///////////////////////////////////////////////////////////////////////////////

file[DataKind]

./content[Global-inclusion] = ${
}$

// Documentation

///////////////////////////////////////////////////////////////////////////////
// BasicType
///////////////////////////////////////////////////////////////////////////////

file[BasicType]

./content[Global-inclusion] = ${
}$

// Documentation
