<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE document_schema SYSTEM "document_schema.dtd">
<document_schema>

  <Workspace Author="Teddy DIDE" Brief="Pdb Interpreter generated by gensources." Name="Pdb_interpreter" Option="1" Type="Project" Version="1.00">
    <File Name="PdbParser">
      <Content Type="Global-inclusion">
#include "Bool.hpp"
// Debug Interface Access (DIA) specific
#include &lt;dia2.h&gt;
#include "IDiaDataSourcePtrInterpreter.hpp"
</Content>
      <Content Type="Global-body">
template &lt;class EncodingT&gt;
IDiaDataSource* interp::PdbParserInterpreter&lt;EncodingT&gt;::m_diaDataSource = NULL;
</Content>
      <Content Type="Declaration">
private:
  static IDiaDataSource *m_diaDataSource;
  
public:
  // Retourne l'objet DiaDataSource
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDataSource() const;
</Content>
      <Content Type="Implementation">
// Retourne l'objet DiaDataSource
template &lt;class EncodingT&gt;
boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; PdbParserInterpreter&lt;EncodingT&gt;::getDataSource() const
{
  return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDiaDataSourcePtrInterpreter&lt;EncodingT&gt;(m_diaDataSource));
}
</Content>
      <Content Type="Register">
METHOD_KEY_REGISTER ( PdbParserInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDataSource, const_t, C("PdbParser::DataSource") );
</Content>
      <Content Type="Unregister">
METHOD_KEY_UNREGISTER ( C("PdbParser::DataSource") );
</Content>
      <Content Target="PdbParser:initialize@Boolean" Type="Implementation-body">
static GUID IID_IDiaDataSource = {0x79F1BB5F,0xB66E,0x48e5,{0xB6,0xA9,0x15,0x45,0xC3,0x23,0xCA,0x3D}};
static GUID IID_DiaSource = {0xE6756135,0x1E65,0x4D17,{0x85,0x76,0x61,0x07,0x61,0x39,0x8C,0x3C}};
if (m_diaDataSource == NULL)
{
  IDiaDataSource  *ppSource;
  HRESULT hr = CoInitialize(NULL);
  hr = CoCreateInstance(IID_DiaSource,
                  NULL,
                  CLSCTX_INPROC_SERVER,
                  IID_IDiaDataSource,
                  (void **) &amp;ppSource);
  if(SUCCEEDED(hr)) m_diaDataSource = ppSource;
}
return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_diaDataSource != NULL));
</Content>
      <Content Target="PdbParser:terminate@Boolean" Type="Implementation-body">
if(m_diaDataSource != NULL)
{
  m_diaDataSource-&gt;Release();
  m_diaDataSource = NULL;
  CoUninitialize();
}
return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_diaDataSource == NULL));
</Content>
      <Content Target="PdbParser:initialize@Boolean" TargetREF="initialize" Type="ReturnDescription">
True si l'initialisation est effectuée.
</Content>
      <Content Target="PdbParser:initialize@Boolean" Type="Example">
pdbParser = new PdbParser();
pdbParser.Initialize();
pdbDataSource = pdbParser.DataSource;
</Content>
      <Content Target="PdbParser:terminate@Boolean" TargetREF="terminate" Type="ReturnDescription">
True si la destruction est effectuée.
</Content>
      <Content Target="PdbParser:terminate@Boolean" Type="Example">
pdbParser.Terminate();
pdbParser = null;
</Content>
    </File>
    <File Name="IDiaDataSourcePtr">
      <Entity Class="Data" Name="IDiaDataSourcePtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaDataSource&gt; IDiaDataSourcePtr;
#include "IDiaSessionPtrInterpreter.hpp"
</Content>
      <Content Target="IDiaDataSourcePtr:loadDataFromPdb@String@Int32" TargetREF="loadDataFromPdb" Type="ReturnDescription">
0 si la lecture du fichier PDB est effectuée.
</Content>
      <Content Target="IDiaDataSourcePtr:loadDataFromPdb@String@Int32" TargetREF="pdbPath" Type="ParameterDescription">
Le chemin du fichier PDB à ouvrir.
</Content>
      <Content Target="IDiaDataSourcePtr:loadDataFromPdb@String@Int32" Type="Example">
pdbParser = new PdbParser();
pdbParser.Initialize();
pdbDataSource = pdbParser.DataSource;
pdbDataSource.LoadDataFromPdb("projet.pdb");
</Content>
    </File>
    <File Name="IDiaSessionPtr">
      <Entity Class="Data" Name="IDiaSessionPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaSession&gt; IDiaSessionPtr;
#include "IDiaSymbolPtrInterpreter.hpp"
#include "IDiaEnumLineNumbersPtrInterpreter.hpp"
#include "IDiaEnumSourceFilesPtrInterpreter.hpp"
</Content>
      <Content Target="IDiaSessionPtr:findFile@String@Uint32@IDiaEnumSourceFilesPtr*@Int32" Type="Implementation-body">
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	typename EncodingT::string_t nativeName;
	unsigned long nativeOption;
	IDiaEnumSourceFilesPtr nativePpResult;
	if (check_string&lt;EncodingT&gt;(name, nativeName) &amp;&amp; 
		check_numeric(option, nativeOption) &amp;&amp; 
		check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))
	{
		res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;findFile(NULL, nativeName.c_str(), nativeOption, &amp;nativePpResult)));
		reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);
	}
	return res;
</Content>
      <Content Target="IDiaSessionPtr:findFile@IDiaEnumSourceFilesPtr*@Int32" Type="Implementation-body">
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	IDiaEnumSourceFilesPtr nativePpResult;
	if (check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))
	{
		res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;findFile(NULL, NULL, nsNone, &amp;nativePpResult)));
		reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);
	}
	return res;
</Content>
      <Content Target="IDiaSessionPtr:findFile@IDiaSymbolPtr@IDiaEnumSourceFilesPtr*@Int32" Type="Implementation-body">
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
  IDiaSymbolPtr nativePCompiland;
	IDiaEnumSourceFilesPtr nativePpResult;
	if (check_IDiaSymbolPtr(pCompiland, nativePCompiland) &amp;&amp;
      check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))
	{
		res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;findFile(nativePCompiland, NULL, nsNone, &amp;nativePpResult)));
		reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);
	}
	return res;
</Content>
    </File>
    <File Name="IDiaSymbolPtr">
      <Entity Class="Data" Name="IDiaSymbolPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaSymbol&gt; IDiaSymbolPtr;
#include "IDiaEnumSymbolsPtrInterpreter.hpp"
#include "SymTagEnumTypeInterpreter.hpp"
</Content>
      <Content Target="IDiaSymbolPtr:get_name@String*@Int32" Type="Implementation-body">
	  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
    BSTR nativePRetVal;
    res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;get_name(&amp;nativePRetVal)));
    reset_string&lt;EncodingT&gt;(pRetVal, nativePRetVal);
	  return res;
</Content>
      <Content Target="IDiaSymbolPtr:findChildren@SymTagEnumType@IDiaEnumSymbolsPtr*@Int32" Type="Implementation-body">
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	SymTagEnumType nativeSymtag;
	IDiaEnumSymbolsPtr nativePpResult;
	if (check_SymTagEnumType(symtag, nativeSymtag) &amp;&amp; 
		  check_IDiaEnumSymbolsPtr(ppResult, nativePpResult))
	{
		res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;findChildren(nativeSymtag, NULL, nsNone, &amp;nativePpResult)));
		reset_IDiaEnumSymbolsPtr(ppResult, nativePpResult);
	}
	return res;
</Content>
      <Content Target="IDiaSymbolPtr:get_types@IDiaSymbolPtr@Int32" Type="Implementation-body">
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
	std::vector&lt; IDiaSymbolPtr &gt; nativeTypes;
  DWORD count;
  HRESULT hres = value()-&gt;get_types(0, &amp;count, NULL);
  if (hres == S_OK) 
  {
    IDiaSymbol** rgpDiaSymbols = (IDiaSymbol**) _alloca(sizeof(IDiaSymbol *) * count);
    hres = value()-&gt;get_types(count, &amp;count, rgpDiaSymbols);
    if (hres == S_OK) 
    {
      for (ULONG i = 0; i &lt; count; i++) 
      {
        nativeTypes.push_back(IDiaSymbolPtr(rgpDiaSymbols[i]));
        rgpDiaSymbols[i]-&gt;Release();
      }
    }
  }
  res.reset(new Numeric&lt;EncodingT&gt;(hres));
  reset_array(types, nativeTypes, reset_IDiaSymbolPtr&lt;EncodingT&gt;);
	return res;
</Content>
    </File>
    <File Name="IDiaEnumSymbolsPtr">
      <Entity Class="Data" Name="IDiaEnumSymbolsPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaEnumSymbols&gt; IDiaEnumSymbolsPtr;
#include "IDiaSymbolPtrInterpreter.hpp"
</Content>
    </File>
    <File Name="SymTagEnumType">
      <Content Type="Global-inclusion">
typedef enum SymTagEnum SymTagEnumType;

NAMESPACE_BEGIN(interp)

template &lt;class EncodingT&gt;
bool check_SymTagEnumType(boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; const&amp; val, SymTagEnumType&amp; s);

NAMESPACE_END
</Content>
      <Content Type="Global-body">
NAMESPACE_BEGIN(interp)

template &lt;class EncodingT&gt;
bool check_SymTagEnumType(boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; const&amp; val, SymTagEnumType&amp; s)
{
	boost::shared_ptr&lt; Numeric&lt;EncodingT&gt; &gt; value  = dynamic_pointer_cast&lt; Numeric&lt;EncodingT&gt; &gt;(val);
	if (value)
	{
		s = (SymTagEnumType) value-&gt;getValue();
	}
	else
	{
		Category * logger = &amp;Category::getInstance(LOGNAME);
		logger-&gt;errorStream() &lt;&lt; "Numeric expected, got " &lt;&lt; A(val-&gt;getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END
</Content>
    </File>
    <File Name="NameSearchOptions">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="IDiaLineNumberPtr">
      <Entity Class="Data" Name="IDiaLineNumberPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaLineNumber&gt; IDiaLineNumberPtr;
#include "IDiaSourceFilePtrInterpreter.hpp"
</Content>
    </File>
    <File Name="IDiaEnumLineNumbersPtr">
      <Entity Class="Data" Name="IDiaEnumLineNumbersPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaEnumLineNumbers&gt; IDiaEnumLineNumbersPtr;
#include "IDiaLineNumberPtrInterpreter.hpp"
</Content>
    </File>
    <File Name="IDiaSourceFilePtr">
      <Entity Class="Data" Name="IDiaSourceFilePtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaSourceFile&gt; IDiaSourceFilePtr;
</Content>
      <Content Target="IDiaSourceFilePtr:get_fileName@String*@Int32" Type="Implementation-body">
	  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());
    BSTR nativePRetVal;
    res.reset(new Numeric&lt;EncodingT&gt;(value()-&gt;get_fileName(&amp;nativePRetVal)));
    reset_string&lt;EncodingT&gt;(pRetVal, nativePRetVal);
    return res;
</Content>
    </File>
    <File Name="IDiaEnumSourceFilesPtr">
      <Entity Class="Data" Name="IDiaEnumSourceFilesPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">
#include "DiaPtr.h"
typedef CDiaPtr&lt;IDiaEnumSourceFiles&gt; IDiaEnumSourceFilesPtr;
#include "IDiaSourceFilePtrInterpreter.hpp"
</Content>
    </File>
    <File Name="DataKind">
      <Content Type="Global-inclusion">
</Content>    </File>
    <File Name="BasicType">
      <Content Type="Global-inclusion">
</Content>    </File>
  </Workspace>

</document_schema>
