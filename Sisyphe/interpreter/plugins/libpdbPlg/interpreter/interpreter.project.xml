<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE document_schema SYSTEM "document_schema.dtd">
<document_schema>

  <Workspace Author="Teddy DIDE" Brief="Pdb Interpreter generated by gensources." Name="Pdb_interpreter" Option="1" Type="Project" Version="1.00">
    <File Name="PdbParser">
      <Content Type="Global-inclusion">&#xD;
#include "Bool.hpp"&#xD;
// Debug Interface Access (DIA) specific&#xD;
#include &lt;dia2.h&gt;&#xD;
#include "IDiaDataSourcePtrInterpreter.hpp"&#xD;
</Content>
      <Content Type="Global-body">&#xD;
template &lt;class EncodingT&gt;&#xD;
IDiaDataSource* interp::PdbParserInterpreter&lt;EncodingT&gt;::m_diaDataSource = NULL;&#xD;
</Content>
      <Content Type="Declaration">&#xD;
private:&#xD;
  static IDiaDataSource *m_diaDataSource;&#xD;
  &#xD;
public:&#xD;
  // Retourne l'objet DiaDataSource&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDataSource() const;&#xD;
</Content>
      <Content Type="Implementation">&#xD;
// Retourne l'objet DiaDataSource&#xD;
template &lt;class EncodingT&gt;&#xD;
boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; PdbParserInterpreter&lt;EncodingT&gt;::getDataSource() const&#xD;
{&#xD;
  return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDiaDataSourcePtrInterpreter&lt;EncodingT&gt;(IDiaDataSourcePtr(m_diaDataSource)));&#xD;
}&#xD;
</Content>
      <Content Type="Register">&#xD;
METHOD_KEY_REGISTER ( PdbParserInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDataSource, const_t, C("PdbParser::DataSource") );&#xD;
</Content>
      <Content Type="Unregister">&#xD;
METHOD_KEY_UNREGISTER ( C("PdbParser::DataSource") );&#xD;
</Content>
      <Content Target="PdbParser:initialize@Boolean" Type="Implementation-body">&#xD;
  static GUID IID_IDiaDataSource = {0x79F1BB5F,0xB66E,0x48e5,{0xB6,0xA9,0x15,0x45,0xC3,0x23,0xCA,0x3D}};&#xD;
  static GUID IID_DiaSource71 = {0xe60afbee,0x502d,0x46ae,{0x85,0x8f,0x82,0x72,0xa0,0x9b,0xd7,0x07}};&#xD;
  static GUID IID_DiaSource80 = {0xbce36434,0x2c24,0x499e,{0xbf,0x49,0x8b,0xd9,0x9b,0x0e,0xeb,0x68}};&#xD;
  static GUID IID_DiaSource90 = {0x4C41678E,0x887B,0x4365,{0xA0,0x9E,0x92,0x5D,0x28,0xDB,0x33,0xC2}};&#xD;
  static GUID IID_DiaSource100 = {0xB86AE24D,0xBF2F,0x4ac9,{0xB5,0xA2,0x34,0xB1,0x4E,0x4C,0xE1,0x1D}};&#xD;
  static GUID IID_DiaSource110 = {0x761D3BCD,0x1304,0x41D5,{0x94,0xE8,0xEA,0xC5,0x4E,0x4A,0xC1,0x72}};&#xD;
  static GUID IID_DiaSource120 = {0x3bfcea48,0x620f,0x4b6b,{0x81,0xf7,0xb9,0xaf,0x75,0x45,0x4c,0x7d}};&#xD;
  static GUID IID_DiaSource140 = {0xe6756135,0x1e65,0x4d17,{0x85,0x76,0x61,0x07,0x61,0x39,0x8c,0x3c}};&#xD;
&#xD;
  if (m_diaDataSource == NULL)&#xD;
  {&#xD;
    HMODULE hmodule = LoadLibrary(L"MSDIA140");&#xD;
    if (hmodule)&#xD;
    {&#xD;
      BOOL (WINAPI*DllGetClassObject)(REFCLSID,REFIID,LPVOID) =&#xD;
          (BOOL(WINAPI*)(REFCLSID,REFIID,LPVOID))GetProcAddress(hmodule, "DllGetClassObject");&#xD;
&#xD;
      if (DllGetClassObject) &#xD;
      {&#xD;
        IClassFactory *pClassFactory = NULL;&#xD;
        HRESULT hr = DllGetClassObject(IID_DiaSource140, IID_IClassFactory, &amp;pClassFactory);&#xD;
        if(SUCCEEDED(hr))&#xD;
        {&#xD;
          IDiaDataSource  *ppSource;&#xD;
          hr = pClassFactory-&gt;CreateInstance(NULL, IID_IDiaDataSource, (void**)&amp;ppSource);&#xD;
          if(SUCCEEDED(hr)) m_diaDataSource = ppSource;&#xD;
          pClassFactory-&gt;Release();&#xD;
        }&#xD;
      }&#xD;
    }&#xD;
  }&#xD;
  return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_diaDataSource != NULL));&#xD;
</Content>
      <Content Target="PdbParser:terminate@Boolean" Type="Implementation-body">&#xD;
if(m_diaDataSource != NULL)&#xD;
{&#xD;
  m_diaDataSource-&gt;Release();&#xD;
  m_diaDataSource = NULL;&#xD;
  CoUninitialize();&#xD;
}&#xD;
return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_diaDataSource == NULL));&#xD;
</Content>
      <Content Target="PdbParser:initialize@Boolean" TargetREF="initialize" Type="ReturnDescription">&#xD;
True si l'initialisation est effectuée.&#xD;
</Content>
      <Content Target="PdbParser:initialize@Boolean" Type="Example">&#xD;
pdbParser = new PdbParser();&#xD;
pdbParser.Initialize();&#xD;
pdbDataSource = pdbParser.DataSource;&#xD;
</Content>
      <Content Target="PdbParser:terminate@Boolean" TargetREF="terminate" Type="ReturnDescription">&#xD;
True si la destruction est effectuée.&#xD;
</Content>
      <Content Target="PdbParser:terminate@Boolean" Type="Example">&#xD;
pdbParser.Terminate();&#xD;
pdbParser = null;&#xD;
</Content>
    </File>
    <File Name="IDiaDataSourcePtr">
      <Entity Class="Data" Name="IDiaDataSourcePtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaDataSource&gt; IDiaDataSourcePtr;&#xD;
#include "IDiaSessionPtrInterpreter.hpp"&#xD;
</Content>
      <Content Target="IDiaDataSourcePtr:loadDataFromPdb@String@Int32" TargetREF="loadDataFromPdb" Type="ReturnDescription">&#xD;
0 si la lecture du fichier PDB est effectuée.&#xD;
</Content>
      <Content Target="IDiaDataSourcePtr:loadDataFromPdb@String@Int32" TargetREF="pdbPath" Type="ParameterDescription">&#xD;
Le chemin du fichier PDB à ouvrir.&#xD;
</Content>
      <Content Target="IDiaDataSourcePtr:loadDataFromPdb@String@Int32" Type="Example">&#xD;
pdbParser = new PdbParser();&#xD;
pdbParser.Initialize();&#xD;
pdbDataSource = pdbParser.DataSource;&#xD;
pdbDataSource.LoadDataFromPdb("projet.pdb");&#xD;
</Content>
    </File>
    <File Name="IDiaSessionPtr">
      <Entity Class="Data" Name="IDiaSessionPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaSession&gt; IDiaSessionPtr;&#xD;
#include "IDiaSymbolPtrInterpreter.hpp"&#xD;
#include "IDiaEnumLineNumbersPtrInterpreter.hpp"&#xD;
#include "IDiaEnumSourceFilesPtrInterpreter.hpp"&#xD;
#include "IDiaEnumSymbolsByAddrPtrInterpreter.hpp"&#xD;
#include "IDiaEnumTablesPtrInterpreter.hpp"&#xD;
</Content>
      <Content Target="IDiaSessionPtr:findFile@String@Uint32@IDiaEnumSourceFilesPtr*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDiaSessionPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
	{&#xD;
    typename EncodingT::string_t nativeName;&#xD;
    unsigned long nativeOption;&#xD;
    IDiaEnumSourceFilesPtr nativePpResult;&#xD;
    if (check_string&lt;EncodingT&gt;(name, nativeName) &amp;&amp; &#xD;
      check_numeric_i(option, nativeOption) &amp;&amp; &#xD;
      check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;findFile(NULL, nativeName.c_str(), nativeOption, &amp;nativePpResult)));&#xD;
      reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);&#xD;
    }&#xD;
  }&#xD;
	return res;&#xD;
</Content>
      <Content Target="IDiaSessionPtr:findFile@IDiaEnumSourceFilesPtr*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDiaSessionPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
	{&#xD;
    IDiaEnumSourceFilesPtr nativePpResult;&#xD;
    if (check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;findFile(NULL, NULL, nsNone, &amp;nativePpResult)));&#xD;
      reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);&#xD;
    }&#xD;
  }&#xD;
	return res;&#xD;
</Content>
      <Content Target="IDiaSessionPtr:findFile@IDiaSymbolPtr@IDiaEnumSourceFilesPtr*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDiaSessionPtr valuePtr = value();&#xD;
	if (valuePtr != NULL)&#xD;
	{&#xD;
    IDiaSymbolPtr nativePCompiland;&#xD;
    IDiaEnumSourceFilesPtr nativePpResult;&#xD;
    if (check_IDiaSymbolPtr(pCompiland, nativePCompiland) &amp;&amp;&#xD;
        check_IDiaEnumSourceFilesPtr(ppResult, nativePpResult))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;findFile(nativePCompiland, NULL, nsNone, &amp;nativePpResult)));&#xD;
      reset_IDiaEnumSourceFilesPtr(ppResult, nativePpResult);&#xD;
    }&#xD;
  }&#xD;
	return res;&#xD;
</Content>
      <Content Target="IDiaSessionPtr:findChildren@IDiaSymbolPtr@SymTagEnumType@IDiaEnumSymbolsPtr*@Int32" Type="Implementation-body">&#xD;
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDiaSessionPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    IDiaSymbolPtr nativeParent;&#xD;
    SymTagEnumType nativeSymtag;&#xD;
    IDiaEnumSymbolsPtr nativePpResult;&#xD;
    if (check_IDiaSymbolPtr(parent, nativeParent) &amp;&amp;&#xD;
        check_SymTagEnumType(symtag, nativeSymtag) &amp;&amp; &#xD;
        check_IDiaEnumSymbolsPtr(ppResult, nativePpResult))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;findChildren(nativeParent, nativeSymtag, NULL, nsNone, &amp;nativePpResult)));&#xD;
      reset_IDiaEnumSymbolsPtr(ppResult, nativePpResult);&#xD;
    }&#xD;
  }&#xD;
	return res;&#xD;
</Content>
    </File>
    <File Name="IDiaEnumTablesPtr">
      <Entity Class="Data" Name="IDiaEnumTablesPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaEnumTables&gt; IDiaEnumTablesPtr;&#xD;
#include "IDiaTablePtrInterpreter.hpp"&#xD;
</Content>
      <Content Target="IDiaEnumTablesPtr:ItemByName@string@IDiaTablePtr*@Int32" Type="Implementation-body">&#xD;
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
	IDiaEnumTablesPtr valuePtr = value();&#xD;
	if (valuePtr != NULL)&#xD;
	{&#xD;
		IDiaTablePtr nativeTable;&#xD;
		typename EncodingT::string_t nativeLabel;&#xD;
		if (check_string&lt;EncodingT&gt;(label, nativeLabel) &amp;&amp;&#xD;
        check_IDiaTablePtr(table, nativeTable))&#xD;
		{&#xD;
      VARIANT var;  &#xD;
      var.vt = VT_BSTR;  &#xD;
      var.bstrVal = SysAllocString(nativeLabel.c_str());  &#xD;
			res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;Item(var, &amp;nativeTable)));&#xD;
			reset_IDiaTablePtr(table, nativeTable);&#xD;
      VariantClear(&amp;var);&#xD;
		}&#xD;
	}&#xD;
	return res;&#xD;
</Content>
      <Content Target="IDiaEnumTablesPtr:ItemByIndex@Int32@IDiaTablePtr*@Int32" Type="Implementation-body">&#xD;
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
	IDiaEnumTablesPtr valuePtr = value();&#xD;
	if (valuePtr != NULL)&#xD;
	{ &#xD;
		IDiaTablePtr nativeTable;&#xD;
		long nativeIndex;&#xD;
		if (check_numeric_i(index, nativeIndex) &amp;&amp;&#xD;
        check_IDiaTablePtr(table, nativeTable))&#xD;
		{&#xD;
      VARIANT var;  &#xD;
      var.vt = VT_I4;  &#xD;
      var.lVal = nativeIndex; &#xD;
			res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;Item(var, &amp;nativeTable)));&#xD;
			reset_IDiaTablePtr(table, nativeTable);&#xD;
      VariantClear(&amp;var);&#xD;
		}&#xD;
	}&#xD;
	return res;&#xD;
</Content>
    </File>
    <File Name="IDiaEnumSymbolsByAddrPtr">
      <Entity Class="Data" Name="IDiaEnumSymbolsByAddrPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaEnumSymbolsByAddr&gt; IDiaEnumSymbolsByAddrPtr;&#xD;
</Content>
    </File>
    <File Name="IDiaSymbolPtr">
      <Entity Class="Data" Name="IDiaSymbolPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaSymbol&gt; IDiaSymbolPtr;&#xD;
#include "IDiaEnumSymbolsPtrInterpreter.hpp"&#xD;
#include "SymTagEnumTypeInterpreter.hpp"&#xD;
</Content>
      <Content Target="IDiaSymbolPtr:get_name@String*@Int32" Type="Implementation-body">&#xD;
	  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
    IDiaSymbolPtr valuePtr = value();&#xD;
    if (valuePtr != NULL)&#xD;
    {&#xD;
      BSTR nativePRetVal;&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;get_name(&amp;nativePRetVal)));&#xD;
      reset_string&lt;EncodingT&gt;(pRetVal, nativePRetVal);&#xD;
    }&#xD;
	  return res;&#xD;
</Content>
      <Content Target="IDiaSymbolPtr:get_undecoratedName@String*@Int32" Type="Implementation-body">&#xD;
	  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
    IDiaSymbolPtr valuePtr = value();&#xD;
    if (valuePtr != NULL)&#xD;
    {&#xD;
      BSTR nativePRetVal;&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;get_undecoratedName(&amp;nativePRetVal)));&#xD;
      reset_string&lt;EncodingT&gt;(pRetVal, nativePRetVal);&#xD;
    }&#xD;
	  return res;&#xD;
</Content>
      <Content Target="IDiaSymbolPtr:findChildren@SymTagEnumType@IDiaEnumSymbolsPtr*@Int32" Type="Implementation-body">&#xD;
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDiaSymbolPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    SymTagEnumType nativeSymtag;&#xD;
    IDiaEnumSymbolsPtr nativePpResult;&#xD;
    if (check_SymTagEnumType(symtag, nativeSymtag) &amp;&amp; &#xD;
        check_IDiaEnumSymbolsPtr(ppResult, nativePpResult))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;findChildren(nativeSymtag, NULL, nsNone, &amp;nativePpResult)));&#xD;
      reset_IDiaEnumSymbolsPtr(ppResult, nativePpResult);&#xD;
    }&#xD;
  }&#xD;
	return res;&#xD;
</Content>
      <Content Target="IDiaSymbolPtr:get_types@IDiaSymbolPtr@Int32" Type="Implementation-body">&#xD;
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDiaSymbolPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    std::vector&lt; IDiaSymbolPtr &gt; nativeTypes;&#xD;
    DWORD count;&#xD;
    HRESULT hres = valuePtr-&gt;get_types(0, &amp;count, NULL);&#xD;
    if (hres == S_OK) &#xD;
    {&#xD;
      IDiaSymbol** rgpDiaSymbols = (IDiaSymbol**) _alloca(sizeof(IDiaSymbol *) * count);&#xD;
      hres = valuePtr-&gt;get_types(count, &amp;count, rgpDiaSymbols);&#xD;
      if (hres == S_OK) &#xD;
      {&#xD;
        for (ULONG i = 0; i &lt; count; i++) &#xD;
        {&#xD;
          nativeTypes.push_back(IDiaSymbolPtr(rgpDiaSymbols[i]));&#xD;
          rgpDiaSymbols[i]-&gt;Release();&#xD;
        }&#xD;
      }&#xD;
    }&#xD;
    res.reset(new Numeric&lt;EncodingT&gt;(hres));&#xD;
    reset_array(types, nativeTypes, reset_IDiaSymbolPtr&lt;EncodingT&gt;);&#xD;
  }&#xD;
	return res;&#xD;
</Content>
    </File>
    <File Name="IDiaEnumSymbolsPtr">
      <Entity Class="Data" Name="IDiaEnumSymbolsPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaEnumSymbols&gt; IDiaEnumSymbolsPtr;&#xD;
#include "IDiaSymbolPtrInterpreter.hpp"&#xD;
</Content>
    </File>
    <File Name="SymTagEnumType">
      <Content Type="Global-inclusion">&#xD;
typedef enum SymTagEnum SymTagEnumType;&#xD;
&#xD;
NAMESPACE_BEGIN(interp)&#xD;
&#xD;
template &lt;class EncodingT&gt;&#xD;
bool check_SymTagEnumType(boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; const&amp; val, SymTagEnumType&amp; s);&#xD;
&#xD;
NAMESPACE_END&#xD;
</Content>
      <Content Type="Global-body">&#xD;
NAMESPACE_BEGIN(interp)&#xD;
&#xD;
template &lt;class EncodingT&gt;&#xD;
bool check_SymTagEnumType(boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; const&amp; val, SymTagEnumType&amp; s)&#xD;
{&#xD;
	boost::shared_ptr&lt; Numeric&lt;EncodingT&gt; &gt; value  = dynamic_pointer_cast&lt; Numeric&lt;EncodingT&gt; &gt;(val);&#xD;
	if (value)&#xD;
	{&#xD;
		s = (SymTagEnumType) value-&gt;getLLValue();&#xD;
	}&#xD;
	else&#xD;
	{&#xD;
		Category * logger = &amp;Category::getInstance(LOGNAME);&#xD;
		logger-&gt;errorStream() &lt;&lt; "Numeric expected, got " &lt;&lt; A(val-&gt;getClassName());&#xD;
	}&#xD;
	return (value != NULL);&#xD;
}&#xD;
&#xD;
NAMESPACE_END&#xD;
</Content>
    </File>
    <File Name="NameSearchOptions">
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="IDiaLineNumberPtr">
      <Entity Class="Data" Name="IDiaLineNumberPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaLineNumber&gt; IDiaLineNumberPtr;&#xD;
#include "IDiaSourceFilePtrInterpreter.hpp"&#xD;
</Content>
    </File>
    <File Name="IDiaEnumLineNumbersPtr">
      <Entity Class="Data" Name="IDiaEnumLineNumbersPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaEnumLineNumbers&gt; IDiaEnumLineNumbersPtr;&#xD;
#include "IDiaLineNumberPtrInterpreter.hpp"&#xD;
</Content>
    </File>
    <File Name="IDiaSourceFilePtr">
      <Entity Class="Data" Name="IDiaSourceFilePtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaSourceFile&gt; IDiaSourceFilePtr;&#xD;
</Content>
      <Content Target="IDiaSourceFilePtr:get_fileName@String*@Int32" Type="Implementation-body">&#xD;
	  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
    IDiaSourceFilePtr valuePtr = value();&#xD;
    if (valuePtr != NULL)&#xD;
    {&#xD;
      BSTR nativePRetVal;&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;get_fileName(&amp;nativePRetVal)));&#xD;
      reset_string&lt;EncodingT&gt;(pRetVal, nativePRetVal);&#xD;
    }&#xD;
    return res;&#xD;
</Content>
    </File>
    <File Name="IDiaEnumSourceFilesPtr">
      <Entity Class="Data" Name="IDiaEnumSourceFilesPtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaEnumSourceFiles&gt; IDiaEnumSourceFilesPtr;&#xD;
#include "IDiaSourceFilePtrInterpreter.hpp"&#xD;
</Content>
    </File>
    <File Name="IDiaTablePtr">
      <Entity Class="Data" Name="IDiaTablePtr">
        <Attribute Modifier="Virtual " Name="Id" Type="Any"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
#include "DiaPtr.h"&#xD;
typedef CDiaPtr&lt;IDiaTable&gt; IDiaTablePtr;&#xD;
</Content>
      <Content Target="IDiaTablePtr:get_name@String*@Int32" Type="Implementation-body">&#xD;
	  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
    IDiaTablePtr valuePtr = value();&#xD;
    if (valuePtr != NULL)&#xD;
    {&#xD;
      BSTR nativePRetVal;&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;get_name(&amp;nativePRetVal)));&#xD;
      reset_string&lt;EncodingT&gt;(pRetVal, nativePRetVal);&#xD;
    }&#xD;
	  return res;&#xD;
</Content>
    </File>
    <File Name="DataKind">
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="BasicType">
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
  </Workspace>

</document_schema>
