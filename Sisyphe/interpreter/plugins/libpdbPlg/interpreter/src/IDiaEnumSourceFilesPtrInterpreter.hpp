/*
 * IDiaEnumSourceFilesPtrInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _IDIAENUMSOURCEFILESPTR_INTERPRETER_H_
#define _IDIAENUMSOURCEFILESPTR_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumSourceFiles> IDiaEnumSourceFilesPtr;
#include "IDiaSourceFilePtrInterpreter.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Classe qui énumère les fichiers sources différents contenus dans la source de données..
	template <class EncodingT>
	class IDiaEnumSourceFilesPtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDiaEnumSourceFilesPtr m_object;

		void initValue(const IDiaEnumSourceFilesPtr& object);

		IDiaEnumSourceFilesPtr& value();

		const IDiaEnumSourceFilesPtr& value() const;

		void tidyValue();

	public:
		IDiaEnumSourceFilesPtrInterpreter();

		~IDiaEnumSourceFilesPtrInterpreter();

		IDiaEnumSourceFilesPtrInterpreter(const IDiaEnumSourceFilesPtr& object);

		IDiaEnumSourceFilesPtrInterpreter(const IDiaEnumSourceFilesPtrInterpreter<EncodingT>& rhs);

		IDiaEnumSourceFilesPtrInterpreter<EncodingT>& operator=(const IDiaEnumSourceFilesPtrInterpreter<EncodingT>& rhs);

		const IDiaEnumSourceFilesPtr& getValue() const;

		void setValue(IDiaEnumSourceFilesPtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

		// Récupère le nombre de fichiers sources.
		FACTORY_PROTOTYPE1(get_Count, InOut< shared_ptr< Base<EncodingT> > >)
		shared_ptr< Base<EncodingT> > get_Count(shared_ptr< Base<EncodingT> >& pRetVal);

		// Extrait un fichier source au moyen d'un index.
		FACTORY_PROTOTYPE2(item, In< shared_ptr< Base<EncodingT> > >, InOut< shared_ptr< Base<EncodingT> > >)
		shared_ptr< Base<EncodingT> > item(const shared_ptr< Base<EncodingT> >& index, shared_ptr< Base<EncodingT> >& symbol);

		// Récupère un nombre spécifié de fichiers sources dans la séquence d'énumération.
		FACTORY_PROTOTYPE3(next, In< shared_ptr< Base<EncodingT> > >, InOut< shared_ptr< Base<EncodingT> > >, InOut< shared_ptr< Base<EncodingT> > >)
		shared_ptr< Base<EncodingT> > next(const shared_ptr< Base<EncodingT> >& celt, shared_ptr< Base<EncodingT> >& rgelt, shared_ptr< Base<EncodingT> >& pceltFetched);

		// Ignore un nombre spécifié de fichiers sources dans une séquence d'énumération.
		FACTORY_PROTOTYPE1(skip, In< shared_ptr< Base<EncodingT> > >)
		shared_ptr< Base<EncodingT> > skip(const shared_ptr< Base<EncodingT> >& celt);

		// Réinitialise une séquence d'énumération au début.
		shared_ptr< Base<EncodingT> > reset();

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDiaEnumSourceFilesPtrInterpreter, C("IDiaEnumSourceFilesPtr") );
			METHOD_KEY_REGISTER1( IDiaEnumSourceFilesPtrInterpreter, shared_ptr< Base<EncodingT> >, get_Count, no_const_t, C("IDiaEnumSourceFilesPtr::Get_Count") );
			METHOD_KEY_REGISTER2( IDiaEnumSourceFilesPtrInterpreter, shared_ptr< Base<EncodingT> >, item, no_const_t, C("IDiaEnumSourceFilesPtr::Item") );
			METHOD_KEY_REGISTER3( IDiaEnumSourceFilesPtrInterpreter, shared_ptr< Base<EncodingT> >, next, no_const_t, C("IDiaEnumSourceFilesPtr::Next") );
			METHOD_KEY_REGISTER1( IDiaEnumSourceFilesPtrInterpreter, shared_ptr< Base<EncodingT> >, skip, no_const_t, C("IDiaEnumSourceFilesPtr::Skip") );
			METHOD_KEY_REGISTER ( IDiaEnumSourceFilesPtrInterpreter, shared_ptr< Base<EncodingT> >, reset, no_const_t, C("IDiaEnumSourceFilesPtr::Reset") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("IDiaEnumSourceFilesPtr") );
			METHOD_KEY_UNREGISTER1( C("IDiaEnumSourceFilesPtr::Get_Count") );
			METHOD_KEY_UNREGISTER2( C("IDiaEnumSourceFilesPtr::Item") );
			METHOD_KEY_UNREGISTER3( C("IDiaEnumSourceFilesPtr::Next") );
			METHOD_KEY_UNREGISTER1( C("IDiaEnumSourceFilesPtr::Skip") );
			METHOD_KEY_UNREGISTER ( C("IDiaEnumSourceFilesPtr::Reset") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDiaEnumSourceFilesPtr(shared_ptr< Base<EncodingT> > const& val, IDiaEnumSourceFilesPtr& a);

	template <class EncodingT>
	bool reset_IDiaEnumSourceFilesPtr(shared_ptr< Base<EncodingT> >& val, IDiaEnumSourceFilesPtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDiaEnumSourceFilesPtrInterpreter_impl.hpp"

#endif