/*
 * PdbParserInterpreter_impl.hpp
 *
 *
 * @date 03-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
PdbParserInterpreter<EncodingT>::PdbParserInterpreter()
{
}

template <class EncodingT>
void PdbParserInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
PdbParserInterpreter<EncodingT>::~PdbParserInterpreter()
{
	tidyValue();
}

template <class EncodingT>
typename EncodingT::string_t PdbParserInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new PdbParserInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t PdbParserInterpreter<EncodingT>::getClassName() const
{
	return C("PdbParser");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("PdbParser"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in PdbParser, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Initialise le parseur PDB.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::initialize() const
{
static GUID IID_IDiaDataSource = {0x79F1BB5F,0xB66E,0x48e5,{0xB6,0xA9,0x15,0x45,0xC3,0x23,0xCA,0x3D}};
static GUID IID_DiaSource = {0xE6756135,0x1E65,0x4D17,{0x85,0x76,0x61,0x07,0x61,0x39,0x8C,0x3C}};
if (m_diaDataSource == NULL)
{
  IDiaDataSource  *ppSource;
  HRESULT hr = CoInitialize(NULL);
  hr = CoCreateInstance(IID_DiaSource,
                  NULL,
                  CLSCTX_INPROC_SERVER,
                  IID_IDiaDataSource,
                  (void **) &ppSource);
  if(SUCCEEDED(hr)) m_diaDataSource = ppSource;
}
return boost::shared_ptr< Base<EncodingT> > (new Bool<EncodingT>(m_diaDataSource != NULL));
}

// Lib√®re les objets PDB.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::terminate() const
{
if(m_diaDataSource != NULL)
{
  m_diaDataSource->Release();
  m_diaDataSource = NULL;
  CoUninitialize();
}
return boost::shared_ptr< Base<EncodingT> > (new Bool<EncodingT>(m_diaDataSource == NULL));
}
// Retourne l'objet DiaDataSource
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::getDataSource() const
{
  return boost::shared_ptr< Base<EncodingT> > (new IDiaDataSourcePtrInterpreter<EncodingT>(m_diaDataSource));
}

NAMESPACE_END

template <class EncodingT>
IDiaDataSource* interp::PdbParserInterpreter<EncodingT>::m_diaDataSource = NULL;

#undef A
#undef C