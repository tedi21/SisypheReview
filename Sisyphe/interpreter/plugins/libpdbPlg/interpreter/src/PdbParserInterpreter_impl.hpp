/*
 * PdbParserInterpreter_impl.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
PdbParserInterpreter<EncodingT>::PdbParserInterpreter()
{
}

template <class EncodingT>
typename EncodingT::string_t PdbParserInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new PdbParserInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t PdbParserInterpreter<EncodingT>::getClassName() const
{
	return UCS("PdbParser");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, UCS("PdbParser"), method, args, ret) ||
			tryInvoke(this, UCS("Base"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in PdbParser, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Initialise le parseur PDB.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::initialize() const
{
static GUID IID_IDiaDataSource = {0x79F1BB5F,0xB66E,0x48e5,{0xB6,0xA9,0x15,0x45,0xC3,0x23,0xCA,0x3D}};
  static GUID IID_DiaSource71 = {0xe60afbee,0x502d,0x46ae,{0x85,0x8f,0x82,0x72,0xa0,0x9b,0xd7,0x07}};
  static GUID IID_DiaSource80 = {0xbce36434,0x2c24,0x499e,{0xbf,0x49,0x8b,0xd9,0x9b,0x0e,0xeb,0x68}};
  static GUID IID_DiaSource90 = {0x4C41678E,0x887B,0x4365,{0xA0,0x9E,0x92,0x5D,0x28,0xDB,0x33,0xC2}};
  static GUID IID_DiaSource100 = {0xB86AE24D,0xBF2F,0x4ac9,{0xB5,0xA2,0x34,0xB1,0x4E,0x4C,0xE1,0x1D}};
  static GUID IID_DiaSource110 = {0x761D3BCD,0x1304,0x41D5,{0x94,0xE8,0xEA,0xC5,0x4E,0x4A,0xC1,0x72}};
  static GUID IID_DiaSource120 = {0x3bfcea48,0x620f,0x4b6b,{0x81,0xf7,0xb9,0xaf,0x75,0x45,0x4c,0x7d}};
  static GUID IID_DiaSource140 = {0xe6756135,0x1e65,0x4d17,{0x85,0x76,0x61,0x07,0x61,0x39,0x8c,0x3c}};

  if (m_diaDataSource == NULL)
  {
    HMODULE hmodule = LoadLibrary(L"MSDIA140");
    if (hmodule)
    {
      BOOL (WINAPI*DllGetClassObject)(REFCLSID,REFIID,LPVOID) =
          (BOOL(WINAPI*)(REFCLSID,REFIID,LPVOID))GetProcAddress(hmodule, "DllGetClassObject");

      if (DllGetClassObject) 
      {
        IClassFactory *pClassFactory = NULL;
        HRESULT hr = DllGetClassObject(IID_DiaSource140, IID_IClassFactory, &pClassFactory);
        if(SUCCEEDED(hr))
        {
          IDiaDataSource  *ppSource;
          hr = pClassFactory->CreateInstance(NULL, IID_IDiaDataSource, (void**)&ppSource);
          if(SUCCEEDED(hr)) m_diaDataSource = ppSource;
          pClassFactory->Release();
        }
      }
    }
  }
  return boost::shared_ptr< Base<EncodingT> > (new Bool<EncodingT>(m_diaDataSource != NULL));
}

// Lib√®re les objets PDB.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::terminate() const
{
if(m_diaDataSource != NULL)
{
  m_diaDataSource->Release();
  m_diaDataSource = NULL;
  CoUninitialize();
}
return boost::shared_ptr< Base<EncodingT> > (new Bool<EncodingT>(m_diaDataSource == NULL));
}
// Retourne l'objet DiaDataSource
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > PdbParserInterpreter<EncodingT>::getDataSource() const
{
  return boost::shared_ptr< Base<EncodingT> > (new IDiaDataSourcePtrInterpreter<EncodingT>(IDiaDataSourcePtr(m_diaDataSource)));
}

NAMESPACE_END

template <class EncodingT>
IDiaDataSource* interp::PdbParserInterpreter<EncodingT>::m_diaDataSource = NULL;

#undef A
#undef C