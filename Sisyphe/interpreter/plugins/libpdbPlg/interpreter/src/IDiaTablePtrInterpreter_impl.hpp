/*
 * IDiaTablePtrInterpreter_impl.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
IDiaTablePtrInterpreter<EncodingT>::IDiaTablePtrInterpreter()
{
}

template <class EncodingT>
void IDiaTablePtrInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
void IDiaTablePtrInterpreter<EncodingT>::initValue(const IDiaTablePtr& object)
{
	m_object = object;
}

template <class EncodingT>
IDiaTablePtr& IDiaTablePtrInterpreter<EncodingT>::refValue()
{
	return m_object;
}

template <class EncodingT>
const IDiaTablePtr& IDiaTablePtrInterpreter<EncodingT>::refValue() const
{
	return m_object;
}

template <class EncodingT>
IDiaTablePtrInterpreter<EncodingT>::IDiaTablePtrInterpreter(const IDiaTablePtr& object)
{
	initValue(object);
}

template <class EncodingT>
const IDiaTablePtr& IDiaTablePtrInterpreter<EncodingT>::value() const
{
	return refValue();
}

template <class EncodingT>
void IDiaTablePtrInterpreter<EncodingT>::value(IDiaTablePtr const& object)
{
	if (&object != &value()) {
		tidyValue();
		initValue(object);
	}
}

template <class EncodingT>
typename EncodingT::string_t IDiaTablePtrInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaTablePtrInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new IDiaTablePtrInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t IDiaTablePtrInterpreter<EncodingT>::getClassName() const
{
	return UCS("IDiaTablePtr");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaTablePtrInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, UCS("IDiaTablePtr"), method, args, ret) ||
			tryInvoke(this, UCS("Base"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in IDiaTablePtr, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Extrait le nom de la table.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaTablePtrInterpreter<EncodingT>::get_name(boost::shared_ptr< Base<EncodingT> >& pRetVal)
{
boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
    IDiaTablePtr valuePtr = value();
    if (valuePtr != NULL)
    {
      BSTR nativePRetVal;
      res.reset(new Numeric<EncodingT>(valuePtr->get_name(&nativePRetVal)));
      reset_string<EncodingT>(pRetVal, nativePRetVal);
    }
	  return res;
}

// Récupère le nombre de fichiers sources.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaTablePtrInterpreter<EncodingT>::get_Count(boost::shared_ptr< Base<EncodingT> >& pRetVal)
{
	boost::shared_ptr< Numeric<EncodingT> > res(new Numeric<EncodingT>());
	IDiaTablePtr valuePtr = refValue();
	if (valuePtr != NULL)
	{
		long nativePRetVal;
		if (check_numeric_i(pRetVal, nativePRetVal))
		{
			res->LLvalue(valuePtr->get_Count(&nativePRetVal));
			reset_numeric_i(pRetVal, nativePRetVal);
		}
	}
	return res;
}


template <class EncodingT>
bool check_IDiaTablePtr(boost::shared_ptr< Base<EncodingT> > const& val, IDiaTablePtr& a)
{
	boost::shared_ptr< IDiaTablePtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDiaTablePtrInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->value();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDiaTablePtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

template <class EncodingT>
bool reset_IDiaTablePtr(boost::shared_ptr< Base<EncodingT> >& val, IDiaTablePtr const& a)
{
	boost::shared_ptr< IDiaTablePtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDiaTablePtrInterpreter<EncodingT> >(val);
	if (value)
	{
		value->value(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDiaTablePtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END

#undef A
#undef C