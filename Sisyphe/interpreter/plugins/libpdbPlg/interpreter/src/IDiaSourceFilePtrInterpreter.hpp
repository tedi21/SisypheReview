/*
 * IDiaSourceFilePtrInterpreter.hpp
 *
 *
 * @date 03-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _IDIASOURCEFILEPTR_INTERPRETER_H_
#define _IDIASOURCEFILEPTR_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "DiaPtr.h"
typedef CDiaPtr<IDiaSourceFile> IDiaSourceFilePtr;

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Représente un fichier source.
	template <class EncodingT>
	class IDiaSourceFilePtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDiaSourceFilePtr m_object;

		void initValue(const IDiaSourceFilePtr& object);

		IDiaSourceFilePtr& value();

		const IDiaSourceFilePtr& value() const;

		void tidyValue();

	public:
		IDiaSourceFilePtrInterpreter();

		~IDiaSourceFilePtrInterpreter();

		IDiaSourceFilePtrInterpreter(const IDiaSourceFilePtr& object);

		IDiaSourceFilePtrInterpreter(const IDiaSourceFilePtrInterpreter<EncodingT>& rhs);

		IDiaSourceFilePtrInterpreter<EncodingT>& operator=(const IDiaSourceFilePtrInterpreter<EncodingT>& rhs);

		const IDiaSourceFilePtr& getValue() const;

		void setValue(IDiaSourceFilePtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Récupère les octets de checksum.
		FACTORY_PROTOTYPE3(get_checksum, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_checksum(boost::shared_ptr< Base<EncodingT> >& cbData, boost::shared_ptr< Base<EncodingT> >& pcbData, boost::shared_ptr< Base<EncodingT> >& data);

		// Extrait le nom du fichier source.
		FACTORY_PROTOTYPE1(get_fileName, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_fileName(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Récupère un énumérateur des compilands qui ont des numéros de ligne référençant ce fichier.
		FACTORY_PROTOTYPE1(get_compilands, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_compilands(boost::shared_ptr< Base<EncodingT> >& ppRetVal);

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDiaSourceFilePtrInterpreter, C("IDiaSourceFilePtr") );
			METHOD_KEY_REGISTER3( IDiaSourceFilePtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_checksum, no_const_t, C("IDiaSourceFilePtr::Get_checksum") );
			METHOD_KEY_REGISTER1( IDiaSourceFilePtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_fileName, no_const_t, C("IDiaSourceFilePtr::Get_fileName") );
			METHOD_KEY_REGISTER1( IDiaSourceFilePtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_compilands, no_const_t, C("IDiaSourceFilePtr::Get_compilands") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("IDiaSourceFilePtr") );
			METHOD_KEY_UNREGISTER3( C("IDiaSourceFilePtr::Get_checksum") );
			METHOD_KEY_UNREGISTER1( C("IDiaSourceFilePtr::Get_fileName") );
			METHOD_KEY_UNREGISTER1( C("IDiaSourceFilePtr::Get_compilands") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDiaSourceFilePtr(boost::shared_ptr< Base<EncodingT> > const& val, IDiaSourceFilePtr& a);

	template <class EncodingT>
	bool reset_IDiaSourceFilePtr(boost::shared_ptr< Base<EncodingT> >& val, IDiaSourceFilePtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDiaSourceFilePtrInterpreter_impl.hpp"

#endif