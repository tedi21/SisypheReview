/*
 * DataKindInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _DATAKIND_INTERPRETER_H_
#define _DATAKIND_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// indique la portée particulière d'une valeur de données.
	template <class EncodingT>
	class DataKindInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		DataKindInterpreter();

		~DataKindInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

		shared_ptr< Base<EncodingT> > getDataIsUnknown() const;

		shared_ptr< Base<EncodingT> > getDataIsLocal() const;

		shared_ptr< Base<EncodingT> > getDataIsStaticLocal() const;

		shared_ptr< Base<EncodingT> > getDataIsParam() const;

		shared_ptr< Base<EncodingT> > getDataIsObjectPtr() const;

		shared_ptr< Base<EncodingT> > getDataIsFileStatic() const;

		shared_ptr< Base<EncodingT> > getDataIsGlobal() const;

		shared_ptr< Base<EncodingT> > getDataIsMember() const;

		shared_ptr< Base<EncodingT> > getDataIsStaticMember() const;

		shared_ptr< Base<EncodingT> > getDataIsConstant() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DataKindInterpreter, C("DataKind") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsUnknown, const_t, C("DataKind::DataIsUnknown") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsLocal, const_t, C("DataKind::DataIsLocal") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsStaticLocal, const_t, C("DataKind::DataIsStaticLocal") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsParam, const_t, C("DataKind::DataIsParam") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsObjectPtr, const_t, C("DataKind::DataIsObjectPtr") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsFileStatic, const_t, C("DataKind::DataIsFileStatic") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsGlobal, const_t, C("DataKind::DataIsGlobal") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsMember, const_t, C("DataKind::DataIsMember") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsStaticMember, const_t, C("DataKind::DataIsStaticMember") );
			METHOD_KEY_REGISTER ( DataKindInterpreter, shared_ptr< Base<EncodingT> >, getDataIsConstant, const_t, C("DataKind::DataIsConstant") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("DataKind") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsUnknown") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsLocal") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsStaticLocal") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsParam") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsObjectPtr") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsFileStatic") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsGlobal") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsMember") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsStaticMember") );
			METHOD_KEY_UNREGISTER ( C("DataKind::DataIsConstant") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "DataKindInterpreter_impl.hpp"

#endif