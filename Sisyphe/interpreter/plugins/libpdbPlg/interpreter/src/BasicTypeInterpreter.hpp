/*
 * BasicTypeInterpreter.hpp
 *
 *
 * @date 03-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _BASICTYPE_INTERPRETER_H_
#define _BASICTYPE_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// sp√©cifie le type de base du symbole.
	template <class EncodingT>
	class BasicTypeInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		BasicTypeInterpreter();

		~BasicTypeInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > getBtNoType() const;

		boost::shared_ptr< Base<EncodingT> > getBtVoid() const;

		boost::shared_ptr< Base<EncodingT> > getBtChar() const;

		boost::shared_ptr< Base<EncodingT> > getBtWChar() const;

		boost::shared_ptr< Base<EncodingT> > getBtInt() const;

		boost::shared_ptr< Base<EncodingT> > getBtUInt() const;

		boost::shared_ptr< Base<EncodingT> > getBtFloat() const;

		boost::shared_ptr< Base<EncodingT> > getBtBCD() const;

		boost::shared_ptr< Base<EncodingT> > getBtBool() const;

		boost::shared_ptr< Base<EncodingT> > getBtLong() const;

		boost::shared_ptr< Base<EncodingT> > getBtULong() const;

		boost::shared_ptr< Base<EncodingT> > getBtCurrency() const;

		boost::shared_ptr< Base<EncodingT> > getBtDate() const;

		boost::shared_ptr< Base<EncodingT> > getBtVariant() const;

		boost::shared_ptr< Base<EncodingT> > getBtComplex() const;

		boost::shared_ptr< Base<EncodingT> > getBtBit() const;

		boost::shared_ptr< Base<EncodingT> > getBtBSTR() const;

		boost::shared_ptr< Base<EncodingT> > getBtHresult() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( BasicTypeInterpreter, C("BasicType") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtNoType, const_t, C("BasicType::BtNoType") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtVoid, const_t, C("BasicType::BtVoid") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtChar, const_t, C("BasicType::BtChar") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtWChar, const_t, C("BasicType::BtWChar") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtInt, const_t, C("BasicType::BtInt") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtUInt, const_t, C("BasicType::BtUInt") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtFloat, const_t, C("BasicType::BtFloat") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtBCD, const_t, C("BasicType::BtBCD") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtBool, const_t, C("BasicType::BtBool") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtLong, const_t, C("BasicType::BtLong") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtULong, const_t, C("BasicType::BtULong") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtCurrency, const_t, C("BasicType::BtCurrency") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtDate, const_t, C("BasicType::BtDate") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtVariant, const_t, C("BasicType::BtVariant") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtComplex, const_t, C("BasicType::BtComplex") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtBit, const_t, C("BasicType::BtBit") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtBSTR, const_t, C("BasicType::BtBSTR") );
			METHOD_KEY_REGISTER ( BasicTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getBtHresult, const_t, C("BasicType::BtHresult") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("BasicType") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtNoType") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtVoid") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtChar") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtWChar") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtInt") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtUInt") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtFloat") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtBCD") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtBool") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtLong") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtULong") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtCurrency") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtDate") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtVariant") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtComplex") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtBit") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtBSTR") );
			METHOD_KEY_UNREGISTER ( C("BasicType::BtHresult") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "BasicTypeInterpreter_impl.hpp"

#endif