/*
 * IDiaSessionPtrInterpreter.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _IDIASESSIONPTR_INTERPRETER_H_
#define _IDIASESSIONPTR_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"
#include "DiaPtr.h"
typedef CDiaPtr<IDiaSession> IDiaSessionPtr;
#include "IDiaSymbolPtrInterpreter.hpp"
#include "IDiaEnumLineNumbersPtrInterpreter.hpp"
#include "IDiaEnumSourceFilesPtrInterpreter.hpp"
#include "IDiaEnumSymbolsByAddrPtrInterpreter.hpp"
#include "IDiaEnumTablesPtrInterpreter.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Classe permettant de fournir un contexte de requête pour des symboles de débogage.
	template <class EncodingT>
	class IDiaSessionPtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDiaSessionPtr m_object;

		void initValue(const IDiaSessionPtr& object);

		IDiaSessionPtr& refValue();

		const IDiaSessionPtr& refValue() const;

		void tidyValue();

	public:
		IDiaSessionPtrInterpreter();

		IDiaSessionPtrInterpreter(const IDiaSessionPtr& object);

		const IDiaSessionPtr& value() const;

		void value(IDiaSessionPtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Extrait une référence de la portée globale.
		FACTORY_PROTOTYPE1(get_globalScope, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_globalScope(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Définit l'adresse de charge du fichier exécutable qui correspond aux symboles dans ce magasin de symboles.
		FACTORY_PROTOTYPE1(put_loadAddress, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > put_loadAddress(const boost::shared_ptr< Base<EncodingT> >& pNewVal);

		// Extrait un énumérateur qui recherche des symboles dans l'ordre de leurs adresses.
		FACTORY_PROTOTYPE1(getSymbolsByAddr, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getSymbolsByAddr(boost::shared_ptr< Base<EncodingT> >& ppEnumbyAddr);

		// Récupère un énumérateur pour tous les tables contenues dans le magasin de symboles.
		FACTORY_PROTOTYPE1(getEnumTables, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getEnumTables(boost::shared_ptr< Base<EncodingT> >& ppEnumTables);

		// Récupère un type spécifié de symboles qui contient, ou est le plus proche de, une adresse spécifiée.
		FACTORY_PROTOTYPE4(findSymbolByAddr, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findSymbolByAddr(const boost::shared_ptr< Base<EncodingT> >& isect, const boost::shared_ptr< Base<EncodingT> >& offset, const boost::shared_ptr< Base<EncodingT> >& symtag, boost::shared_ptr< Base<EncodingT> >& ppSymbol);

		// Récupère un type spécifié de symboles qui contient, ou est le plus proche de, une adresse virtuelle relative spécifiée (RVA).
		FACTORY_PROTOTYPE3(findSymbolByRVA, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findSymbolByRVA(const boost::shared_ptr< Base<EncodingT> >& rva, const boost::shared_ptr< Base<EncodingT> >& symtag, boost::shared_ptr< Base<EncodingT> >& ppSymbol);

		// Récupère un symbole par son identificateur unique.
		FACTORY_PROTOTYPE2(symbolById, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > symbolById(const boost::shared_ptr< Base<EncodingT> >& identifier, boost::shared_ptr< Base<EncodingT> >& ppSymbol);

		// Vérifie si deux symboles sont équivalents.
		FACTORY_PROTOTYPE2(symsAreEquiv, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > symsAreEquiv(const boost::shared_ptr< Base<EncodingT> >& symbolA, const boost::shared_ptr< Base<EncodingT> >& symbolB);

		// Récupère les lignes d'un module spécifié qui contient une adresse virtuelle relative spécifiée (RVA).
		FACTORY_PROTOTYPE3(findLinesByRVA, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findLinesByRVA(const boost::shared_ptr< Base<EncodingT> >& rva, const boost::shared_ptr< Base<EncodingT> >& length, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Retrieves the lines in a specified compiland that contain a specified address.
		FACTORY_PROTOTYPE4(findLinesByAddr, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findLinesByAddr(const boost::shared_ptr< Base<EncodingT> >& seg, const boost::shared_ptr< Base<EncodingT> >& offset, const boost::shared_ptr< Base<EncodingT> >& length, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Détermine les numéros de ligne du module (compiland) que le numéro de ligne spécifié dans un fichier source se trouve dans ou approche.
		FACTORY_PROTOTYPE5(findLinesByLinenum, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findLinesByLinenum(const boost::shared_ptr< Base<EncodingT> >& compiland, const boost::shared_ptr< Base<EncodingT> >& file, const boost::shared_ptr< Base<EncodingT> >& linenum, const boost::shared_ptr< Base<EncodingT> >& column, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère les numéros de ligne dans les ID spécifiés de module (compiland) et du fichier source.
		FACTORY_PROTOTYPE3(findLines, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findLines(const boost::shared_ptr< Base<EncodingT> >& compiland, const boost::shared_ptr< Base<EncodingT> >& file, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère les fichiers sources par le module et le nom.
		FACTORY_PROTOTYPE4(findFile, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findFile(const boost::shared_ptr< Base<EncodingT> >& pCompiland, const boost::shared_ptr< Base<EncodingT> >& name, const boost::shared_ptr< Base<EncodingT> >& option, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère les fichiers sources par le module.
		FACTORY_PROTOTYPE2(findFile, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findFile(const boost::shared_ptr< Base<EncodingT> >& pCompiland, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère les fichiers sources par le nom.
		FACTORY_PROTOTYPE3(findFile, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findFile(const boost::shared_ptr< Base<EncodingT> >& name, const boost::shared_ptr< Base<EncodingT> >& option, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère tous les fichiers sources.
		FACTORY_PROTOTYPE1(findFile, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findFile(boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère tous les enfants d'un identificateur parent spécifié qui correspondent au nom et le type de symbole.
		FACTORY_PROTOTYPE5(findChildren, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findChildren(const boost::shared_ptr< Base<EncodingT> >& parent, const boost::shared_ptr< Base<EncodingT> >& symtag, const boost::shared_ptr< Base<EncodingT> >& name, const boost::shared_ptr< Base<EncodingT> >& compareFlags, boost::shared_ptr< Base<EncodingT> >& ppResult);

		// Récupère tous les enfants d'un identificateur parent spécifié qui correspondent au nom et le type de symbole.
		FACTORY_PROTOTYPE3(findChildren, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > findChildren(const boost::shared_ptr< Base<EncodingT> >& parent, const boost::shared_ptr< Base<EncodingT> >& symtag, boost::shared_ptr< Base<EncodingT> >& ppResult);

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDiaSessionPtrInterpreter, UCS("IDiaSessionPtr") );
			METHOD_KEY_REGISTER1( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_globalScope, no_const_t, UCS("IDiaSessionPtr::Get_globalScope") );
			METHOD_KEY_REGISTER1( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, put_loadAddress, no_const_t, UCS("IDiaSessionPtr::Put_loadAddress") );
			METHOD_KEY_REGISTER1( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymbolsByAddr, no_const_t, UCS("IDiaSessionPtr::GetSymbolsByAddr") );
			METHOD_KEY_REGISTER1( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getEnumTables, no_const_t, UCS("IDiaSessionPtr::GetEnumTables") );
			METHOD_KEY_REGISTER4( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findSymbolByAddr, no_const_t, UCS("IDiaSessionPtr::FindSymbolByAddr") );
			METHOD_KEY_REGISTER3( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findSymbolByRVA, no_const_t, UCS("IDiaSessionPtr::FindSymbolByRVA") );
			METHOD_KEY_REGISTER2( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, symbolById, no_const_t, UCS("IDiaSessionPtr::SymbolById") );
			METHOD_KEY_REGISTER2( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, symsAreEquiv, no_const_t, UCS("IDiaSessionPtr::SymsAreEquiv") );
			METHOD_KEY_REGISTER3( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findLinesByRVA, no_const_t, UCS("IDiaSessionPtr::FindLinesByRVA") );
			METHOD_KEY_REGISTER4( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findLinesByAddr, no_const_t, UCS("IDiaSessionPtr::FindLinesByAddr") );
			METHOD_KEY_REGISTER5( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findLinesByLinenum, no_const_t, UCS("IDiaSessionPtr::FindLinesByLinenum") );
			METHOD_KEY_REGISTER3( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findLines, no_const_t, UCS("IDiaSessionPtr::FindLines") );
			METHOD_KEY_REGISTER4( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findFile, no_const_t, UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_REGISTER2( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findFile, no_const_t, UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_REGISTER3( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findFile, no_const_t, UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_REGISTER1( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findFile, no_const_t, UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_REGISTER5( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findChildren, no_const_t, UCS("IDiaSessionPtr::FindChildren") );
			METHOD_KEY_REGISTER3( IDiaSessionPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, findChildren, no_const_t, UCS("IDiaSessionPtr::FindChildren") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( UCS("IDiaSessionPtr") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaSessionPtr::Get_globalScope") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaSessionPtr::Put_loadAddress") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaSessionPtr::GetSymbolsByAddr") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaSessionPtr::GetEnumTables") );
			METHOD_KEY_UNREGISTER4( UCS("IDiaSessionPtr::FindSymbolByAddr") );
			METHOD_KEY_UNREGISTER3( UCS("IDiaSessionPtr::FindSymbolByRVA") );
			METHOD_KEY_UNREGISTER2( UCS("IDiaSessionPtr::SymbolById") );
			METHOD_KEY_UNREGISTER2( UCS("IDiaSessionPtr::SymsAreEquiv") );
			METHOD_KEY_UNREGISTER3( UCS("IDiaSessionPtr::FindLinesByRVA") );
			METHOD_KEY_UNREGISTER4( UCS("IDiaSessionPtr::FindLinesByAddr") );
			METHOD_KEY_UNREGISTER5( UCS("IDiaSessionPtr::FindLinesByLinenum") );
			METHOD_KEY_UNREGISTER3( UCS("IDiaSessionPtr::FindLines") );
			METHOD_KEY_UNREGISTER4( UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_UNREGISTER2( UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_UNREGISTER3( UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaSessionPtr::FindFile") );
			METHOD_KEY_UNREGISTER5( UCS("IDiaSessionPtr::FindChildren") );
			METHOD_KEY_UNREGISTER3( UCS("IDiaSessionPtr::FindChildren") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDiaSessionPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDiaSessionPtr& a);

	template <class EncodingT>
	bool reset_IDiaSessionPtr(boost::shared_ptr< Base<EncodingT> >& val, IDiaSessionPtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDiaSessionPtrInterpreter_impl.hpp"

#endif