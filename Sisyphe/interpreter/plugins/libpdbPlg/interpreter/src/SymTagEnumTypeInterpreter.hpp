/*
 * SymTagEnumTypeInterpreter.hpp
 *
 *
 * @date 02-08-2019
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _SYMTAGENUMTYPE_INTERPRETER_H_
#define _SYMTAGENUMTYPE_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"
typedef enum SymTagEnum SymTagEnumType;

NAMESPACE_BEGIN(interp)

template <class EncodingT>
bool check_SymTagEnumType(boost::shared_ptr< Base<EncodingT> > const& val, SymTagEnumType& s);

NAMESPACE_END

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Sp√©cifie le type de symbole.
	template <class EncodingT>
	class SymTagEnumTypeInterpreter
	: public Base<EncodingT>
	{
	private:

	public:
		SymTagEnumTypeInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > getSymTagNull() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagExe() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagCompiland() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagCompilandDetails() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagCompilandEnv() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagFunction() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagBlock() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagData() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagAnnotation() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagLabel() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagPublicSymbol() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagUDT() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagEnum() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagFunctionType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagPointerType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagArrayType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagBaseType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagTypedef() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagBaseClass() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagFriend() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagFunctionArgType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagFuncDebugStart() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagFuncDebugEnd() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagUsingNamespace() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagVTableShape() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagVTable() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagCustom() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagThunk() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagCustomType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagManagedType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagDimension() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagCallSite() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagInlineSite() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagBaseInterface() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagVectorType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagMatrixType() const;

		boost::shared_ptr< Base<EncodingT> > getSymTagHLSLType() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( SymTagEnumTypeInterpreter, UCS("SymTagEnumType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagNull, const_t, UCS("SymTagEnumType::SymTagNull") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagExe, const_t, UCS("SymTagEnumType::SymTagExe") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagCompiland, const_t, UCS("SymTagEnumType::SymTagCompiland") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagCompilandDetails, const_t, UCS("SymTagEnumType::SymTagCompilandDetails") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagCompilandEnv, const_t, UCS("SymTagEnumType::SymTagCompilandEnv") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagFunction, const_t, UCS("SymTagEnumType::SymTagFunction") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagBlock, const_t, UCS("SymTagEnumType::SymTagBlock") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagData, const_t, UCS("SymTagEnumType::SymTagData") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagAnnotation, const_t, UCS("SymTagEnumType::SymTagAnnotation") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagLabel, const_t, UCS("SymTagEnumType::SymTagLabel") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagPublicSymbol, const_t, UCS("SymTagEnumType::SymTagPublicSymbol") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagUDT, const_t, UCS("SymTagEnumType::SymTagUDT") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagEnum, const_t, UCS("SymTagEnumType::SymTagEnum") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagFunctionType, const_t, UCS("SymTagEnumType::SymTagFunctionType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagPointerType, const_t, UCS("SymTagEnumType::SymTagPointerType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagArrayType, const_t, UCS("SymTagEnumType::SymTagArrayType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagBaseType, const_t, UCS("SymTagEnumType::SymTagBaseType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagTypedef, const_t, UCS("SymTagEnumType::SymTagTypedef") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagBaseClass, const_t, UCS("SymTagEnumType::SymTagBaseClass") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagFriend, const_t, UCS("SymTagEnumType::SymTagFriend") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagFunctionArgType, const_t, UCS("SymTagEnumType::SymTagFunctionArgType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagFuncDebugStart, const_t, UCS("SymTagEnumType::SymTagFuncDebugStart") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagFuncDebugEnd, const_t, UCS("SymTagEnumType::SymTagFuncDebugEnd") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagUsingNamespace, const_t, UCS("SymTagEnumType::SymTagUsingNamespace") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagVTableShape, const_t, UCS("SymTagEnumType::SymTagVTableShape") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagVTable, const_t, UCS("SymTagEnumType::SymTagVTable") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagCustom, const_t, UCS("SymTagEnumType::SymTagCustom") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagThunk, const_t, UCS("SymTagEnumType::SymTagThunk") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagCustomType, const_t, UCS("SymTagEnumType::SymTagCustomType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagManagedType, const_t, UCS("SymTagEnumType::SymTagManagedType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagDimension, const_t, UCS("SymTagEnumType::SymTagDimension") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagCallSite, const_t, UCS("SymTagEnumType::SymTagCallSite") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagInlineSite, const_t, UCS("SymTagEnumType::SymTagInlineSite") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagBaseInterface, const_t, UCS("SymTagEnumType::SymTagBaseInterface") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagVectorType, const_t, UCS("SymTagEnumType::SymTagVectorType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagMatrixType, const_t, UCS("SymTagEnumType::SymTagMatrixType") );
			METHOD_KEY_REGISTER ( SymTagEnumTypeInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymTagHLSLType, const_t, UCS("SymTagEnumType::SymTagHLSLType") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( UCS("SymTagEnumType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagNull") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagExe") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagCompiland") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagCompilandDetails") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagCompilandEnv") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagFunction") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagBlock") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagData") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagAnnotation") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagLabel") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagPublicSymbol") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagUDT") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagEnum") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagFunctionType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagPointerType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagArrayType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagBaseType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagTypedef") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagBaseClass") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagFriend") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagFunctionArgType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagFuncDebugStart") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagFuncDebugEnd") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagUsingNamespace") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagVTableShape") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagVTable") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagCustom") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagThunk") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagCustomType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagManagedType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagDimension") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagCallSite") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagInlineSite") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagBaseInterface") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagVectorType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagMatrixType") );
			METHOD_KEY_UNREGISTER ( UCS("SymTagEnumType::SymTagHLSLType") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "SymTagEnumTypeInterpreter_impl.hpp"

#endif