/*
 * IDiaEnumSymbolsByAddrPtrInterpreter_impl.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

template <class EncodingT>
class IDiaSymbolPtrInterpreter;

template <class EncodingT>
IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::IDiaEnumSymbolsByAddrPtrInterpreter()
{
}

template <class EncodingT>
void IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
void IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::initValue(const IDiaEnumSymbolsByAddrPtr& object)
{
	m_object = object;
}

template <class EncodingT>
IDiaEnumSymbolsByAddrPtr& IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::refValue()
{
	return m_object;
}

template <class EncodingT>
const IDiaEnumSymbolsByAddrPtr& IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::refValue() const
{
	return m_object;
}

template <class EncodingT>
IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::IDiaEnumSymbolsByAddrPtrInterpreter(const IDiaEnumSymbolsByAddrPtr& object)
{
	initValue(object);
}

template <class EncodingT>
const IDiaEnumSymbolsByAddrPtr& IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::value() const
{
	return refValue();
}

template <class EncodingT>
void IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::value(IDiaEnumSymbolsByAddrPtr const& object)
{
	if (&object != &value()) {
		tidyValue();
		initValue(object);
	}
}

template <class EncodingT>
typename EncodingT::string_t IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::getClassName() const
{
	return UCS("IDiaEnumSymbolsByAddrPtr");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, UCS("IDiaEnumSymbolsByAddrPtr"), method, args, ret) ||
			tryInvoke(this, UCS("Base"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in IDiaEnumSymbolsByAddrPtr, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Positionne l'énumérateur en effectuant une recherche par le nombre de sections et l'offset d'image.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::symbolByAddr(const boost::shared_ptr< Base<EncodingT> >& isect, const boost::shared_ptr< Base<EncodingT> >& offsect, boost::shared_ptr< Base<EncodingT> >& ppsymbol)
{
	boost::shared_ptr< Numeric<EncodingT> > res(new Numeric<EncodingT>());
	IDiaEnumSymbolsByAddrPtr valuePtr = refValue();
	if (valuePtr != NULL)
	{
		unsigned long nativeIsect;
		unsigned long nativeOffsect;
		IDiaSymbolPtr nativePpsymbol;
		if (check_numeric_i(isect, nativeIsect) && 
			check_numeric_i(offsect, nativeOffsect) && 
			check_IDiaSymbolPtr(ppsymbol, nativePpsymbol))
		{
			res->LLvalue(valuePtr->symbolByAddr(nativeIsect, nativeOffsect, &nativePpsymbol));
			reset_IDiaSymbolPtr(ppsymbol, nativePpsymbol);
		}
	}
	return res;
}

// Positionne l'énumérateur en effectuant une recherche par l'adresse virtuelle associée (RVA).
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::symbolByRVA(const boost::shared_ptr< Base<EncodingT> >& relativeVirtualAddress, boost::shared_ptr< Base<EncodingT> >& ppsymbol)
{
	boost::shared_ptr< Numeric<EncodingT> > res(new Numeric<EncodingT>());
	IDiaEnumSymbolsByAddrPtr valuePtr = refValue();
	if (valuePtr != NULL)
	{
		unsigned long nativeRelativeVirtualAddress;
		IDiaSymbolPtr nativePpsymbol;
		if (check_numeric_i(relativeVirtualAddress, nativeRelativeVirtualAddress) && 
			check_IDiaSymbolPtr(ppsymbol, nativePpsymbol))
		{
			res->LLvalue(valuePtr->symbolByRVA(nativeRelativeVirtualAddress, &nativePpsymbol));
			reset_IDiaSymbolPtr(ppsymbol, nativePpsymbol);
		}
	}
	return res;
}

// Récupère les symboles ci-dessous dans l'ordre par l'adresse.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::next(const boost::shared_ptr< Base<EncodingT> >& celt, boost::shared_ptr< Base<EncodingT> >& rgelt, boost::shared_ptr< Base<EncodingT> >& pceltFetched)
{
	boost::shared_ptr< Numeric<EncodingT> > res(new Numeric<EncodingT>());
	IDiaEnumSymbolsByAddrPtr valuePtr = refValue();
	if (valuePtr != NULL)
	{
		unsigned long nativeCelt;
		IDiaSymbolPtr nativeRgelt;
		unsigned long nativePceltFetched;
		if (check_numeric_i(celt, nativeCelt) && 
			check_IDiaSymbolPtr(rgelt, nativeRgelt) && 
			check_numeric_i(pceltFetched, nativePceltFetched))
		{
			res->LLvalue(valuePtr->Next(nativeCelt, &nativeRgelt, &nativePceltFetched));
			reset_IDiaSymbolPtr(rgelt, nativeRgelt);
			reset_numeric_i(pceltFetched, nativePceltFetched);
		}
	}
	return res;
}

// Récupère les symboles précédents dans l'ordre par l'adresse.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT>::prev(const boost::shared_ptr< Base<EncodingT> >& celt, boost::shared_ptr< Base<EncodingT> >& rgelt, boost::shared_ptr< Base<EncodingT> >& pceltFetched)
{
	boost::shared_ptr< Numeric<EncodingT> > res(new Numeric<EncodingT>());
	IDiaEnumSymbolsByAddrPtr valuePtr = refValue();
	if (valuePtr != NULL)
	{
		unsigned long nativeCelt;
		IDiaSymbolPtr nativeRgelt;
		unsigned long nativePceltFetched;
		if (check_numeric_i(celt, nativeCelt) && 
			check_IDiaSymbolPtr(rgelt, nativeRgelt) && 
			check_numeric_i(pceltFetched, nativePceltFetched))
		{
			res->LLvalue(valuePtr->Prev(nativeCelt, &nativeRgelt, &nativePceltFetched));
			reset_IDiaSymbolPtr(rgelt, nativeRgelt);
			reset_numeric_i(pceltFetched, nativePceltFetched);
		}
	}
	return res;
}


template <class EncodingT>
bool check_IDiaEnumSymbolsByAddrPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDiaEnumSymbolsByAddrPtr& a)
{
	boost::shared_ptr< IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->value();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDiaEnumSymbolsByAddrPtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

template <class EncodingT>
bool reset_IDiaEnumSymbolsByAddrPtr(boost::shared_ptr< Base<EncodingT> >& val, IDiaEnumSymbolsByAddrPtr const& a)
{
	boost::shared_ptr< IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDiaEnumSymbolsByAddrPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		value->value(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDiaEnumSymbolsByAddrPtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END

#undef A
#undef C