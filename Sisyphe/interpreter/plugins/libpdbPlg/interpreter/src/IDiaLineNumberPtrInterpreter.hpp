/*
 * IDiaLineNumberPtrInterpreter.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _IDIALINENUMBERPTR_INTERPRETER_H_
#define _IDIALINENUMBERPTR_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"
#include "DiaPtr.h"
typedef CDiaPtr<IDiaLineNumber> IDiaLineNumberPtr;
#include "IDiaSourceFilePtrInterpreter.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Accède aux informations qui décrivent le processus du mappage d'un bloc d'octets de texte image à un numéro de ligne du fichier source.
	template <class EncodingT>
	class IDiaLineNumberPtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDiaLineNumberPtr m_object;

		void initValue(const IDiaLineNumberPtr& object);

		IDiaLineNumberPtr& refValue();

		const IDiaLineNumberPtr& refValue() const;

		void tidyValue();

	public:
		IDiaLineNumberPtrInterpreter();

		IDiaLineNumberPtrInterpreter(const IDiaLineNumberPtr& object);

		const IDiaLineNumberPtr& value() const;

		void value(IDiaLineNumberPtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Récupère le numéro de ligne dans le fichier source.
		FACTORY_PROTOTYPE1(get_lineNumber, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_lineNumber(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Récupère le numéro de ligne source de base 1 où l'instruction ou l'expression se termine.
		FACTORY_PROTOTYPE1(get_lineNumberEnd, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_lineNumberEnd(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Récupère le numéro de colonne où l'expression ou l'instruction commence.
		FACTORY_PROTOTYPE1(get_columnNumber, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_columnNumber(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Récupère le numéro de colonne source de base 1 où l'expression ou l'instruction se termine.
		FACTORY_PROTOTYPE1(get_columnNumberEnd, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_columnNumberEnd(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Récupère le nombre d'octets dans un bloc.
		FACTORY_PROTOTYPE1(get_length, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_length(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// extrait une balise indiquant que ces informations de ligne décrivent le début d'une instruction, plutôt qu'une expression, dans la source de programme.
		FACTORY_PROTOTYPE1(get_statement, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_statement(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// extrait une référence au fichier source.
		FACTORY_PROTOTYPE1(get_sourceFile, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_sourceFile(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDiaLineNumberPtrInterpreter, UCS("IDiaLineNumberPtr") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_lineNumber, no_const_t, UCS("IDiaLineNumberPtr::Get_lineNumber") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_lineNumberEnd, no_const_t, UCS("IDiaLineNumberPtr::Get_lineNumberEnd") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_columnNumber, no_const_t, UCS("IDiaLineNumberPtr::Get_columnNumber") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_columnNumberEnd, no_const_t, UCS("IDiaLineNumberPtr::Get_columnNumberEnd") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_length, no_const_t, UCS("IDiaLineNumberPtr::Get_length") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_statement, no_const_t, UCS("IDiaLineNumberPtr::Get_statement") );
			METHOD_KEY_REGISTER1( IDiaLineNumberPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_sourceFile, no_const_t, UCS("IDiaLineNumberPtr::Get_sourceFile") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( UCS("IDiaLineNumberPtr") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_lineNumber") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_lineNumberEnd") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_columnNumber") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_columnNumberEnd") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_length") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_statement") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaLineNumberPtr::Get_sourceFile") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDiaLineNumberPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDiaLineNumberPtr& a);

	template <class EncodingT>
	bool reset_IDiaLineNumberPtr(boost::shared_ptr< Base<EncodingT> >& val, IDiaLineNumberPtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDiaLineNumberPtrInterpreter_impl.hpp"

#endif