/*
 * IDiaEnumSymbolsPtrInterpreter.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Pdb Interpreter generated by gensources.
 */

#ifndef _IDIAENUMSYMBOLSPTR_INTERPRETER_H_
#define _IDIAENUMSYMBOLSPTR_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"
#include "DiaPtr.h"
typedef CDiaPtr<IDiaEnumSymbols> IDiaEnumSymbolsPtr;
#include "IDiaSymbolPtrInterpreter.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Classe qui énumère les différents symboles contenus dans la source de données.
	template <class EncodingT>
	class IDiaEnumSymbolsPtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDiaEnumSymbolsPtr m_object;

		void initValue(const IDiaEnumSymbolsPtr& object);

		IDiaEnumSymbolsPtr& refValue();

		const IDiaEnumSymbolsPtr& refValue() const;

		void tidyValue();

	public:
		IDiaEnumSymbolsPtrInterpreter();

		IDiaEnumSymbolsPtrInterpreter(const IDiaEnumSymbolsPtr& object);

		const IDiaEnumSymbolsPtr& value() const;

		void value(IDiaEnumSymbolsPtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Récupère le nombre de symboles.
		FACTORY_PROTOTYPE1(get_Count, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > get_Count(boost::shared_ptr< Base<EncodingT> >& pRetVal);

		// Récupère un symbole au moyen d'un index.
		FACTORY_PROTOTYPE2(item, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > item(const boost::shared_ptr< Base<EncodingT> >& index, boost::shared_ptr< Base<EncodingT> >& symbol);

		// Récupère un nombre spécifié de symboles dans la séquence d'énumération.
		FACTORY_PROTOTYPE3(next, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > next(const boost::shared_ptr< Base<EncodingT> >& celt, boost::shared_ptr< Base<EncodingT> >& rgelt, boost::shared_ptr< Base<EncodingT> >& pceltFetched);

		// Ignore un nombre spécifié de symboles dans une séquence d'énumération.
		FACTORY_PROTOTYPE1(skip, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > skip(const boost::shared_ptr< Base<EncodingT> >& celt);

		// Réinitialise une séquence d'énumération au début.
		boost::shared_ptr< Base<EncodingT> > reset();

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDiaEnumSymbolsPtrInterpreter, UCS("IDiaEnumSymbolsPtr") );
			METHOD_KEY_REGISTER1( IDiaEnumSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, get_Count, no_const_t, UCS("IDiaEnumSymbolsPtr::Get_Count") );
			METHOD_KEY_REGISTER2( IDiaEnumSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, item, no_const_t, UCS("IDiaEnumSymbolsPtr::Item") );
			METHOD_KEY_REGISTER3( IDiaEnumSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, next, no_const_t, UCS("IDiaEnumSymbolsPtr::Next") );
			METHOD_KEY_REGISTER1( IDiaEnumSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, skip, no_const_t, UCS("IDiaEnumSymbolsPtr::Skip") );
			METHOD_KEY_REGISTER ( IDiaEnumSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, reset, no_const_t, UCS("IDiaEnumSymbolsPtr::Reset") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( UCS("IDiaEnumSymbolsPtr") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaEnumSymbolsPtr::Get_Count") );
			METHOD_KEY_UNREGISTER2( UCS("IDiaEnumSymbolsPtr::Item") );
			METHOD_KEY_UNREGISTER3( UCS("IDiaEnumSymbolsPtr::Next") );
			METHOD_KEY_UNREGISTER1( UCS("IDiaEnumSymbolsPtr::Skip") );
			METHOD_KEY_UNREGISTER ( UCS("IDiaEnumSymbolsPtr::Reset") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDiaEnumSymbolsPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDiaEnumSymbolsPtr& a);

	template <class EncodingT>
	bool reset_IDiaEnumSymbolsPtr(boost::shared_ptr< Base<EncodingT> >& val, IDiaEnumSymbolsPtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDiaEnumSymbolsPtrInterpreter_impl.hpp"

#endif