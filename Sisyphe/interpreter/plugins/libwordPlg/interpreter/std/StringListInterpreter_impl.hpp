/*
 * StringListInterpreter_impl.hpp
 *
 *
 * @date 29-05-2015
 * @author Teddy DIDE
 * @version 1.00
 * STL Interpreter generated by gensources.
 */

#include "StringListIteratorInterpreter.hpp"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

template <class EncodingT>
StringListInterpreter<EncodingT>::StringListInterpreter()
{}

template <class EncodingT>
StringListInterpreter<EncodingT>::~StringListInterpreter()
{
}

template <class EncodingT>
StringListInterpreter<EncodingT>::StringListInterpreter(const StringList& object)
: m_object(object)
{}

template <class EncodingT>
const StringList& StringListInterpreter<EncodingT>::getValue() const
{
	return m_object;
}

template <class EncodingT>
void StringListInterpreter<EncodingT>::setValue(StringList const& object)
{
	m_object = object;
}

template <class EncodingT>
typename EncodingT::string_t StringListInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new StringListInterpreter<EncodingT>());
}

template <class EncodingT>
typename EncodingT::string_t StringListInterpreter<EncodingT>::getClassName() const
{
	return C("StringList");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("StringList"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in StringList, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Retourne l'itérateur du début
template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListInterpreter<EncodingT>::begin() const
{
	shared_ptr< Base<EncodingT> > res(new StringListIteratorInterpreter<EncodingT>());
	res.reset(new StringListIteratorInterpreter<EncodingT>(m_object.begin()));
	return res;
}

// Retourne l'itérateur de fin
template <class EncodingT>
shared_ptr< Base<EncodingT> > StringListInterpreter<EncodingT>::end() const
{
	shared_ptr< Base<EncodingT> > res(new StringListIteratorInterpreter<EncodingT>());
	res.reset(new StringListIteratorInterpreter<EncodingT>(m_object.end()));
	return res;
}

template <class EncodingT>
bool check_StringList(shared_ptr< Base<EncodingT> > const& val, StringList& a)
{
	shared_ptr< StringListInterpreter<EncodingT> > value  = dynamic_pointer_cast< StringListInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "StringList expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_StringList(shared_ptr< Base<EncodingT> >& val, StringList const& a)
{
	shared_ptr< StringListInterpreter<EncodingT> > value  = dynamic_pointer_cast< StringListInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "StringList expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C
