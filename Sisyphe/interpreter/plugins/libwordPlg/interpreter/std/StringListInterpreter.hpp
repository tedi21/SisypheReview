/*
 * StringListInterpreter.hpp
 *
 *
 * @date 29-05-2015
 * @author Teddy DIDE
 * @version 1.00
 * STL Interpreter generated by gensources.
 */

#ifndef _STRINGLIST_INTERPRETER_H_
#define _STRINGLIST_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "String.hpp"
#include "Array.hpp"

#include <list>

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace std;

template <typename EncodingT>
using StringList = typename std::list<typename EncodingT::string_t>;

NAMESPACE_BEGIN(interp)

	// Classe représentant une liste de chaîne de caractères
	template <class EncodingT>
	class StringListInterpreter
	: public Base<EncodingT>
	{
	private:
                StringList<EncodingT> m_object;

	public:
		StringListInterpreter();

		~StringListInterpreter();

                StringListInterpreter(const StringList<EncodingT>& object);

                const StringList<EncodingT>& value() const;

                void value(StringList<EncodingT> const& object);

		virtual typename EncodingT::string_t toString() const;

                virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

                virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Retourne l'itérateur du début
                boost::shared_ptr< Base<EncodingT> > begin() const;

		// Retourne l'itérateur de fin
                boost::shared_ptr< Base<EncodingT> > end() const;

		FACTORY_BEGIN_REGISTER
                        CLASS_KEY_REGISTER  ( StringListInterpreter, UCS("StringList") );
                        METHOD_KEY_REGISTER ( StringListInterpreter, boost::shared_ptr< Base<EncodingT> >, begin, const_t, UCS("StringList::Begin") );
                        METHOD_KEY_REGISTER ( StringListInterpreter, boost::shared_ptr< Base<EncodingT> >, end, const_t, UCS("StringList::End") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
                        CLASS_KEY_UNREGISTER  ( UCS("StringList") );
                        METHOD_KEY_UNREGISTER ( UCS("StringList::Begin") );
                        METHOD_KEY_UNREGISTER ( UCS("StringList::End") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
        bool check_StringList(boost::shared_ptr< Base<EncodingT> > const& val, StringList<EncodingT>& a);

	template <class EncodingT>
        bool reset_StringList(boost::shared_ptr< Base<EncodingT> >& val, StringList<EncodingT> const& a);

NAMESPACE_END

#undef A
#undef C
#include "StringListInterpreter_impl.hpp"

#endif
