/*
 * WordXMLNodeListInterpreter.hpp
 *
 *
 * @date 17-03-2019
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#ifndef _WORDXMLNODELIST_INTERPRETER_H_
#define _WORDXMLNODELIST_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "Base.hpp"
#include "Array.hpp"
#include "WordXMLNodeList.h"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace libword;

NAMESPACE_BEGIN(interp)

	// Classe représentant une liste de noeuds XML du document Word.
	template <class EncodingT>
	class WordXMLNodeListInterpreter
	: public Base<EncodingT>
	{
	private:
		WordXMLNodeList m_object;

		void initValue(const WordXMLNodeList& object);

		WordXMLNodeList& refValue();

		const WordXMLNodeList& refValue() const;

		void tidyValue();

	public:
		WordXMLNodeListInterpreter();

		WordXMLNodeListInterpreter(const WordXMLNodeList& object);

		const WordXMLNodeList& value() const;

		void value(WordXMLNodeList const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Retourne le noeud à l'index *i*.
		FACTORY_PROTOTYPE1(item, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > item(const boost::shared_ptr< Base<EncodingT> >& i) const;

		// Retourne la taille de la liste.
		boost::shared_ptr< Base<EncodingT> > length() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( WordXMLNodeListInterpreter, C("WordXMLNodeList") );
			METHOD_KEY_REGISTER1( WordXMLNodeListInterpreter, boost::shared_ptr< Base<EncodingT> >, item, const_t, C("WordXMLNodeList::Item") );
			METHOD_KEY_REGISTER ( WordXMLNodeListInterpreter, boost::shared_ptr< Base<EncodingT> >, length, const_t, C("WordXMLNodeList::Length") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("WordXMLNodeList") );
			METHOD_KEY_UNREGISTER1( C("WordXMLNodeList::Item") );
			METHOD_KEY_UNREGISTER ( C("WordXMLNodeList::Length") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_WordXMLNodeList(boost::shared_ptr< Base<EncodingT> > const& val, WordXMLNodeList& a);

	template <class EncodingT>
	bool reset_WordXMLNodeList(boost::shared_ptr< Base<EncodingT> >& val, WordXMLNodeList const& a);

NAMESPACE_END

#undef A
#undef C
#include "WordXMLNodeListInterpreter_impl.hpp"

#endif