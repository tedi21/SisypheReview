/*
 * WordMacroInterpreter_impl.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
WordMacroInterpreter<EncodingT>::WordMacroInterpreter()
{
}

template <class EncodingT>
void WordMacroInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
WordMacroInterpreter<EncodingT>::~WordMacroInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void WordMacroInterpreter<EncodingT>::initValue(const WordMacro& object)
{
	m_object = object;
}

template <class EncodingT>
WordMacro& WordMacroInterpreter<EncodingT>::value()
{
	return m_object;
}

template <class EncodingT>
const WordMacro& WordMacroInterpreter<EncodingT>::value() const
{
	return m_object;
}

template <class EncodingT>
WordMacroInterpreter<EncodingT>::WordMacroInterpreter(const WordMacro& object)
{
	initValue(object);
}

template <class EncodingT>
WordMacroInterpreter<EncodingT>::WordMacroInterpreter(const WordMacroInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
WordMacroInterpreter<EncodingT>& WordMacroInterpreter<EncodingT>::operator=(const WordMacroInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const WordMacro& WordMacroInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void WordMacroInterpreter<EncodingT>::setValue(WordMacro const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t WordMacroInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > WordMacroInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new WordMacroInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t WordMacroInterpreter<EncodingT>::getClassName() const
{
	return C("WordMacro");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > WordMacroInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("WordMacro"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in WordMacro, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Convertie un fichier en xml.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordMacroInterpreter<EncodingT>::convertToXML(const shared_ptr< Base<EncodingT> >& file, const shared_ptr< Base<EncodingT> >& xmlFile, const shared_ptr< Base<EncodingT> >& acceptAllRevisions) const
{
	shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>());
	typename EncodingT::string_t nativeFile;
	typename EncodingT::string_t nativeXmlFile;
	bool nativeAcceptAllRevisions;
	if (check_string<EncodingT>(file, nativeFile) && 
		check_string<EncodingT>(xmlFile, nativeXmlFile) && 
		check_bool(acceptAllRevisions, nativeAcceptAllRevisions))
	{
		res.reset(new Bool<EncodingT>(value().convertToXML(nativeFile.c_str(), nativeXmlFile.c_str(), nativeAcceptAllRevisions)));
	}
	return res;
}

// Convertie un fichier en doc.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordMacroInterpreter<EncodingT>::convertToDOC(const shared_ptr< Base<EncodingT> >& file, const shared_ptr< Base<EncodingT> >& docFile, const shared_ptr< Base<EncodingT> >& acceptAllRevisions) const
{
	shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>());
	typename EncodingT::string_t nativeFile;
	typename EncodingT::string_t nativeDocFile;
	bool nativeAcceptAllRevisions;
	if (check_string<EncodingT>(file, nativeFile) && 
		check_string<EncodingT>(docFile, nativeDocFile) && 
		check_bool(acceptAllRevisions, nativeAcceptAllRevisions))
	{
		res.reset(new Bool<EncodingT>(value().convertToDOC(nativeFile.c_str(), nativeDocFile.c_str(), nativeAcceptAllRevisions)));
	}
	return res;
}

// Convertie un fichier en pdf.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordMacroInterpreter<EncodingT>::convertToPDF(const shared_ptr< Base<EncodingT> >& file, const shared_ptr< Base<EncodingT> >& pdfFile, const shared_ptr< Base<EncodingT> >& acceptAllRevisions) const
{
	shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>());
	typename EncodingT::string_t nativeFile;
	typename EncodingT::string_t nativePdfFile;
	bool nativeAcceptAllRevisions;
	if (check_string<EncodingT>(file, nativeFile) && 
		check_string<EncodingT>(pdfFile, nativePdfFile) && 
		check_bool(acceptAllRevisions, nativeAcceptAllRevisions))
	{
		res.reset(new Bool<EncodingT>(value().convertToPDF(nativeFile.c_str(), nativePdfFile.c_str(), nativeAcceptAllRevisions)));
	}
	return res;
}

// Convertie un fichier en xdoc.
template <class EncodingT>
shared_ptr< Base<EncodingT> > WordMacroInterpreter<EncodingT>::convertToXDOC(const shared_ptr< Base<EncodingT> >& file, const shared_ptr< Base<EncodingT> >& xdocFile, const shared_ptr< Base<EncodingT> >& acceptAllRevisions) const
{
	shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>());
	typename EncodingT::string_t nativeFile;
	typename EncodingT::string_t nativeXdocFile;
	bool nativeAcceptAllRevisions;
	if (check_string<EncodingT>(file, nativeFile) && 
		check_string<EncodingT>(xdocFile, nativeXdocFile) && 
		check_bool(acceptAllRevisions, nativeAcceptAllRevisions))
	{
		res.reset(new Bool<EncodingT>(value().convertToXDOC(nativeFile.c_str(), nativeXdocFile.c_str(), nativeAcceptAllRevisions)));
	}
	return res;
}


template <class EncodingT>
bool check_WordMacro(shared_ptr< Base<EncodingT> > const& val, WordMacro& a)
{
	shared_ptr< WordMacroInterpreter<EncodingT> > value  = dynamic_pointer_cast< WordMacroInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "WordMacro expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_WordMacro(shared_ptr< Base<EncodingT> >& val, WordMacro const& a)
{
	shared_ptr< WordMacroInterpreter<EncodingT> > value  = dynamic_pointer_cast< WordMacroInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "WordMacro expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C