/*
 * WordMacroInterpreter.hpp
 *
 *
 * @date 23-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#ifndef _WORDMACRO_INTERPRETER_H_
#define _WORDMACRO_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "WordMacro.h"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace libword;

NAMESPACE_BEGIN(interp)

	// Classe permettant d'executer des macros Word. 
	template <class EncodingT>
	class WordMacroInterpreter
	: public Base<EncodingT>
	{
	private:
		WordMacro m_object;

		void initValue(const WordMacro& object);

		WordMacro& value();

		const WordMacro& value() const;

		void tidyValue();

	public:
		WordMacroInterpreter();

		~WordMacroInterpreter();

		WordMacroInterpreter(const WordMacro& object);

		WordMacroInterpreter(const WordMacroInterpreter<EncodingT>& rhs);

		WordMacroInterpreter<EncodingT>& operator=(const WordMacroInterpreter<EncodingT>& rhs);

		const WordMacro& getValue() const;

		void setValue(WordMacro const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Convertie un fichier en xml.
		FACTORY_PROTOTYPE3(convertToXML, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > convertToXML(const boost::shared_ptr< Base<EncodingT> >& file, const boost::shared_ptr< Base<EncodingT> >& xmlFile, const boost::shared_ptr< Base<EncodingT> >& acceptAllRevisions) const;

		// Convertie un fichier en doc.
		FACTORY_PROTOTYPE3(convertToDOC, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > convertToDOC(const boost::shared_ptr< Base<EncodingT> >& file, const boost::shared_ptr< Base<EncodingT> >& docFile, const boost::shared_ptr< Base<EncodingT> >& acceptAllRevisions) const;

		// Convertie un fichier en pdf.
		FACTORY_PROTOTYPE3(convertToPDF, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > convertToPDF(const boost::shared_ptr< Base<EncodingT> >& file, const boost::shared_ptr< Base<EncodingT> >& pdfFile, const boost::shared_ptr< Base<EncodingT> >& acceptAllRevisions) const;

		// Convertie un fichier en xdoc.
		FACTORY_PROTOTYPE3(convertToXDOC, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > convertToXDOC(const boost::shared_ptr< Base<EncodingT> >& file, const boost::shared_ptr< Base<EncodingT> >& xdocFile, const boost::shared_ptr< Base<EncodingT> >& acceptAllRevisions) const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( WordMacroInterpreter, C("WordMacro") );
			METHOD_KEY_REGISTER3( WordMacroInterpreter, boost::shared_ptr< Base<EncodingT> >, convertToXML, const_t, C("WordMacro::ConvertToXML") );
			METHOD_KEY_REGISTER3( WordMacroInterpreter, boost::shared_ptr< Base<EncodingT> >, convertToDOC, const_t, C("WordMacro::ConvertToDOC") );
			METHOD_KEY_REGISTER3( WordMacroInterpreter, boost::shared_ptr< Base<EncodingT> >, convertToPDF, const_t, C("WordMacro::ConvertToPDF") );
			METHOD_KEY_REGISTER3( WordMacroInterpreter, boost::shared_ptr< Base<EncodingT> >, convertToXDOC, const_t, C("WordMacro::ConvertToXDOC") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("WordMacro") );
			METHOD_KEY_UNREGISTER3( C("WordMacro::ConvertToXML") );
			METHOD_KEY_UNREGISTER3( C("WordMacro::ConvertToDOC") );
			METHOD_KEY_UNREGISTER3( C("WordMacro::ConvertToPDF") );
			METHOD_KEY_UNREGISTER3( C("WordMacro::ConvertToXDOC") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_WordMacro(boost::shared_ptr< Base<EncodingT> > const& val, WordMacro& a);

	template <class EncodingT>
	bool reset_WordMacro(boost::shared_ptr< Base<EncodingT> >& val, WordMacro const& a);

NAMESPACE_END

#undef A
#undef C
#include "WordMacroInterpreter_impl.hpp"

#endif