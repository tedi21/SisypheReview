/*
 * WordXMLNodeListInterpreter_impl.hpp
 *
 *
 * @date 23-08-2016
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)

template <class EncodingT>
class WordXMLNodeInterpreter;

template <class EncodingT>
WordXMLNodeListInterpreter<EncodingT>::WordXMLNodeListInterpreter()
{
}

template <class EncodingT>
void WordXMLNodeListInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
WordXMLNodeListInterpreter<EncodingT>::~WordXMLNodeListInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void WordXMLNodeListInterpreter<EncodingT>::initValue(const WordXMLNodeList& object)
{
	m_object = object;
}

template <class EncodingT>
WordXMLNodeList& WordXMLNodeListInterpreter<EncodingT>::value()
{
	return m_object;
}

template <class EncodingT>
const WordXMLNodeList& WordXMLNodeListInterpreter<EncodingT>::value() const
{
	return m_object;
}

template <class EncodingT>
WordXMLNodeListInterpreter<EncodingT>::WordXMLNodeListInterpreter(const WordXMLNodeList& object)
{
	initValue(object);
}

template <class EncodingT>
WordXMLNodeListInterpreter<EncodingT>::WordXMLNodeListInterpreter(const WordXMLNodeListInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
WordXMLNodeListInterpreter<EncodingT>& WordXMLNodeListInterpreter<EncodingT>::operator=(const WordXMLNodeListInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const WordXMLNodeList& WordXMLNodeListInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void WordXMLNodeListInterpreter<EncodingT>::setValue(WordXMLNodeList const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t WordXMLNodeListInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > WordXMLNodeListInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new WordXMLNodeListInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t WordXMLNodeListInterpreter<EncodingT>::getClassName() const
{
	return C("WordXMLNodeList");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > WordXMLNodeListInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("WordXMLNodeList"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in WordXMLNodeList, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Retourne le noeud Ã  l'index *i*.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > WordXMLNodeListInterpreter<EncodingT>::item(const boost::shared_ptr< Base<EncodingT> >& i) const
{
	boost::shared_ptr< Base<EncodingT> > res(new WordXMLNodeInterpreter<EncodingT>());
	unsigned long nativeI;
	if (check_numeric(i, nativeI))
	{
		res.reset(new WordXMLNodeInterpreter<EncodingT>(value().item(nativeI)));
	}
	return res;
}

// Retourne la taille de la liste.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > WordXMLNodeListInterpreter<EncodingT>::length() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	res.reset(new Numeric<EncodingT>(value().length()));
	return res;
}


template <class EncodingT>
bool check_WordXMLNodeList(boost::shared_ptr< Base<EncodingT> > const& val, WordXMLNodeList& a)
{
	boost::shared_ptr< WordXMLNodeListInterpreter<EncodingT> > value  = dynamic_pointer_cast< WordXMLNodeListInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "WordXMLNodeList expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

template <class EncodingT>
bool reset_WordXMLNodeList(boost::shared_ptr< Base<EncodingT> >& val, WordXMLNodeList const& a)
{
	boost::shared_ptr< WordXMLNodeListInterpreter<EncodingT> > value  = dynamic_pointer_cast< WordXMLNodeListInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "WordXMLNodeList expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END

#undef A
#undef C