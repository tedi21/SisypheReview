/*
 * WordXMLDocumentInterpreter.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Word Interpreter generated by gensources.
 */

#ifndef _WORDXMLDOCUMENT_INTERPRETER_H_
#define _WORDXMLDOCUMENT_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "WordXMLDocument.h"

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;
using namespace libword;

NAMESPACE_BEGIN(interp)

	// Classe représentant un document XML.
	template <class EncodingT>
	class WordXMLDocumentInterpreter
	: public Base<EncodingT>
	{
	private:
WordXMLDocument* m_object;  
        bool m_allocated;

		void initValue(const WordXMLDocument& object);

		WordXMLDocument& value();

		const WordXMLDocument& value() const;

		void tidyValue();

	public:
		WordXMLDocumentInterpreter();

		~WordXMLDocumentInterpreter();

		WordXMLDocumentInterpreter(const WordXMLDocument& object);

		WordXMLDocumentInterpreter(const WordXMLDocumentInterpreter<EncodingT>& rhs);

		WordXMLDocumentInterpreter<EncodingT>& operator=(const WordXMLDocumentInterpreter<EncodingT>& rhs);

		const WordXMLDocument& getValue() const;

		void setValue(WordXMLDocument const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params);

		// Crée un nouveau noeud.
		FACTORY_PROTOTYPE1(createNode, In< shared_ptr< Base<EncodingT> > >)
		shared_ptr< Base<EncodingT> > createNode(const shared_ptr< Base<EncodingT> >& tagName);

		// Crée un noeud texte.
		FACTORY_PROTOTYPE1(createTextNode, In< shared_ptr< Base<EncodingT> > >)
		shared_ptr< Base<EncodingT> > createTextNode(const shared_ptr< Base<EncodingT> >& txt);

		// Retourne le noeud racine du document.
		shared_ptr< Base<EncodingT> > getDocumentNode();

		// Ouvre un fichier Word XML.
		FACTORY_PROTOTYPE1(parse, In< shared_ptr< Base<EncodingT> > >)
		void parse(const shared_ptr< Base<EncodingT> >& doc);

		// Enregistre le document.
		void save() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( WordXMLDocumentInterpreter, C("WordXMLDocument") );
			METHOD_KEY_REGISTER1( WordXMLDocumentInterpreter, shared_ptr< Base<EncodingT> >, createNode, no_const_t, C("WordXMLDocument::CreateNode") );
			METHOD_KEY_REGISTER1( WordXMLDocumentInterpreter, shared_ptr< Base<EncodingT> >, createTextNode, no_const_t, C("WordXMLDocument::CreateTextNode") );
			METHOD_KEY_REGISTER ( WordXMLDocumentInterpreter, shared_ptr< Base<EncodingT> >, getDocumentNode, no_const_t, C("WordXMLDocument::DocumentNode") );
			METHOD_KEY_REGISTER1( WordXMLDocumentInterpreter, void, parse, no_const_t, C("WordXMLDocument::Parse") );
			METHOD_KEY_REGISTER ( WordXMLDocumentInterpreter, void, save, const_t, C("WordXMLDocument::Save") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("WordXMLDocument") );
			METHOD_KEY_UNREGISTER1( C("WordXMLDocument::CreateNode") );
			METHOD_KEY_UNREGISTER1( C("WordXMLDocument::CreateTextNode") );
			METHOD_KEY_UNREGISTER ( C("WordXMLDocument::DocumentNode") );
			METHOD_KEY_UNREGISTER1( C("WordXMLDocument::Parse") );
			METHOD_KEY_UNREGISTER ( C("WordXMLDocument::Save") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_WordXMLDocument(shared_ptr< Base<EncodingT> > const& val, WordXMLDocument& a);

	template <class EncodingT>
	bool reset_WordXMLDocument(shared_ptr< Base<EncodingT> >& val, WordXMLDocument const& a);

NAMESPACE_END

#undef A
#undef C
#include "WordXMLDocumentInterpreter_impl.hpp"

#endif