/*
 * IDebugSystemObjectsPtrInterpreter.hpp
 *
 *
 * @date 24-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _IDEBUGSYSTEMOBJECTSPTR_INTERPRETER_H_
#define _IDEBUGSYSTEMOBJECTSPTR_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "DebugPtr.h"
typedef CDebugPtr<IDebugSystemObjects> IDebugSystemObjectsPtr;

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Classe permettant d'accéder aux informations du processus en cours de débogage.
	template <class EncodingT>
	class IDebugSystemObjectsPtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDebugSystemObjectsPtr m_object;

		void initValue(const IDebugSystemObjectsPtr& object);

		IDebugSystemObjectsPtr& value();

		const IDebugSystemObjectsPtr& value() const;

		void tidyValue();

	public:
		IDebugSystemObjectsPtrInterpreter();

		~IDebugSystemObjectsPtrInterpreter();

		IDebugSystemObjectsPtrInterpreter(const IDebugSystemObjectsPtr& object);

		IDebugSystemObjectsPtrInterpreter(const IDebugSystemObjectsPtrInterpreter<EncodingT>& rhs);

		IDebugSystemObjectsPtrInterpreter<EncodingT>& operator=(const IDebugSystemObjectsPtrInterpreter<EncodingT>& rhs);

		const IDebugSystemObjectsPtr& getValue() const;

		void setValue(IDebugSystemObjectsPtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Returns the engine process ID for the current process.
		FACTORY_PROTOTYPE1(getCurrentProcessId, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getCurrentProcessId(boost::shared_ptr< Base<EncodingT> >& processId);

		// Returns the location of the system data structure describing the current process.
		FACTORY_PROTOTYPE1(getCurrentProcessDataOffset, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getCurrentProcessDataOffset(boost::shared_ptr< Base<EncodingT> >& offset);

		// Returns the name of executable file loaded in the current process.
		FACTORY_PROTOTYPE1(getCurrentProcessExecutableName, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getCurrentProcessExecutableName(boost::shared_ptr< Base<EncodingT> >& buffer);

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDebugSystemObjectsPtrInterpreter, C("IDebugSystemObjectsPtr") );
			METHOD_KEY_REGISTER1( IDebugSystemObjectsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getCurrentProcessId, no_const_t, C("IDebugSystemObjectsPtr::GetCurrentProcessId") );
			METHOD_KEY_REGISTER1( IDebugSystemObjectsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getCurrentProcessDataOffset, no_const_t, C("IDebugSystemObjectsPtr::GetCurrentProcessDataOffset") );
			METHOD_KEY_REGISTER1( IDebugSystemObjectsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getCurrentProcessExecutableName, no_const_t, C("IDebugSystemObjectsPtr::GetCurrentProcessExecutableName") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("IDebugSystemObjectsPtr") );
			METHOD_KEY_UNREGISTER1( C("IDebugSystemObjectsPtr::GetCurrentProcessId") );
			METHOD_KEY_UNREGISTER1( C("IDebugSystemObjectsPtr::GetCurrentProcessDataOffset") );
			METHOD_KEY_UNREGISTER1( C("IDebugSystemObjectsPtr::GetCurrentProcessExecutableName") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDebugSystemObjectsPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDebugSystemObjectsPtr& a);

	template <class EncodingT>
	bool reset_IDebugSystemObjectsPtr(boost::shared_ptr< Base<EncodingT> >& val, IDebugSystemObjectsPtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDebugSystemObjectsPtrInterpreter_impl.hpp"

#endif