/*
 * DEBUG_STACK_FRAMEInterpreter_impl.hpp
 *
 *
 * @date 02-08-2019
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
DEBUG_STACK_FRAMEInterpreter<EncodingT>::DEBUG_STACK_FRAMEInterpreter()
{
}

template <class EncodingT>
void DEBUG_STACK_FRAMEInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
void DEBUG_STACK_FRAMEInterpreter<EncodingT>::initValue(const DEBUG_STACK_FRAME& object)
{
	m_object = object;
}

template <class EncodingT>
DEBUG_STACK_FRAME& DEBUG_STACK_FRAMEInterpreter<EncodingT>::refValue()
{
	return m_object;
}

template <class EncodingT>
const DEBUG_STACK_FRAME& DEBUG_STACK_FRAMEInterpreter<EncodingT>::refValue() const
{
	return m_object;
}

template <class EncodingT>
DEBUG_STACK_FRAMEInterpreter<EncodingT>::DEBUG_STACK_FRAMEInterpreter(const DEBUG_STACK_FRAME& object)
{
	initValue(object);
}

template <class EncodingT>
const DEBUG_STACK_FRAME& DEBUG_STACK_FRAMEInterpreter<EncodingT>::value() const
{
	return refValue();
}

template <class EncodingT>
void DEBUG_STACK_FRAMEInterpreter<EncodingT>::value(DEBUG_STACK_FRAME const& object)
{
	if (&object != &value()) {
		tidyValue();
		initValue(object);
	}
}

template <class EncodingT>
typename EncodingT::string_t DEBUG_STACK_FRAMEInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new DEBUG_STACK_FRAMEInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t DEBUG_STACK_FRAMEInterpreter<EncodingT>::getClassName() const
{
	return UCS("DEBUG_STACK_FRAME");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, UCS("DEBUG_STACK_FRAME"), method, args, ret) ||
			tryInvoke(this, UCS("Base"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in DEBUG_STACK_FRAME, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getinstructionOffset() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(refValue().InstructionOffset));
	return res;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getreturnOffset() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(refValue().ReturnOffset));
	return res;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getframeOffset() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(refValue().FrameOffset));
	return res;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getstackOffset() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(refValue().StackOffset));
	return res;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getfuncTableEntry() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(refValue().FuncTableEntry));
	return res;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getvirtual() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Bool<EncodingT>(refValue().Virtual));
	return res;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > DEBUG_STACK_FRAMEInterpreter<EncodingT>::getframeNumber() const
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(refValue().FrameNumber));
	return res;
}


template <class EncodingT>
bool check_DEBUG_STACK_FRAME(boost::shared_ptr< Base<EncodingT> > const& val, DEBUG_STACK_FRAME& a)
{
	boost::shared_ptr< DEBUG_STACK_FRAMEInterpreter<EncodingT> > value  = dynamic_pointer_cast< DEBUG_STACK_FRAMEInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->value();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "DEBUG_STACK_FRAME expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

template <class EncodingT>
bool reset_DEBUG_STACK_FRAME(boost::shared_ptr< Base<EncodingT> >& val, DEBUG_STACK_FRAME const& a)
{
	boost::shared_ptr< DEBUG_STACK_FRAMEInterpreter<EncodingT> > value  = dynamic_pointer_cast< DEBUG_STACK_FRAMEInterpreter<EncodingT> >(val);
	if (value)
	{
		value->value(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "DEBUG_STACK_FRAME expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END

#undef A
#undef C