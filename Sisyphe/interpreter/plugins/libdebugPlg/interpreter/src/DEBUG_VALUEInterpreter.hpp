/*
 * DEBUG_VALUEInterpreter.hpp
 *
 *
 * @date 02-08-2019
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUG_VALUE_INTERPRETER_H_
#define _DEBUG_VALUE_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// The DEBUG_VALUE structure holds register and expression values.
	template <class EncodingT>
	class DEBUG_VALUEInterpreter
	: public Base<EncodingT>
	{
	private:
		DEBUG_VALUE m_object;

		void initValue(const DEBUG_VALUE& object);

		DEBUG_VALUE& refValue();

		const DEBUG_VALUE& refValue() const;

		void tidyValue();

	public:
		DEBUG_VALUEInterpreter();

		DEBUG_VALUEInterpreter(const DEBUG_VALUE& object);

		const DEBUG_VALUE& value() const;

		void value(DEBUG_VALUE const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > geti8() const;

		boost::shared_ptr< Base<EncodingT> > geti16() const;

		boost::shared_ptr< Base<EncodingT> > geti32() const;

		boost::shared_ptr< Base<EncodingT> > geti64() const;

		boost::shared_ptr< Base<EncodingT> > getuI8() const;

		boost::shared_ptr< Base<EncodingT> > getuI16() const;

		boost::shared_ptr< Base<EncodingT> > getuI32() const;

		boost::shared_ptr< Base<EncodingT> > getuI64() const;

		boost::shared_ptr< Base<EncodingT> > getf32() const;

		boost::shared_ptr< Base<EncodingT> > getf64() const;

		boost::shared_ptr< Base<EncodingT> > getc8() const;

		boost::shared_ptr< Base<EncodingT> > getc16() const;

		boost::shared_ptr< Base<EncodingT> > gettype() const;

		boost::shared_ptr< Base<EncodingT> > gettailOfRawBytes() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DEBUG_VALUEInterpreter, UCS("DEBUG_VALUE") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, geti8, const_t, UCS("DEBUG_VALUE::I8") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, geti16, const_t, UCS("DEBUG_VALUE::I16") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, geti32, const_t, UCS("DEBUG_VALUE::I32") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, geti64, const_t, UCS("DEBUG_VALUE::I64") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getuI8, const_t, UCS("DEBUG_VALUE::UI8") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getuI16, const_t, UCS("DEBUG_VALUE::UI16") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getuI32, const_t, UCS("DEBUG_VALUE::UI32") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getuI64, const_t, UCS("DEBUG_VALUE::UI64") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getf32, const_t, UCS("DEBUG_VALUE::F32") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getf64, const_t, UCS("DEBUG_VALUE::F64") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getc8, const_t, UCS("DEBUG_VALUE::C8") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, getc16, const_t, UCS("DEBUG_VALUE::C16") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, gettype, const_t, UCS("DEBUG_VALUE::Type") );
			METHOD_KEY_REGISTER ( DEBUG_VALUEInterpreter, boost::shared_ptr< Base<EncodingT> >, gettailOfRawBytes, const_t, UCS("DEBUG_VALUE::TailOfRawBytes") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( UCS("DEBUG_VALUE") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::I8") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::I16") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::I32") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::I64") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::UI8") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::UI16") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::UI32") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::UI64") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::F32") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::F64") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::C8") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::C16") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::Type") );
			METHOD_KEY_UNREGISTER ( UCS("DEBUG_VALUE::TailOfRawBytes") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_DEBUG_VALUE(boost::shared_ptr< Base<EncodingT> > const& val, DEBUG_VALUE& a);

	template <class EncodingT>
	bool reset_DEBUG_VALUE(boost::shared_ptr< Base<EncodingT> >& val, DEBUG_VALUE const& a);

NAMESPACE_END

#undef A
#undef C
#include "DEBUG_VALUEInterpreter_impl.hpp"

#endif