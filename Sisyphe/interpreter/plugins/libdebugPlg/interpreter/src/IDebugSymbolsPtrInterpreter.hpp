/*
 * IDebugSymbolsPtrInterpreter.hpp
 *
 *
 * @date 20-10-2018
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _IDEBUGSYMBOLSPTR_INTERPRETER_H_
#define _IDEBUGSYMBOLSPTR_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "Base.hpp"
#include "Array.hpp"
#include "DebugPtr.h"
typedef CDebugPtr<IDebugSymbols> IDebugSymbolsPtr;

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Classe permettant d'accéder aux informations de symboles de débogage.
	template <class EncodingT>
	class IDebugSymbolsPtrInterpreter
	: public Base<EncodingT>
	{
	private:
		IDebugSymbolsPtr m_object;

		void initValue(const IDebugSymbolsPtr& object);

		IDebugSymbolsPtr& refValue();

		const IDebugSymbolsPtr& refValue() const;

		void tidyValue();

	public:
		IDebugSymbolsPtrInterpreter();

		~IDebugSymbolsPtrInterpreter();

		IDebugSymbolsPtrInterpreter(const IDebugSymbolsPtr& object);

		IDebugSymbolsPtrInterpreter(const IDebugSymbolsPtrInterpreter<EncodingT>& rhs);

		IDebugSymbolsPtrInterpreter<EncodingT>& operator=(const IDebugSymbolsPtrInterpreter<EncodingT>& rhs);

		const IDebugSymbolsPtr& value() const;

		void value(IDebugSymbolsPtr const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Turns on some of the engine's global symbol options. 
		FACTORY_PROTOTYPE1(addSymbolOptions, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > addSymbolOptions(const boost::shared_ptr< Base<EncodingT> >& options);

		// Appends directories to the executable image path.
		FACTORY_PROTOTYPE1(appendImagePath, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > appendImagePath(const boost::shared_ptr< Base<EncodingT> >& addition);

		// Appends directories to the source path.
		FACTORY_PROTOTYPE1(appendSourcePath, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > appendSourcePath(const boost::shared_ptr< Base<EncodingT> >& addition);

		// Appends directories to the symbol path.
		FACTORY_PROTOTYPE1(appendSymbolPath, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > appendSymbolPath(const boost::shared_ptr< Base<EncodingT> >& addition);

		// Returns the base address of module which contains the specified symbol.
		FACTORY_PROTOTYPE2(getSymbolModule, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getSymbolModule(const boost::shared_ptr< Base<EncodingT> >& symbol, boost::shared_ptr< Base<EncodingT> >& base);

		// Returns the engine's global symbol options.
		FACTORY_PROTOTYPE1(getSymbolOptions, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getSymbolOptions(boost::shared_ptr< Base<EncodingT> >& options);

		// Returns the symbol path.
		FACTORY_PROTOTYPE1(getSymbolPath, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getSymbolPath(boost::shared_ptr< Base<EncodingT> >& buffer);

		// Returns the source filename and the line number within the source file of an instruction in the target.
		FACTORY_PROTOTYPE4(getLineByOffset, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getLineByOffset(const boost::shared_ptr< Base<EncodingT> >& offset, boost::shared_ptr< Base<EncodingT> >& line, boost::shared_ptr< Base<EncodingT> >& fileBuffer, boost::shared_ptr< Base<EncodingT> >& displacement);

		// Searches through the target's modules for one whose memory allocation includes the specified location.
		FACTORY_PROTOTYPE4(getModuleByOffset, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getModuleByOffset(const boost::shared_ptr< Base<EncodingT> >& offset, const boost::shared_ptr< Base<EncodingT> >& startIndex, boost::shared_ptr< Base<EncodingT> >& index, boost::shared_ptr< Base<EncodingT> >& base);

		// Returns the name of the symbol at the specified location in the target's virtual address space.
		FACTORY_PROTOTYPE3(getNameByOffset, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getNameByOffset(const boost::shared_ptr< Base<EncodingT> >& offset, boost::shared_ptr< Base<EncodingT> >& nameBuffer, boost::shared_ptr< Base<EncodingT> >& displacement);

		// Returns the name of a symbol that is located near the specified location. 
		FACTORY_PROTOTYPE4(getNearNameByOffset, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getNearNameByOffset(const boost::shared_ptr< Base<EncodingT> >& offset, const boost::shared_ptr< Base<EncodingT> >& delta, boost::shared_ptr< Base<EncodingT> >& nameBuffer, boost::shared_ptr< Base<EncodingT> >& displacement);

		// The GetOffsetByLine method returns the location of the instruction that corresponds to a specified line in the source code.
		FACTORY_PROTOTYPE3(getOffsetByLine, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getOffsetByLine(const boost::shared_ptr< Base<EncodingT> >& line, const boost::shared_ptr< Base<EncodingT> >& file, boost::shared_ptr< Base<EncodingT> >& offset);

		// The GetSourceFileLineOffsets method maps each line in a source file to a location in the target's memory.
		FACTORY_PROTOTYPE2(getSourceFileLineOffsets, In< boost::shared_ptr< Base<EncodingT> > >, InOut< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > getSourceFileLineOffsets(const boost::shared_ptr< Base<EncodingT> >& file, boost::shared_ptr< Base<EncodingT> >& addresses);

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( IDebugSymbolsPtrInterpreter, C("IDebugSymbolsPtr") );
			METHOD_KEY_REGISTER1( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, addSymbolOptions, no_const_t, C("IDebugSymbolsPtr::AddSymbolOptions") );
			METHOD_KEY_REGISTER1( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, appendImagePath, no_const_t, C("IDebugSymbolsPtr::AppendImagePath") );
			METHOD_KEY_REGISTER1( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, appendSourcePath, no_const_t, C("IDebugSymbolsPtr::AppendSourcePath") );
			METHOD_KEY_REGISTER1( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, appendSymbolPath, no_const_t, C("IDebugSymbolsPtr::AppendSymbolPath") );
			METHOD_KEY_REGISTER2( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymbolModule, no_const_t, C("IDebugSymbolsPtr::GetSymbolModule") );
			METHOD_KEY_REGISTER1( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymbolOptions, no_const_t, C("IDebugSymbolsPtr::GetSymbolOptions") );
			METHOD_KEY_REGISTER1( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getSymbolPath, no_const_t, C("IDebugSymbolsPtr::GetSymbolPath") );
			METHOD_KEY_REGISTER4( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getLineByOffset, no_const_t, C("IDebugSymbolsPtr::GetLineByOffset") );
			METHOD_KEY_REGISTER4( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getModuleByOffset, no_const_t, C("IDebugSymbolsPtr::GetModuleByOffset") );
			METHOD_KEY_REGISTER3( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getNameByOffset, no_const_t, C("IDebugSymbolsPtr::GetNameByOffset") );
			METHOD_KEY_REGISTER4( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getNearNameByOffset, no_const_t, C("IDebugSymbolsPtr::GetNearNameByOffset") );
			METHOD_KEY_REGISTER3( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getOffsetByLine, no_const_t, C("IDebugSymbolsPtr::GetOffsetByLine") );
			METHOD_KEY_REGISTER2( IDebugSymbolsPtrInterpreter, boost::shared_ptr< Base<EncodingT> >, getSourceFileLineOffsets, no_const_t, C("IDebugSymbolsPtr::GetSourceFileLineOffsets") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("IDebugSymbolsPtr") );
			METHOD_KEY_UNREGISTER1( C("IDebugSymbolsPtr::AddSymbolOptions") );
			METHOD_KEY_UNREGISTER1( C("IDebugSymbolsPtr::AppendImagePath") );
			METHOD_KEY_UNREGISTER1( C("IDebugSymbolsPtr::AppendSourcePath") );
			METHOD_KEY_UNREGISTER1( C("IDebugSymbolsPtr::AppendSymbolPath") );
			METHOD_KEY_UNREGISTER2( C("IDebugSymbolsPtr::GetSymbolModule") );
			METHOD_KEY_UNREGISTER1( C("IDebugSymbolsPtr::GetSymbolOptions") );
			METHOD_KEY_UNREGISTER1( C("IDebugSymbolsPtr::GetSymbolPath") );
			METHOD_KEY_UNREGISTER4( C("IDebugSymbolsPtr::GetLineByOffset") );
			METHOD_KEY_UNREGISTER4( C("IDebugSymbolsPtr::GetModuleByOffset") );
			METHOD_KEY_UNREGISTER3( C("IDebugSymbolsPtr::GetNameByOffset") );
			METHOD_KEY_UNREGISTER4( C("IDebugSymbolsPtr::GetNearNameByOffset") );
			METHOD_KEY_UNREGISTER3( C("IDebugSymbolsPtr::GetOffsetByLine") );
			METHOD_KEY_UNREGISTER2( C("IDebugSymbolsPtr::GetSourceFileLineOffsets") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_IDebugSymbolsPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDebugSymbolsPtr& a);

	template <class EncodingT>
	bool reset_IDebugSymbolsPtr(boost::shared_ptr< Base<EncodingT> >& val, IDebugSymbolsPtr const& a);

NAMESPACE_END

#undef A
#undef C
#include "IDebugSymbolsPtrInterpreter_impl.hpp"

#endif