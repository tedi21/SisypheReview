/*
 * DebugExecuteInterpreter.hpp
 *
 *
 * @date 20-10-2018
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUGEXECUTE_INTERPRETER_H_
#define _DEBUGEXECUTE_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "Base.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	template <class EncodingT>
	class DebugExecuteInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		DebugExecuteInterpreter();

		~DebugExecuteInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > getDEBUG_EXECUTE_DEFAULT() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_EXECUTE_ECHO() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_EXECUTE_NOT_LOGGED() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_EXECUTE_NO_REPEAT() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DebugExecuteInterpreter, C("DebugExecute") );
			METHOD_KEY_REGISTER ( DebugExecuteInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_EXECUTE_DEFAULT, const_t, C("DebugExecute::DEBUG_EXECUTE_DEFAULT") );
			METHOD_KEY_REGISTER ( DebugExecuteInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_EXECUTE_ECHO, const_t, C("DebugExecute::DEBUG_EXECUTE_ECHO") );
			METHOD_KEY_REGISTER ( DebugExecuteInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_EXECUTE_NOT_LOGGED, const_t, C("DebugExecute::DEBUG_EXECUTE_NOT_LOGGED") );
			METHOD_KEY_REGISTER ( DebugExecuteInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_EXECUTE_NO_REPEAT, const_t, C("DebugExecute::DEBUG_EXECUTE_NO_REPEAT") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("DebugExecute") );
			METHOD_KEY_UNREGISTER ( C("DebugExecute::DEBUG_EXECUTE_DEFAULT") );
			METHOD_KEY_UNREGISTER ( C("DebugExecute::DEBUG_EXECUTE_ECHO") );
			METHOD_KEY_UNREGISTER ( C("DebugExecute::DEBUG_EXECUTE_NOT_LOGGED") );
			METHOD_KEY_UNREGISTER ( C("DebugExecute::DEBUG_EXECUTE_NO_REPEAT") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "DebugExecuteInterpreter_impl.hpp"

#endif