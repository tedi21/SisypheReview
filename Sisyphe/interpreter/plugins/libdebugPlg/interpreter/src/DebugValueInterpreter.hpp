/*
 * DebugValueInterpreter.hpp
 *
 *
 * @date 02-08-2019
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUGVALUE_INTERPRETER_H_
#define _DEBUGVALUE_INTERPRETER_H_

#include "config.hpp"
#include "Macros.hpp"
#include "Base.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	template <class EncodingT>
	class DebugValueInterpreter
	: public Base<EncodingT>
	{
	private:

	public:
		DebugValueInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_INT8() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_INT16() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_INT32() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_INT64() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_FLOAT32() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_FLOAT64() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_FLOAT80() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_FLOAT82() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_FLOAT128() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_VECTOR64() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_VALUE_VECTOR128() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DebugValueInterpreter, UCS("DebugValue") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_INT8, const_t, UCS("DebugValue::DEBUG_VALUE_INT8") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_INT16, const_t, UCS("DebugValue::DEBUG_VALUE_INT16") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_INT32, const_t, UCS("DebugValue::DEBUG_VALUE_INT32") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_INT64, const_t, UCS("DebugValue::DEBUG_VALUE_INT64") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_FLOAT32, const_t, UCS("DebugValue::DEBUG_VALUE_FLOAT32") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_FLOAT64, const_t, UCS("DebugValue::DEBUG_VALUE_FLOAT64") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_FLOAT80, const_t, UCS("DebugValue::DEBUG_VALUE_FLOAT80") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_FLOAT82, const_t, UCS("DebugValue::DEBUG_VALUE_FLOAT82") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_FLOAT128, const_t, UCS("DebugValue::DEBUG_VALUE_FLOAT128") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_VECTOR64, const_t, UCS("DebugValue::DEBUG_VALUE_VECTOR64") );
			METHOD_KEY_REGISTER ( DebugValueInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_VALUE_VECTOR128, const_t, UCS("DebugValue::DEBUG_VALUE_VECTOR128") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( UCS("DebugValue") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_INT8") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_INT16") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_INT32") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_INT64") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_FLOAT32") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_FLOAT64") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_FLOAT80") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_FLOAT82") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_FLOAT128") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_VECTOR64") );
			METHOD_KEY_UNREGISTER ( UCS("DebugValue::DEBUG_VALUE_VECTOR128") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "DebugValueInterpreter_impl.hpp"

#endif