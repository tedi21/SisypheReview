/*
 * IDebugClientPtrInterpreter_impl.hpp
 *
 *
 * @date 12-07-2020
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
IDebugClientPtrInterpreter<EncodingT>::IDebugClientPtrInterpreter()
{
}

template <class EncodingT>
void IDebugClientPtrInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
void IDebugClientPtrInterpreter<EncodingT>::initValue(const IDebugClientPtr& object)
{
	m_object = object;
}

template <class EncodingT>
IDebugClientPtr& IDebugClientPtrInterpreter<EncodingT>::refValue()
{
	return m_object;
}

template <class EncodingT>
const IDebugClientPtr& IDebugClientPtrInterpreter<EncodingT>::refValue() const
{
	return m_object;
}

template <class EncodingT>
IDebugClientPtrInterpreter<EncodingT>::IDebugClientPtrInterpreter(const IDebugClientPtr& object)
{
	initValue(object);
}

template <class EncodingT>
const IDebugClientPtr& IDebugClientPtrInterpreter<EncodingT>::value() const
{
	return refValue();
}

template <class EncodingT>
void IDebugClientPtrInterpreter<EncodingT>::value(IDebugClientPtr const& object)
{
	if (&object != &value()) {
		tidyValue();
		initValue(object);
	}
}

template <class EncodingT>
typename EncodingT::string_t IDebugClientPtrInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugClientPtrInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new IDebugClientPtrInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t IDebugClientPtrInterpreter<EncodingT>::getClassName() const
{
	return UCS("IDebugClientPtr");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugClientPtrInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, UCS("IDebugClientPtr"), method, args, ret) ||
			tryInvoke(this, UCS("Base"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in IDebugClientPtr, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// La méthode CreateProcess crée un processus à partir de la ligne de commande en paramètre.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugClientPtrInterpreter<EncodingT>::createProcess(const boost::shared_ptr< Base<EncodingT> >& commandLine, const boost::shared_ptr< Base<EncodingT> >& createFlags)
{
boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDebugClientPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    typename EncodingT::string_t nativeCommandLine;
    unsigned long nativeCreateFlags;
    if (check_string<EncodingT>(commandLine, nativeCommandLine) && 
        check_numeric_i(createFlags, nativeCreateFlags))
    {
          char ansiCommandLine[MAX_PATH];
          std::copy(nativeCommandLine.begin(), nativeCommandLine.end(), ansiCommandLine);
          res.reset(new Numeric<EncodingT>(valuePtr->CreateProcess(0, ansiCommandLine, nativeCreateFlags)));
    }
  }
  return res;
}

// La méthode CreateProcess crée un processus à partir de la ligne de commande en paramètre et d'un répertoire courant spécifique.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugClientPtrInterpreter<EncodingT>::createProcess(const boost::shared_ptr< Base<EncodingT> >& commandLine, const boost::shared_ptr< Base<EncodingT> >& createFlags, const boost::shared_ptr< Base<EncodingT> >& initialDirectory)
{
boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDebugClientPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    typename EncodingT::string_t nativeCommandLine;
    typename EncodingT::string_t nativeInitialDirectory;
    unsigned long nativeCreateFlags;
    if (check_string<EncodingT>(commandLine, nativeCommandLine) && 
        check_string<EncodingT>(initialDirectory, nativeInitialDirectory) && 
        check_numeric_i(createFlags, nativeCreateFlags))
    {
          TCHAR cwd[MAX_PATH];
          // Retrieves the current directory for the current process.
          GetCurrentDirectory(MAX_PATH, cwd);

          // Changes the current directory for the current process.
          SetCurrentDirectory(nativeInitialDirectory.c_str());

          char ansiCommandLine[MAX_PATH];
          std::copy(nativeCommandLine.begin(), nativeCommandLine.end(), ansiCommandLine);
          res.reset(new Numeric<EncodingT>(valuePtr->CreateProcess(0, ansiCommandLine, nativeCreateFlags)));
          
          // Reset the current directory
          SetCurrentDirectory(cwd);
    }
  }
  return res;
}

// The GetRunningProcessSystemIds method returns the process ID.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugClientPtrInterpreter<EncodingT>::getRunningProcessSystemIds(boost::shared_ptr< Base<EncodingT> >& processId)
{
boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDebugClientPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    unsigned long nativeId, nativeActualCount;
    res.reset(new Numeric<EncodingT>(valuePtr->GetRunningProcessSystemIds(0, &nativeId, 1, &nativeActualCount)));
    reset_numeric_i(processId, nativeId);
  }
  return res;
}

// The GetRunningProcessDescription method returns a description of the process that includes the executable image name, the service names, the MTS package names, and the command line.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugClientPtrInterpreter<EncodingT>::getRunningProcessDescription(const boost::shared_ptr< Base<EncodingT> >& systemId, const boost::shared_ptr< Base<EncodingT> >& flags, boost::shared_ptr< Base<EncodingT> >& exeName, boost::shared_ptr< Base<EncodingT> >& description)
{
boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
  IDebugClientPtr valuePtr = value();
  if (valuePtr != NULL)
  {
    unsigned long nativeSystemId;
    unsigned long nativeFlags;
    if (check_numeric_i(systemId, nativeSystemId) && 
        check_numeric_i(flags, nativeFlags))
    {
      char ansiNativeExeName[MAX_PATH];
      char ansiNativeDescription[MAX_PATH];
      unsigned long nativeActualExeNameSize, nativeActualDescriptionSize;
      res.reset(new Numeric<EncodingT>(valuePtr->GetRunningProcessDescription(0, nativeSystemId, nativeFlags, ansiNativeExeName, MAX_PATH, &nativeActualExeNameSize, ansiNativeDescription, MAX_PATH, &nativeActualDescriptionSize)));
      reset_string<ansi>(exeName, ansiNativeExeName);
      reset_string<ansi>(description, ansiNativeDescription);
    }
  }
  return res;
}


template <class EncodingT>
bool check_IDebugClientPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDebugClientPtr& a)
{
	boost::shared_ptr< IDebugClientPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugClientPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->value();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugClientPtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

template <class EncodingT>
bool reset_IDebugClientPtr(boost::shared_ptr< Base<EncodingT> >& val, IDebugClientPtr const& a)
{
	boost::shared_ptr< IDebugClientPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugClientPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		value->value(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugClientPtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END

#undef A
#undef C