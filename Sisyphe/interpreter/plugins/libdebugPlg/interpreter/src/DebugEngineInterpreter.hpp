/*
 * DebugEngineInterpreter.hpp
 *
 *
 * @date 24-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUGENGINE_INTERPRETER_H_
#define _DEBUGENGINE_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"
#include "IDebugClientPtrInterpreter.hpp"
#include "IDebugControlPtrInterpreter.hpp"
#include "IDebugSystemObjectsPtrInterpreter.hpp"
#include "IDebugSymbolsPtrInterpreter.hpp"
#include "IDebugBreakpointPtrInterpreter.hpp"

NAMESPACE_BEGIN(interp)
	template <class EncodingT>
	class DebugEngineInterpreter;
NAMESPACE_END

template <class EncodingT>
class EventCallbacks : public DebugBaseEventCallbacks   // event callback class has 16 methods
{
private:
  interp::DebugEngineInterpreter<EncodingT> *m_Owner;
  CDebugPtr<IDebugControl3>  m_Control;
  CDebugPtr<IDebugBreakpoint> m_Breakpoint;

public:
       EventCallbacks(interp::DebugEngineInterpreter<EncodingT> *owner, IDebugControl3 *control);
       STDMETHOD_(ULONG, AddRef)         ( THIS );
       STDMETHOD_(ULONG, Release)        ( THIS );
       STDMETHOD(Breakpoint)             ( THIS_ IN PDEBUG_BREAKPOINT Bp );
       STDMETHOD(ChangeDebuggeeState)    ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(ChangeEngineState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(ChangeSymbolState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );
       STDMETHOD(CreateThread)           ( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset,IN ULONG64  StartOffset);
       STDMETHOD(Exception)              ( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance );
       STDMETHOD(ExitProcess)            ( THIS_ IN ULONG  ExitCode );
       STDMETHOD(ExitThread)             ( THIS_ IN ULONG  ExitCode );
       STDMETHOD(GetInterestMask)        ( THIS_ OUT PULONG Mask );
       STDMETHOD(SessionStatus)          ( THIS_ IN ULONG Status );
       STDMETHOD(SystemError)            ( THIS_ IN ULONG  Error, IN ULONG  Level );
       STDMETHOD(UnloadModule)           ( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset );
       STDMETHOD(LoadModule)             (  THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,
                                          IN ULONG ModuleSize,  IN PCSTR ModuleName,IN PCSTR ImageName,  IN ULONG CheckSum,
                                          IN ULONG TimeDateStamp );
       STDMETHOD(CreateProcess)          ( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle, IN ULONG64 BaseOffset, IN ULONG ModuleSize, 
                                          IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum,
                                          IN ULONG TimeDateStamp,  IN ULONG64 InitialThreadHandle,   IN ULONG64 ThreadDataOffset,
                                          IN ULONG64 StartOffset );
};

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// Classe permettant de démarrer le moteur de débogage. 
	template <class EncodingT>
	class DebugEngineInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		DebugEngineInterpreter();

		~DebugEngineInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		// Initialise le moteur de débogage.
		boost::shared_ptr< Base<EncodingT> > initialize();

		// Libère les objets debug.
		boost::shared_ptr< Base<EncodingT> > terminate();

		// Allocate additional memory to the target process.
		FACTORY_PROTOTYPE1(dvAlloc, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > dvAlloc(const boost::shared_ptr< Base<EncodingT> >& size);

		// Frees a memory allocation owned by the target process.
		FACTORY_PROTOTYPE2(dvFree, In< boost::shared_ptr< Base<EncodingT> > >, In< boost::shared_ptr< Base<EncodingT> > >)
		boost::shared_ptr< Base<EncodingT> > dvFree(const boost::shared_ptr< Base<EncodingT> >& baseAddress, const boost::shared_ptr< Base<EncodingT> >& size);
private:
  IDebugClient *m_debugClient;
  EventCallbacks<EncodingT> *m_eventCallback;
  IDebugControl3 *m_debugControl;
  IDebugSystemObjects *m_debugSystemObjects;
  IDebugSymbols *m_debugSymbols;
  CDebugPtr<IDebugBreakpoint> m_triggeredBreakpoint;
  
public:
  // Retourne l'objet DebugClient
  boost::shared_ptr< Base<EncodingT> > getDebugClient() const;
  
  // Retourne l'objet DebugControl
  boost::shared_ptr< Base<EncodingT> > getDebugControl() const;
  
  // Retourne l'objet DebugSystemObjects
  boost::shared_ptr< Base<EncodingT> > getDebugSystemObjects() const;
  
  // Retourne l'objet DebugSymbols
  boost::shared_ptr< Base<EncodingT> > getDebugSymbols() const;

  // Fixe l'objet DebugBreakpoint
  void SetTriggeredBreakpoint(const CDebugPtr<IDebugBreakpoint>& breakpoint);
  
  // Retourne l'objet DebugBreakpoint
  boost::shared_ptr< Base<EncodingT> > getTriggeredBreakpoint() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DebugEngineInterpreter, C("DebugEngine") );
			METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, initialize, no_const_t, C("DebugEngine::Initialize") );
			METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, terminate, no_const_t, C("DebugEngine::Terminate") );
			METHOD_KEY_REGISTER1( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, dvAlloc, no_const_t, C("DebugEngine::DvAlloc") );
			METHOD_KEY_REGISTER2( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, dvFree, no_const_t, C("DebugEngine::DvFree") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugClient, const_t, C("DebugEngine::DebugClient") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugControl, const_t, C("DebugEngine::DebugControl") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugSystemObjects, const_t, C("DebugEngine::DebugSystemObjects") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, getDebugSymbols, const_t, C("DebugEngine::DebugSymbols") );
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr< Base<EncodingT> >, getTriggeredBreakpoint, const_t, C("DebugEngine::TriggeredBreakpoint") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("DebugEngine") );
			METHOD_KEY_UNREGISTER ( C("DebugEngine::Initialize") );
			METHOD_KEY_UNREGISTER ( C("DebugEngine::Terminate") );
			METHOD_KEY_UNREGISTER1( C("DebugEngine::DvAlloc") );
			METHOD_KEY_UNREGISTER2( C("DebugEngine::DvFree") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugClient") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugControl") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSystemObjects") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSymbols") );
METHOD_KEY_UNREGISTER ( C("DebugEngine::TriggeredBreakpoint") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "DebugEngineInterpreter_impl.hpp"

#endif