<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE document_schema SYSTEM "document_schema.dtd">
<document_schema>

  <Workspace Author="Teddy DIDE" Brief="Debug Interpreter generated by gensources." Name="Debug_interpreter" Option="1" Type="Project" Version="1.00">
    <File Name="DebugEngine">
      <Entity Class="Data" Name="DebugEngine">
        <Comments> Classe permettant de démarrer le moteur de débogage. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="initialize" Name="DebugEngine:initialize@Boolean">
        <Comments> Initialise le moteur de débogage.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="initialize" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="terminate" Name="DebugEngine:terminate@Boolean">
        <Comments> Libère les objets debug.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="terminate" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="DvAlloc" Name="DebugEngine:DvAlloc@UInt32@Int">
        <Comments> Allocate additional memory to the target process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="DvAlloc" Type="Int"/>
        <Attribute Modifier="Const " Name="size" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="DvFree" Name="DebugEngine:DvFree@Int@UInt32@Boolean">
        <Comments> Frees a memory allocation owned by the target process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual Static " Name="DebugEngine" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="DvFree" Type="Boolean"/>
        <Attribute Modifier="Const " Name="baseAddress" Type="Int"/>
        <Attribute Modifier="Const " Name="size" Type="UInt32"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:initialize@Boolean_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:initialize@Boolean" TargetREF="DebugEngine"/>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:terminate@Boolean_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:terminate@Boolean" TargetREF="DebugEngine"/>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:DvAlloc@UInt32@Int_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:DvAlloc@UInt32@Int" TargetREF="DebugEngine"/>
      <Relation Multiplicity="Zero-One" Name="R_DebugEngine:DvFree@Int@UInt32@Boolean_DebugEngine" Source="DebugEngine" SourceREF="Id" Target="DebugEngine:DvFree@Int@UInt32@Boolean" TargetREF="DebugEngine"/>
      <Content Type="Global-inclusion">&#xD;
#include "IDebugClientPtrInterpreter.hpp"&#xD;
#include "IDebugControlPtrInterpreter.hpp"&#xD;
#include "IDebugSystemObjectsPtrInterpreter.hpp"&#xD;
#include "IDebugSymbolsPtrInterpreter.hpp"&#xD;
#include "IDebugBreakpointPtrInterpreter.hpp"&#xD;
&#xD;
NAMESPACE_BEGIN(interp)&#xD;
  template &lt;class EncodingT&gt;&#xD;
  class DebugEngineInterpreter;&#xD;
NAMESPACE_END&#xD;
&#xD;
template &lt;class EncodingT&gt;&#xD;
class EventCallbacks : public DebugBaseEventCallbacks   // event callback class has 16 methods&#xD;
{&#xD;
private:&#xD;
  interp::DebugEngineInterpreter&lt;EncodingT&gt; *m_Owner;&#xD;
  CDebugPtr&lt;IDebugControl3&gt;  m_Control;&#xD;
  IDebugBreakpoint* m_Breakpoint;&#xD;
&#xD;
public:&#xD;
       EventCallbacks(interp::DebugEngineInterpreter&lt;EncodingT&gt; *owner, IDebugControl3 *control);&#xD;
       ~EventCallbacks();&#xD;
       STDMETHOD_(ULONG, AddRef)         ( THIS );&#xD;
       STDMETHOD_(ULONG, Release)        ( THIS );&#xD;
       STDMETHOD(Breakpoint)             ( THIS_ IN PDEBUG_BREAKPOINT Bp );&#xD;
       STDMETHOD(ChangeDebuggeeState)    ( THIS_ IN ULONG Flags, IN ULONG64  Argument );&#xD;
       STDMETHOD(ChangeEngineState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );&#xD;
       STDMETHOD(ChangeSymbolState)      ( THIS_ IN ULONG Flags, IN ULONG64  Argument );&#xD;
       STDMETHOD(CreateThread)           ( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset,IN ULONG64  StartOffset);&#xD;
       STDMETHOD(Exception)              ( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance );&#xD;
       STDMETHOD(ExitProcess)            ( THIS_ IN ULONG  ExitCode );&#xD;
       STDMETHOD(ExitThread)             ( THIS_ IN ULONG  ExitCode );&#xD;
       STDMETHOD(GetInterestMask)        ( THIS_ OUT PULONG Mask );&#xD;
       STDMETHOD(SessionStatus)          ( THIS_ IN ULONG Status );&#xD;
       STDMETHOD(SystemError)            ( THIS_ IN ULONG  Error, IN ULONG  Level );&#xD;
       STDMETHOD(UnloadModule)           ( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset );&#xD;
       STDMETHOD(LoadModule)             (  THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,&#xD;
                                          IN ULONG ModuleSize,  IN PCSTR ModuleName,IN PCSTR ImageName,  IN ULONG CheckSum,&#xD;
                                          IN ULONG TimeDateStamp );&#xD;
       STDMETHOD(CreateProcess)          ( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle, IN ULONG64 BaseOffset, IN ULONG ModuleSize, &#xD;
                                          IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum,&#xD;
                                          IN ULONG TimeDateStamp,  IN ULONG64 InitialThreadHandle,   IN ULONG64 ThreadDataOffset,&#xD;
                                          IN ULONG64 StartOffset );&#xD;
};&#xD;
</Content>
      <Content Type="Global-body">&#xD;
template &lt;class EncodingT&gt;&#xD;
EventCallbacks&lt;EncodingT&gt;::EventCallbacks(interp::DebugEngineInterpreter&lt;EncodingT&gt; *owner, IDebugControl3 *control)&#xD;
: m_Owner(owner), m_Control(control), m_Breakpoint(NULL)&#xD;
{&#xD;
}&#xD;
&#xD;
template &lt;class EncodingT&gt;&#xD;
EventCallbacks&lt;EncodingT&gt;::~EventCallbacks()&#xD;
{&#xD;
      if (m_Control &amp;&amp; m_Breakpoint)&#xD;
      {&#xD;
            HRESULT status = m_Control-&gt;RemoveBreakpoint(m_Breakpoint);&#xD;
            if (status == S_OK)&#xD;
            {&#xD;
                   m_Breakpoint = NULL;&#xD;
            }&#xD;
       }&#xD;
}&#xD;
&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP_(ULONG) EventCallbacks&lt;EncodingT&gt;::AddRef( THIS )  // event callback method 1&#xD;
{&#xD;
       return 1;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP_(ULONG) EventCallbacks&lt;EncodingT&gt;::Release( THIS )  //event callback method 2&#xD;
{&#xD;
       return 0;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::Breakpoint( THIS_ IN PDEBUG_BREAKPOINT Bp ) //event callback method 3&#xD;
{&#xD;
       if (m_Owner != NULL) &#xD;
       {&#xD;
            m_Owner-&gt;AddTriggeredBreakpoint(Bp);&#xD;
       }&#xD;
       return DEBUG_STATUS_BREAK;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::CreateProcess(THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 Handle,&#xD;
       IN ULONG64 BaseOffset,IN ULONG ModuleSize,IN PCSTR ModuleName,IN PCSTR ImageName,&#xD;
       IN ULONG CheckSum, IN ULONG TimeDateStamp,IN ULONG64 InitialThreadHandle,&#xD;
       IN ULONG64 ThreadDataOffset,  IN ULONG64 StartOffset&#xD;
       ) //event callback method 4  and so on till method 16&#xD;
{&#xD;
       if (m_Control)&#xD;
       {&#xD;
             HRESULT status = 0; //we are setting a break point in Address Of Entrypoint of the debuggee&#xD;
             IDebugBreakpoint* breakpoint = NULL;&#xD;
             if ((status = m_Control-&gt;AddBreakpoint(DEBUG_BREAKPOINT_CODE,DEBUG_ANY_ID, &amp;breakpoint)) == S_OK)&#xD;
             {&#xD;
                    if (( status = breakpoint-&gt;SetOffset(StartOffset)) == S_OK)&#xD;
                    {&#xD;
                           if (( status = breakpoint-&gt;SetFlags(DEBUG_BREAKPOINT_ENABLED)) == S_OK)&#xD;
                           {&#xD;
                                  m_Breakpoint = breakpoint;&#xD;
                           }&#xD;
                    }&#xD;
             }&#xD;
       }&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::CreateThread( THIS_ IN ULONG64  Handle, IN ULONG64  DataOffset, IN ULONG64  StartOffset )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::Exception( THIS_ IN PEXCEPTION_RECORD64 Exception, IN ULONG FirstChance )&#xD;
{&#xD;
       HRESULT hres = DEBUG_STATUS_BREAK;&#xD;
       if (Exception != NULL &amp;&amp; Exception-&gt;ExceptionCode == 0x406D1388)&#xD;
       {&#xD;
               hres = DEBUG_STATUS_NO_CHANGE;&#xD;
       }&#xD;
       return hres;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::ExitProcess (THIS_ IN ULONG  ExitCode )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::ExitThread (THIS_ IN ULONG  ExitCode )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::GetInterestMask( THIS_ OUT PULONG Mask )&#xD;
{&#xD;
       *Mask =&#xD;
              DEBUG_EVENT_BREAKPOINT |&#xD;
              DEBUG_EVENT_EXCEPTION |&#xD;
              DEBUG_EVENT_CREATE_THREAD |&#xD;
              DEBUG_EVENT_EXIT_THREAD |&#xD;
              DEBUG_EVENT_CREATE_PROCESS |&#xD;
              DEBUG_EVENT_EXIT_PROCESS |&#xD;
              DEBUG_EVENT_LOAD_MODULE |&#xD;
              DEBUG_EVENT_UNLOAD_MODULE |&#xD;
              DEBUG_EVENT_SYSTEM_ERROR |&#xD;
              DEBUG_EVENT_SESSION_STATUS |&#xD;
              DEBUG_EVENT_CHANGE_DEBUGGEE_STATE |&#xD;
              DEBUG_EVENT_CHANGE_ENGINE_STATE |&#xD;
              DEBUG_EVENT_CHANGE_SYMBOL_STATE;&#xD;
       return S_OK;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::LoadModule( THIS_ IN ULONG64 ImageFileHandle, IN ULONG64 BaseOffset,&#xD;
       IN ULONG ModuleSize,IN PCSTR ModuleName, IN PCSTR ImageName, IN ULONG CheckSum, IN ULONG TimeDateStamp )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::SystemError( THIS_ IN ULONG  Error, IN ULONG  Level )&#xD;
{&#xD;
       return DEBUG_STATUS_BREAK;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::UnloadModule( THIS_ IN PCSTR  ImageBaseName, IN ULONG64  BaseOffset )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::SessionStatus( THIS_ IN ULONG SessionStatus )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::ChangeDebuggeeState( THIS_ IN ULONG Flags, IN ULONG64 Argument )&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::ChangeEngineState( THIS_ IN ULONG Flags, IN ULONG64 Argument )&#xD;
{&#xD;
       if ((m_Owner != NULL) &amp;&amp; (DEBUG_CES_EXECUTION_STATUS == Flags) &amp;&amp; &#xD;
           (DEBUG_STATUS_BREAK != Argument) &amp;&amp; (DEBUG_STATUS_NO_CHANGE != Argument) &amp;&amp; (DEBUG_STATUS_NO_DEBUGGEE != Argument))&#xD;
       {&#xD;
              m_Owner-&gt;ResetTriggeredBreakpoint();  &#xD;
       }&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
template &lt;class EncodingT&gt;&#xD;
STDMETHODIMP EventCallbacks&lt;EncodingT&gt;::ChangeSymbolState( THIS_ IN ULONG Flags, IN ULONG64 Argument ) // method 16&#xD;
{&#xD;
       return DEBUG_STATUS_NO_CHANGE;&#xD;
}&#xD;
</Content>
      <Content Type="Declaration">&#xD;
private:&#xD;
  IDebugClient *m_debugClient;&#xD;
  EventCallbacks&lt;EncodingT&gt; *m_eventCallback;&#xD;
  IDebugControl3 *m_debugControl;&#xD;
  IDebugSystemObjects *m_debugSystemObjects;&#xD;
  IDebugSymbols *m_debugSymbols;&#xD;
  std::vector&lt;IDebugBreakpoint *&gt; m_triggeredBreakpoints;&#xD;
  &#xD;
public:&#xD;
  // Retourne l'objet DebugClient&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugClient() const;&#xD;
  &#xD;
  // Retourne l'objet DebugControl&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugControl() const;&#xD;
  &#xD;
  // Retourne l'objet DebugSystemObjects&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugSystemObjects() const;&#xD;
  &#xD;
  // Retourne l'objet DebugSymbols&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getDebugSymbols() const;&#xD;
&#xD;
  // Ajoute l'objet DebugBreakpoint&#xD;
  void AddTriggeredBreakpoint(IDebugBreakpoint* const breakpoint);&#xD;
  &#xD;
  // Réinitialise l'objet DebugBreakpoint&#xD;
  void ResetTriggeredBreakpoint();&#xD;
  &#xD;
  // Retourne le nombre d'objet DebugBreakpoint&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getTriggeredBreakpointsCount() const;&#xD;
  &#xD;
  // Retourne l'objet DebugBreakpoint&#xD;
  FACTORY_PROTOTYPE1(getTriggeredBreakpoint, In&lt; boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; &gt;)&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; getTriggeredBreakpoint(const boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;&amp; i) const;&#xD;
</Content>
      <Content Type="Implementation">&#xD;
  // Retourne l'objet DebugClient&#xD;
  template &lt;class EncodingT&gt;&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugClient() const&#xD;
  {&#xD;
    return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugClientPtrInterpreter&lt;EncodingT&gt;(IDebugClientPtr(m_debugClient)));&#xD;
  }&#xD;
  &#xD;
  // Retourne l'objet DebugControl&#xD;
  template &lt;class EncodingT&gt;&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugControl() const&#xD;
  {&#xD;
    return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugControlPtrInterpreter&lt;EncodingT&gt;(IDebugControlPtr(m_debugControl)));&#xD;
  }&#xD;
  &#xD;
  // Retourne l'objet DebugSystemObjects&#xD;
  template &lt;class EncodingT&gt;&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugSystemObjects() const&#xD;
  {&#xD;
    return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugSystemObjectsPtrInterpreter&lt;EncodingT&gt;(IDebugSystemObjectsPtr(m_debugSystemObjects)));&#xD;
  }&#xD;
 &#xD;
  // Retourne l'objet DebugSymbols&#xD;
  template &lt;class EncodingT&gt;&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getDebugSymbols() const&#xD;
  {&#xD;
    return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugSymbolsPtrInterpreter&lt;EncodingT&gt;(IDebugSymbolsPtr(m_debugSymbols)));&#xD;
  }&#xD;
  &#xD;
  // Ajoute l'objet TriggeredBreakpoint&#xD;
  template &lt;class EncodingT&gt;&#xD;
  void DebugEngineInterpreter&lt;EncodingT&gt;::AddTriggeredBreakpoint(IDebugBreakpoint* const breakpoint)&#xD;
  {&#xD;
    m_triggeredBreakpoints.push_back(breakpoint);&#xD;
  }&#xD;
  &#xD;
  // Réinitialise l'objet DebugBreakpoint&#xD;
  template &lt;class EncodingT&gt;&#xD;
  void DebugEngineInterpreter&lt;EncodingT&gt;::ResetTriggeredBreakpoint()&#xD;
  {&#xD;
    m_triggeredBreakpoints.clear();&#xD;
  }&#xD;
  &#xD;
  // Retourne le nombre d'objet DebugBreakpoint&#xD;
  template &lt;class EncodingT&gt;&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getTriggeredBreakpointsCount() const&#xD;
  {&#xD;
    return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Numeric&lt;EncodingT&gt;(m_triggeredBreakpoints.size()));&#xD;
  }&#xD;
  &#xD;
  // Retourne l'objet TriggeredBreakpoint&#xD;
  template &lt;class EncodingT&gt;&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; DebugEngineInterpreter&lt;EncodingT&gt;::getTriggeredBreakpoint(const boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;&amp; i) const&#xD;
  {&#xD;
    IDebugBreakpoint * bp = NULL;&#xD;
    size_t index = 0;&#xD;
    if (check_numeric_i(i, index))&#xD;
    {&#xD;
        if (check_index(index, m_triggeredBreakpoints.size()))&#xD;
        {&#xD;
            bp = m_triggeredBreakpoints[index];&#xD;
        }&#xD;
    }&#xD;
    return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new IDebugBreakpointPtrInterpreter&lt;EncodingT&gt;(bp));&#xD;
  }&#xD;
</Content>
      <Content Type="Register">&#xD;
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugClient, const_t, C("DebugEngine::DebugClient") );&#xD;
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugControl, const_t, C("DebugEngine::DebugControl") );&#xD;
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugSystemObjects, const_t, C("DebugEngine::DebugSystemObjects") );&#xD;
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getDebugSymbols, const_t, C("DebugEngine::DebugSymbols") );&#xD;
METHOD_KEY_REGISTER ( DebugEngineInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getTriggeredBreakpointsCount, const_t, C("DebugEngine::TriggeredBreakpointsCount") );&#xD;
METHOD_KEY_REGISTER1( DebugEngineInterpreter, boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt;, getTriggeredBreakpoint, const_t, C("DebugEngine::GetTriggeredBreakpoint") );&#xD;
</Content>
      <Content Type="Unregister">&#xD;
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugClient") );&#xD;
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugControl") );&#xD;
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSystemObjects") );&#xD;
METHOD_KEY_UNREGISTER ( C("DebugEngine::DebugSymbols") );&#xD;
METHOD_KEY_UNREGISTER ( C("DebugEngine::TriggeredBreakpointsCount") );&#xD;
METHOD_KEY_UNREGISTER1( C("DebugEngine::GetTriggeredBreakpoint") );&#xD;
</Content>
      <Content Type="Initialization-body">&#xD;
  m_debugClient = NULL;&#xD;
  m_eventCallback = NULL;&#xD;
  m_debugControl = NULL;&#xD;
  m_debugSystemObjects = NULL;&#xD;
  m_debugSymbols = NULL;&#xD;
</Content>
      <Content Type="Destruction-body">&#xD;
  terminate();&#xD;
</Content>
      <Content Target="DebugEngine:initialize@Boolean" Type="Implementation-body">&#xD;
  if (m_debugClient == NULL)&#xD;
  {&#xD;
    HRESULT hr = DebugCreate(IID_IDebugClient, (void**)&amp;m_debugClient);&#xD;
    if(SUCCEEDED(hr))&#xD;
    {  &#xD;
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugControl3, (void**)&amp;m_debugControl);&#xD;
        if (SUCCEEDED(hr))&#xD;
        {&#xD;
            m_eventCallback = new EventCallbacks&lt;EncodingT&gt;(this, m_debugControl);&#xD;
            hr = m_debugClient-&gt;SetEventCallbacks(m_eventCallback);&#xD;
        }&#xD;
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugSystemObjects, (void**)&amp;m_debugSystemObjects);&#xD;
        hr = m_debugClient-&gt;QueryInterface(IID_IDebugSymbols, (void**)&amp;m_debugSymbols);&#xD;
    }&#xD;
  }&#xD;
  return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_debugClient != NULL));&#xD;
</Content>
      <Content Target="DebugEngine:terminate@Boolean" Type="Implementation-body">&#xD;
  m_triggeredBreakpoints.clear();&#xD;
  if(m_debugSymbols != NULL)&#xD;
  {&#xD;
    m_debugSymbols-&gt;Release();&#xD;
    m_debugSymbols = NULL;&#xD;
  }&#xD;
  if(m_debugSystemObjects != NULL)&#xD;
  {&#xD;
    m_debugSystemObjects-&gt;Release();&#xD;
    m_debugSystemObjects = NULL;&#xD;
  }&#xD;
  if (m_eventCallback != NULL)&#xD;
  {&#xD;
    delete m_eventCallback;&#xD;
    m_eventCallback = NULL;&#xD;
  }&#xD;
  if(m_debugControl != NULL)&#xD;
  {&#xD;
    m_debugControl-&gt;Release();&#xD;
    m_debugControl = NULL;&#xD;
  }&#xD;
  if(m_debugClient != NULL)&#xD;
  {&#xD;
    m_debugClient-&gt;EndSession(DEBUG_END_PASSIVE);&#xD;
    m_debugClient-&gt;Release();&#xD;
    m_debugClient = NULL;&#xD;
  }&#xD;
  return boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; (new Bool&lt;EncodingT&gt;(m_debugClient == NULL));&#xD;
</Content>
      <Content Target="DebugEngine:DvAlloc@Uint32@Int" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  if (m_debugSystemObjects != NULL)&#xD;
  {&#xD;
    unsigned long nativeSize;&#xD;
    if (check_numeric_i(size, nativeSize))&#xD;
    {&#xD;
      unsigned long long hProcess;&#xD;
      HRESULT hr = m_debugSystemObjects-&gt;GetCurrentProcessHandle(&amp;hProcess);&#xD;
      if (SUCCEEDED(hr))&#xD;
      {&#xD;
        res.reset(new Numeric&lt;EncodingT&gt;((unsigned long long) VirtualAllocEx((HANDLE) hProcess, NULL, nativeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE)));&#xD;
      }&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="DebugEngine:DvFree@Int@Uint32@Boolean" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Bool&lt;EncodingT&gt;(false));&#xD;
  if (m_debugSystemObjects != NULL)&#xD;
  {&#xD;
    unsigned long nativeSize;&#xD;
    int nativeBaseAddress;&#xD;
    if (check_numeric_i(baseAddress, nativeBaseAddress) &amp;&amp; check_numeric_i(size, nativeSize))&#xD;
    {&#xD;
      unsigned long long hProcess;&#xD;
      HRESULT hr = m_debugSystemObjects-&gt;GetCurrentProcessHandle(&amp;hProcess);&#xD;
      if (SUCCEEDED(hr))&#xD;
      {&#xD;
          res.reset(new Bool&lt;EncodingT&gt;(VirtualFreeEx((HANDLE) hProcess, (LPVOID)nativeBaseAddress, nativeSize, MEM_RELEASE)));&#xD;
      }&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
    </File>
    <File Name="IDebugClientPtr">
      <Entity Class="Data" Name="IDebugClientPtr">
        <Comments> Classe permettant d'accéder à un client de débogage. </Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="CreateProcess" Name="IDebugClientPtr:CreateProcess@AnsiString@UInt32@Int32">
        <Comments> La méthode CreateProcess crée un processus à partir de la ligne de commande en paramètre.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="CreateProcess" Type="Int32"/>
        <Attribute Modifier="Const " Name="commandLine" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="createFlags" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="CreateProcess" Name="IDebugClientPtr:CreateProcess@AnsiString@UInt32@AnsiString@Int32">
        <Comments> La méthode CreateProcess crée un processus à partir de la ligne de commande en paramètre et d'un répertoire courant spécifique.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="CreateProcess" Type="Int32"/>
        <Attribute Modifier="Const " Name="commandLine" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="createFlags" Type="UInt32"/>
        <Attribute Modifier="Const " Name="InitialDirectory" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetRunningProcessSystemIds" Name="IDebugClientPtr:GetRunningProcessSystemIds@UInt32*@Int32">
        <Comments> The GetRunningProcessSystemIds method returns the process ID.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetRunningProcessSystemIds" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="processId" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetRunningProcessDescription" Name="IDebugClientPtr:GetRunningProcessDescription@UInt32@UInt32@AnsiString@AnsiString@Int32">
        <Comments> The GetRunningProcessDescription method returns a description of the process that includes the executable image name, the service names, the MTS package names, and the command line.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugClientPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetRunningProcessDescription" Type="Int32"/>
        <Attribute Modifier="Const " Name="systemId" Type="UInt32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
        <Attribute Modifier="" Name="exeName" Type="AnsiString"/>
        <Attribute Modifier="" Name="description" Type="AnsiString"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:CreateProcess@AnsiString@UInt32@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:CreateProcess@AnsiString@UInt32@Int32" TargetREF="IDebugClientPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:CreateProcess@AnsiString@UInt32@AnsiString@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:CreateProcess@AnsiString@UInt32@AnsiString@Int32" TargetREF="IDebugClientPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:GetRunningProcessSystemIds@UInt32*@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:GetRunningProcessSystemIds@UInt32*@Int32" TargetREF="IDebugClientPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugClientPtr:GetRunningProcessDescription@UInt32@UInt32@AnsiString@AnsiString@Int32_IDebugClientPtr" Source="IDebugClientPtr" SourceREF="Id" Target="IDebugClientPtr:GetRunningProcessDescription@UInt32@UInt32@AnsiString@AnsiString@Int32" TargetREF="IDebugClientPtr"/>
      <Content Type="Global-inclusion">&#xD;
#include "DebugPtr.h"&#xD;
typedef CDebugPtr&lt;IDebugClient&gt; IDebugClientPtr;&#xD;
#include "IDebugControlPtrInterpreter.hpp"&#xD;
</Content>
      <Content Target="IDebugClientPtr:CreateProcess@AnsiString@Uint32@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugClientPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    typename EncodingT::string_t nativeCommandLine;&#xD;
    unsigned long nativeCreateFlags;&#xD;
    if (check_string&lt;EncodingT&gt;(commandLine, nativeCommandLine) &amp;&amp; &#xD;
        check_numeric_i(createFlags, nativeCreateFlags))&#xD;
    {&#xD;
          char ansiCommandLine[MAX_PATH];&#xD;
          std::copy(nativeCommandLine.begin(), nativeCommandLine.end(), ansiCommandLine);&#xD;
          res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;CreateProcess(0, ansiCommandLine, nativeCreateFlags)));&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugClientPtr:CreateProcess@AnsiString@Uint32@AnsiString@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugClientPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    typename EncodingT::string_t nativeCommandLine;&#xD;
    typename EncodingT::string_t nativeInitialDirectory;&#xD;
    unsigned long nativeCreateFlags;&#xD;
    if (check_string&lt;EncodingT&gt;(commandLine, nativeCommandLine) &amp;&amp; &#xD;
        check_string&lt;EncodingT&gt;(initialDirectory, nativeInitialDirectory) &amp;&amp; &#xD;
        check_numeric_i(createFlags, nativeCreateFlags))&#xD;
    {&#xD;
          TCHAR cwd[MAX_PATH];&#xD;
          // Retrieves the current directory for the current process.&#xD;
          GetCurrentDirectory(MAX_PATH, cwd);&#xD;
&#xD;
          // Changes the current directory for the current process.&#xD;
          SetCurrentDirectory(nativeInitialDirectory.c_str());&#xD;
&#xD;
          char ansiCommandLine[MAX_PATH];&#xD;
          std::copy(nativeCommandLine.begin(), nativeCommandLine.end(), ansiCommandLine);&#xD;
          res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;CreateProcess(0, ansiCommandLine, nativeCreateFlags)));&#xD;
          &#xD;
          // Reset the current directory&#xD;
          SetCurrentDirectory(cwd);&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugClientPtr:GetRunningProcessSystemIds@Uint32*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugClientPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    unsigned long nativeId, nativeActualCount;&#xD;
    res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetRunningProcessSystemIds(0, &amp;nativeId, 1, &amp;nativeActualCount)));&#xD;
    reset_numeric_i(processId, nativeId);&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugClientPtr:GetRunningProcessDescription@Uint32@Uint32@AnsiString@AnsiString@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugClientPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    unsigned long nativeSystemId;&#xD;
    unsigned long nativeFlags;&#xD;
    if (check_numeric_i(systemId, nativeSystemId) &amp;&amp; &#xD;
        check_numeric_i(flags, nativeFlags))&#xD;
    {&#xD;
      char ansiNativeExeName[MAX_PATH];&#xD;
      char ansiNativeDescription[MAX_PATH];&#xD;
      unsigned long nativeActualExeNameSize, nativeActualDescriptionSize;&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetRunningProcessDescription(0, nativeSystemId, nativeFlags, ansiNativeExeName, MAX_PATH, &amp;nativeActualExeNameSize, ansiNativeDescription, MAX_PATH, &amp;nativeActualDescriptionSize)));&#xD;
      reset_string&lt;ansi&gt;(exeName, ansiNativeExeName);&#xD;
      reset_string&lt;ansi&gt;(description, ansiNativeDescription);&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
    </File>
    <File Name="IDebugControlPtr">
      <Entity Class="Data" Name="IDebugControlPtr">
        <Comments> Classe permettant d'accéder aux contrôles de débogage. </Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="WaitForEvent" Name="IDebugControlPtr:WaitForEvent@UInt32@UInt32@Int32">
        <Comments> Waits for an event that breaks into the debugger engine application. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="WaitForEvent" Type="Int32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
        <Attribute Modifier="Const " Name="timeout" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetTextMacro" Name="IDebugControlPtr:SetTextMacro@UInt32@AnsiString@Int32">
        <Comments> The SetTextMacro method sets the value of a fixed-name alias.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetTextMacro" Type="Int32"/>
        <Attribute Modifier="Const " Name="slot" Type="UInt32"/>
        <Attribute Modifier="Const " Name="macro" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="Evaluate" Name="IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32">
        <Comments> The Evaluate method evaluates an expression, returning the result.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="Evaluate" Type="Int32"/>
        <Attribute Modifier="Const " Name="expression" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="desiredType" Type="UInt32"/>
        <Attribute Modifier="Ref Virtual " Name="debugValue" Type="UInt64"/>
        <Attribute Modifier="Virtual " Name="remainderIndex" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="Execute" Name="IDebugControlPtr:Execute@UInt32@AnsiString@UInt32@Int32">
        <Comments> The Execute method executes the specified debugger commands.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="Execute" Type="Int32"/>
        <Attribute Modifier="Const " Name="outputControl" Type="UInt32"/>
        <Attribute Modifier="Const " Name="command" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="Assemble" Name="IDebugControlPtr:Assemble@UInt64@AnsiString@UInt64*@Int32">
        <Comments> The Assemble method assembles a single processor instruction. The assembled instruction is placed in the target's memory.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="Assemble" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="instr" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="endOffset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetExecutionStatus" Name="IDebugControlPtr:GetExecutionStatus@UInt32*@Int32">
        <Comments> The GetExecutionStatus method returns information about the execution status of the debugger engine.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetExecutionStatus" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="status" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetActualProcessorType" Name="IDebugControlPtr:GetActualProcessorType@UInt32*@Int32">
        <Comments> The GetActualProcessorType method returns the processor type of the physical processor of the computer that is running the target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetActualProcessorType" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="type" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetEffectiveProcessorType" Name="IDebugControlPtr:SetEffectiveProcessorType@UInt32@Int32">
        <Comments> The SetEffectiveProcessorType method sets the effective processor type of the processor of the computer that is running the target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetEffectiveProcessorType" Type="Int32"/>
        <Attribute Modifier="Const " Name="type" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetPromptText" Name="IDebugControlPtr:GetPromptText@AnsiString@Int32">
        <Comments> Returns the standard prompt text that will be prepended to the formatted output specified in the OutputPrompt and OutputPromptVaList methods.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetPromptText" Type="Int32"/>
        <Attribute Modifier="" Name="buffer" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="OpenLogFile" Name="IDebugControlPtr:OpenLogFile@AnsiString@Boolean@Int32">
        <Comments> Opens a log file that will receive output from the client objects.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="OpenLogFile" Type="Int32"/>
        <Attribute Modifier="Const " Name="file" Type="AnsiString"/>
        <Attribute Modifier="Const " Name="append" Type="Boolean"/>
      </Entity>
      <Entity Class="Function" FunctionName="CloseLogFile" Name="IDebugControlPtr:CloseLogFile@Int32">
        <Comments> Closes the currently-open log file.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="CloseLogFile" Type="Int32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetReturnOffset" Name="IDebugControlPtr:GetReturnOffset@UInt64*@Int32">
        <Comments> Returns the return address for the current function.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetReturnOffset" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="AddBreakpoint" Name="IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32">
        <Comments> Creates a new breakpoint for the current target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AddBreakpoint" Type="Int32"/>
        <Attribute Modifier="Const " Name="type" Type="UInt32"/>
        <Attribute Modifier="Const " Name="desiredId" Type="UInt32"/>
        <Attribute Modifier="Ref Virtual " Name="bp" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="RemoveBreakpoint" Name="IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32">
        <Comments> Removes a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="RemoveBreakpoint" Type="Int32"/>
        <Attribute Modifier="Ref Const " Name="bp" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetExpressionSyntax" Name="IDebugControlPtr:SetExpressionSyntax@UInt32@Int32">
        <Comments> The SetExpressionSyntax method sets the syntax that the engine will use to evaluate expressions.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetExpressionSyntax" Type="Int32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="IsPointer64Bit" Name="IDebugControlPtr:IsPointer64Bit@Int32">
        <Comments> The IsPointer64Bit method determines if the effective processor uses 64-bit pointers.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="IsPointer64Bit" Type="Int32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetStackTrace" Name="IDebugControlPtr:GetStackTrace@UInt64@UInt64@UInt64@DEBUG_STACK_FRAME@UInt32@UInt32*@Int32">
        <Comments> The GetStackTrace method returns the frames at the top of the specified call stack.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetStackTrace" Type="Int32"/>
        <Attribute Modifier="Const " Name="frameOffset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="stackOffset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="instructionOffset" Type="UInt64"/>
        <Attribute Modifier="Ref Array " Name="frames" Type="UInt64"/>
        <Attribute Modifier="Const " Name="frameSize" Type="UInt32"/>
        <Attribute Modifier="Virtual " Name="framesFilled" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetNearInstruction" Name="IDebugControlPtr:GetNearInstruction@UInt64@UInt32@UInt64*@Int32">
        <Comments> The GetNearInstruction method returns the location of a processor instruction relative to a given location.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugControlPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetNearInstruction" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="delta" Type="UInt32"/>
        <Attribute Modifier="Virtual " Name="nearOffset" Type="UInt64"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:WaitForEvent@UInt32@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:WaitForEvent@UInt32@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:SetTextMacro@UInt32@AnsiString@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:SetTextMacro@UInt32@AnsiString@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32_DEBUG_VALUE" Source="DEBUG_VALUE" SourceREF="Id" Target="IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32" TargetREF="debugValue"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:Evaluate@AnsiString@UInt32@DEBUG_VALUE*@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Execute@UInt32@AnsiString@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:Execute@UInt32@AnsiString@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:Assemble@UInt64@AnsiString@UInt64*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:Assemble@UInt64@AnsiString@UInt64*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetExecutionStatus@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetExecutionStatus@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetActualProcessorType@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetActualProcessorType@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:SetEffectiveProcessorType@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:SetEffectiveProcessorType@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetPromptText@AnsiString@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetPromptText@AnsiString@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:OpenLogFile@AnsiString@Boolean@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:OpenLogFile@AnsiString@Boolean@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:CloseLogFile@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:CloseLogFile@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetReturnOffset@UInt64*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetReturnOffset@UInt64*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32" TargetREF="bp"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:AddBreakpoint@UInt32@UInt32@IDebugBreakpointPtr*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32" TargetREF="bp"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:RemoveBreakpoint@IDebugBreakpointPtr@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:SetExpressionSyntax@UInt32@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:SetExpressionSyntax@UInt32@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:IsPointer64Bit@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:IsPointer64Bit@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetStackTrace@UInt64@UInt64@UInt64@DEBUG_STACK_FRAME@UInt32@UInt32*@Int32_DEBUG_STACK_FRAME" Source="DEBUG_STACK_FRAME" SourceREF="Id" Target="IDebugControlPtr:GetStackTrace@UInt64@UInt64@UInt64@DEBUG_STACK_FRAME@UInt32@UInt32*@Int32" TargetREF="frames"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetStackTrace@UInt64@UInt64@UInt64@DEBUG_STACK_FRAME@UInt32@UInt32*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetStackTrace@UInt64@UInt64@UInt64@DEBUG_STACK_FRAME@UInt32@UInt32*@Int32" TargetREF="IDebugControlPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugControlPtr:GetNearInstruction@UInt64@UInt32@UInt64*@Int32_IDebugControlPtr" Source="IDebugControlPtr" SourceREF="Id" Target="IDebugControlPtr:GetNearInstruction@UInt64@UInt32@UInt64*@Int32" TargetREF="IDebugControlPtr"/>
      <Content Type="Global-inclusion">&#xD;
#include "DebugPtr.h"&#xD;
typedef CDebugPtr&lt;IDebugControl3&gt; IDebugControlPtr;&#xD;
#include "IDebugBreakpointPtrInterpreter.hpp"&#xD;
#include "DEBUG_STACK_FRAMEInterpreter.hpp"&#xD;
</Content>
      <Content Target="IDebugControlPtr:GetPromptText@AnsiString@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugControlPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    char nativeBuffer[2048];&#xD;
    res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetPromptText(nativeBuffer, 2048, NULL)));&#xD;
    reset_string&lt;ansi&gt;(buffer, nativeBuffer);&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugControlPtr:GetStackTrace@UInt64@UInt64@UInt64@DEBUG_STACK_FRAME@UInt32@UInt32*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugControlPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    unsigned long long nativeFrameOffset;&#xD;
    unsigned long long nativeStackOffset;&#xD;
    unsigned long long nativeInstructionOffset;&#xD;
    std::vector&lt; DEBUG_STACK_FRAME &gt; nativeFrames;&#xD;
    unsigned long nativeFrameSize;&#xD;
    unsigned long nativeFramesFilled;&#xD;
    if (check_numeric_i(frameOffset, nativeFrameOffset) &amp;&amp;&#xD;
      check_numeric_i(stackOffset, nativeStackOffset) &amp;&amp;&#xD;
      check_numeric_i(instructionOffset, nativeInstructionOffset) &amp;&amp;&#xD;
      check_array(frames, nativeFrames, check_DEBUG_STACK_FRAME&lt;EncodingT&gt;) &amp;&amp;&#xD;
      check_numeric_i(frameSize, nativeFrameSize) &amp;&amp;&#xD;
      check_numeric_i(framesFilled, nativeFramesFilled))&#xD;
    {&#xD;
      nativeFrames.resize(nativeFrameSize);&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetStackTrace(nativeFrameOffset, nativeStackOffset, nativeInstructionOffset, nativeFrames.data(), nativeFrameSize, &amp;nativeFramesFilled)));&#xD;
      boost::shared_ptr&lt; Array&lt;EncodingT&gt; &gt; framesArray  = dynamic_pointer_cast&lt; Array&lt;EncodingT&gt; &gt;(frames);&#xD;
      if (framesArray)&#xD;
      {&#xD;
          for (size_t i = 0; i &lt; nativeFramesFilled; ++i)&#xD;
          {&#xD;
            boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; item(new DEBUG_STACK_FRAMEInterpreter&lt;EncodingT&gt;(nativeFrames[i]));&#xD;
            framesArray-&gt;addValue(item);&#xD;
          }&#xD;
      }&#xD;
      reset_numeric_i(framesFilled, nativeFramesFilled);&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
    </File>
    <File Name="DebugStatus">
      <Entity Class="Enumeration" Name="DebugStatus">
        <Comments> Spécifie l'état du moteur de débogage</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_STATUS_NO_CHANGE" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_STATUS_GO" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_STATUS_GO_HANDLED" Type="UInt64"/>
        <Attribute Default="3" Modifier="Const Static " Name="DEBUG_STATUS_GO_NOT_HANDLED" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_STATUS_STEP_OVER" Type="UInt64"/>
        <Attribute Default="5" Modifier="Const Static " Name="DEBUG_STATUS_STEP_INTO" Type="UInt64"/>
        <Attribute Default="6" Modifier="Const Static " Name="DEBUG_STATUS_BREAK" Type="UInt64"/>
        <Attribute Default="7" Modifier="Const Static " Name="DEBUG_STATUS_NO_DEBUGGEE" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_STATUS_STEP_BRANCH" Type="UInt64"/>
        <Attribute Default="9" Modifier="Const Static " Name="DEBUG_STATUS_IGNORE_EVENT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="CreateFlags">
      <Entity Class="Enumeration" Name="CreateFlags">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_PROCESS" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_ONLY_THIS_PROCESS" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="WaitFlags">
      <Entity Class="Enumeration" Name="WaitFlags">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_WAIT_DEFAULT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="TimeOut">
      <Entity Class="Enumeration" Name="TimeOut">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="-1" Modifier="Const Static " Name="INFINITE" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="DEBUG_VALUE">
      <Entity Class="Data" Name="DEBUG_VALUE">
        <Comments> The DEBUG_VALUE structure holds register and expression values.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="" Name="I8" Type="SByte"/>
        <Attribute Modifier="" Name="I16" Type="Int16"/>
        <Attribute Modifier="" Name="I32" Type="Int32"/>
        <Attribute Modifier="" Name="I64" Type="Int64"/>
        <Attribute Modifier="" Name="UI8" Type="Byte"/>
        <Attribute Modifier="" Name="UI16" Type="UInt16"/>
        <Attribute Modifier="" Name="UI32" Type="UInt32"/>
        <Attribute Modifier="" Name="UI64" Type="UInt64"/>
        <Attribute Modifier="" Name="F32" Type="Single"/>
        <Attribute Modifier="" Name="F64" Type="Double"/>
        <Attribute Modifier="" Name="C8" Type="AnsiChar"/>
        <Attribute Modifier="" Name="C16" Type="WideChar"/>
        <Attribute Modifier="" Name="Type" Type="UInt32"/>
        <Attribute Modifier="" Name="TailOfRawBytes" Type="UInt32"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>      <Content Target="DEBUG_VALUE" TargetREF="I8" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((char) value().I8));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="I16" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((short) value().I16));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="I32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((int) value().I32));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="I64" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((long long) value().I64));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="UI8" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((unsigned char) value().I8));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="UI16" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((unsigned short) value().I16));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="UI32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((unsigned int) value().I32));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="UI64" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;((unsigned long long) value().I64));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="C8" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new String&lt;EncodingT&gt;((char) value().I8));&#xD;
  return res;&#xD;
</Content>
      <Content Target="DEBUG_VALUE" TargetREF="C16" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new String&lt;EncodingT&gt;((wchar_t) value().I16));&#xD;
  return res;&#xD;
</Content>
    </File>
    <File Name="DebugValue">
      <Entity Class="Enumeration" Name="DebugValue">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_VALUE_INT8" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_VALUE_INT16" Type="UInt64"/>
        <Attribute Default="3" Modifier="Const Static " Name="DEBUG_VALUE_INT32" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_VALUE_INT64" Type="UInt64"/>
        <Attribute Default="5" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT32" Type="UInt64"/>
        <Attribute Default="6" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT64" Type="UInt64"/>
        <Attribute Default="7" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT80" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT82" Type="UInt64"/>
        <Attribute Default="9" Modifier="Const Static " Name="DEBUG_VALUE_FLOAT128" Type="UInt64"/>
        <Attribute Default="10" Modifier="Const Static " Name="DEBUG_VALUE_VECTOR64" Type="UInt64"/>
        <Attribute Default="11" Modifier="Const Static " Name="DEBUG_VALUE_VECTOR128" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="DebugExecute">
      <Entity Class="Enumeration" Name="DebugExecute">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_EXECUTE_DEFAULT" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_EXECUTE_ECHO" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_EXECUTE_NOT_LOGGED" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_EXECUTE_NO_REPEAT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="DebugOutCTL">
      <Entity Class="Enumeration" Name="DebugOutCTL">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_OUTCTL_THIS_CLIENT" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_OUTCTL_ALL_CLIENTS" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_OUTCTL_ALL_OTHER_CLIENTS" Type="UInt64"/>
        <Attribute Default="3" Modifier="Const Static " Name="DEBUG_OUTCTL_IGNORE" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_OUTCTL_LOG_ONLY" Type="UInt64"/>
        <Attribute Default="7" Modifier="Const Static " Name="DEBUG_OUTCTL_SEND_MASK" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_OUTCTL_NOT_LOGGED" Type="UInt64"/>
        <Attribute Default="16" Modifier="Const Static " Name="DEBUG_OUTCTL_OVERRIDE_MASK" Type="UInt64"/>
        <Attribute Default="-1" Modifier="Const Static " Name="DEBUG_OUTCTL_AMBIENT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="IDebugSystemObjectsPtr">
      <Entity Class="Data" Name="IDebugSystemObjectsPtr">
        <Comments> Classe permettant d'accéder aux informations du processus en cours de débogage.</Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentProcessId" Name="IDebugSystemObjectsPtr:GetCurrentProcessId@UInt32*@Int32">
        <Comments> Returns the engine process ID for the current process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSystemObjectsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentProcessId" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="processId" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentProcessDataOffset" Name="IDebugSystemObjectsPtr:GetCurrentProcessDataOffset@UInt64*@Int32">
        <Comments> Returns the location of the system data structure describing the current process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSystemObjectsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentProcessDataOffset" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentProcessExecutableName" Name="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32">
        <Comments> Returns the name of executable file loaded in the current process.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSystemObjectsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentProcessExecutableName" Type="Int32"/>
        <Attribute Modifier="" Name="buffer" Type="AnsiString"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSystemObjectsPtr:GetCurrentProcessId@UInt32*@Int32_IDebugSystemObjectsPtr" Source="IDebugSystemObjectsPtr" SourceREF="Id" Target="IDebugSystemObjectsPtr:GetCurrentProcessId@UInt32*@Int32" TargetREF="IDebugSystemObjectsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSystemObjectsPtr:GetCurrentProcessDataOffset@UInt64*@Int32_IDebugSystemObjectsPtr" Source="IDebugSystemObjectsPtr" SourceREF="Id" Target="IDebugSystemObjectsPtr:GetCurrentProcessDataOffset@UInt64*@Int32" TargetREF="IDebugSystemObjectsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32_IDebugSystemObjectsPtr" Source="IDebugSystemObjectsPtr" SourceREF="Id" Target="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32" TargetREF="IDebugSystemObjectsPtr"/>
      <Content Type="Global-inclusion">&#xD;
#include "DebugPtr.h"&#xD;
typedef CDebugPtr&lt;IDebugSystemObjects&gt; IDebugSystemObjectsPtr;&#xD;
</Content>
      <Content Target="IDebugSystemObjectsPtr:GetCurrentProcessExecutableName@AnsiString@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugSystemObjectsPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    char nativeBuffer[MAX_PATH];&#xD;
    res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetCurrentProcessExecutableName(nativeBuffer, MAX_PATH, NULL)));&#xD;
    reset_string&lt;ansi&gt;(buffer, nativeBuffer);&#xD;
  }&#xD;
  return res;&#xD;
</Content>
    </File>
    <File Name="IDebugSymbolsPtr">
      <Entity Class="Data" Name="IDebugSymbolsPtr">
        <Comments> Classe permettant d'accéder aux informations de symboles de débogage.</Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="AddSymbolOptions" Name="IDebugSymbolsPtr:AddSymbolOptions@UInt32@Int32">
        <Comments> Turns on some of the engine's global symbol options. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AddSymbolOptions" Type="Int32"/>
        <Attribute Modifier="Const " Name="options" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="AppendImagePath" Name="IDebugSymbolsPtr:AppendImagePath@AnsiString@Int32">
        <Comments> Appends directories to the executable image path.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AppendImagePath" Type="Int32"/>
        <Attribute Modifier="Const " Name="addition" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="AppendSourcePath" Name="IDebugSymbolsPtr:AppendSourcePath@AnsiString@Int32">
        <Comments> Appends directories to the source path.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AppendSourcePath" Type="Int32"/>
        <Attribute Modifier="Const " Name="addition" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="AppendSymbolPath" Name="IDebugSymbolsPtr:AppendSymbolPath@AnsiString@Int32">
        <Comments> Appends directories to the symbol path.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="AppendSymbolPath" Type="Int32"/>
        <Attribute Modifier="Const " Name="addition" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetSymbolModule" Name="IDebugSymbolsPtr:GetSymbolModule@AnsiString@UInt64*@Int32">
        <Comments> Returns the base address of module which contains the specified symbol.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetSymbolModule" Type="Int32"/>
        <Attribute Modifier="Const " Name="symbol" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="base" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetSymbolOptions" Name="IDebugSymbolsPtr:GetSymbolOptions@UInt32*@Int32">
        <Comments> Returns the engine's global symbol options.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetSymbolOptions" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="options" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetSymbolPath" Name="IDebugSymbolsPtr:GetSymbolPath@AnsiString@Int32">
        <Comments> Returns the symbol path.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetSymbolPath" Type="Int32"/>
        <Attribute Modifier="" Name="buffer" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetLineByOffset" Name="IDebugSymbolsPtr:GetLineByOffset@UInt64@UInt32*@AnsiString@UInt64*@Int32">
        <Comments> Returns the source filename and the line number within the source file of an instruction in the target.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetLineByOffset" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="Virtual " Name="line" Type="UInt32"/>
        <Attribute Modifier="" Name="fileBuffer" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="displacement" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetModuleByOffset" Name="IDebugSymbolsPtr:GetModuleByOffset@UInt64@UInt32@UInt32*@UInt64*@Int32">
        <Comments> Searches through the target's modules for one whose memory allocation includes the specified location.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetModuleByOffset" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="startIndex" Type="UInt32"/>
        <Attribute Modifier="Virtual " Name="index" Type="UInt32"/>
        <Attribute Modifier="Virtual " Name="base" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetNameByOffset" Name="IDebugSymbolsPtr:GetNameByOffset@UInt64@AnsiString@UInt64*@Int32">
        <Comments> Returns the name of the symbol at the specified location in the target's virtual address space.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetNameByOffset" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="" Name="nameBuffer" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="displacement" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetNearNameByOffset" Name="IDebugSymbolsPtr:GetNearNameByOffset@UInt64@Int32@AnsiString@UInt64*@Int32">
        <Comments> Returns the name of a symbol that is located near the specified location. </Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetNearNameByOffset" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
        <Attribute Modifier="Const " Name="delta" Type="Int32"/>
        <Attribute Modifier="" Name="nameBuffer" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="displacement" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetOffsetByLine" Name="IDebugSymbolsPtr:GetOffsetByLine@UInt32@AnsiString@UInt64*@Int32">
        <Comments> The GetOffsetByLine method returns the location of the instruction that corresponds to a specified line in the source code.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetOffsetByLine" Type="Int32"/>
        <Attribute Modifier="Const " Name="line" Type="UInt32"/>
        <Attribute Modifier="Const " Name="file" Type="AnsiString"/>
        <Attribute Modifier="Virtual " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetSourceFileLineOffsets" Name="IDebugSymbolsPtr:GetSourceFileLineOffsets@AnsiString@UInt64@Int32">
        <Comments> The GetSourceFileLineOffsets method maps each line in a source file to a location in the target's memory.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugSymbolsPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetSourceFileLineOffsets" Type="Int32"/>
        <Attribute Modifier="Const " Name="file" Type="AnsiString"/>
        <Attribute Modifier="Array " Name="addresses" Type="UInt64"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:AddSymbolOptions@UInt32@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:AddSymbolOptions@UInt32@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:AppendImagePath@AnsiString@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:AppendImagePath@AnsiString@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:AppendSourcePath@AnsiString@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:AppendSourcePath@AnsiString@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:AppendSymbolPath@AnsiString@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:AppendSymbolPath@AnsiString@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetSymbolModule@AnsiString@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetSymbolModule@AnsiString@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetSymbolOptions@UInt32*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetSymbolOptions@UInt32*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetSymbolPath@AnsiString@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetSymbolPath@AnsiString@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetLineByOffset@UInt64@UInt32*@AnsiString@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetLineByOffset@UInt64@UInt32*@AnsiString@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetModuleByOffset@UInt64@UInt32@UInt32*@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetModuleByOffset@UInt64@UInt32@UInt32*@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetNameByOffset@UInt64@AnsiString@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetNameByOffset@UInt64@AnsiString@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetNearNameByOffset@UInt64@Int32@AnsiString@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetNearNameByOffset@UInt64@Int32@AnsiString@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetOffsetByLine@UInt32@AnsiString@UInt64*@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetOffsetByLine@UInt32@AnsiString@UInt64*@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugSymbolsPtr:GetSourceFileLineOffsets@AnsiString@UInt64@Int32_IDebugSymbolsPtr" Source="IDebugSymbolsPtr" SourceREF="Id" Target="IDebugSymbolsPtr:GetSourceFileLineOffsets@AnsiString@UInt64@Int32" TargetREF="IDebugSymbolsPtr"/>
      <Content Type="Global-inclusion">&#xD;
#include "DebugPtr.h"&#xD;
typedef CDebugPtr&lt;IDebugSymbols&gt; IDebugSymbolsPtr;&#xD;
</Content>
      <Content Target="IDebugSymbolsPtr:GetSymbolPath@AnsiString@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugSymbolsPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    char nativeBuffer[2048];&#xD;
    ZeroMemory(nativeBuffer, 2048);&#xD;
    res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetSymbolPath(nativeBuffer, 2048, NULL)));&#xD;
    reset_string&lt;ansi&gt;(buffer, nativeBuffer);&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugSymbolsPtr:GetLineByOffset@UInt64@UInt32*@AnsiString@UInt64*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugSymbolsPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    unsigned long long nativeOffset;&#xD;
    unsigned long nativeLine;&#xD;
    char nativeFileBuffer[2048];&#xD;
    ZeroMemory(nativeFileBuffer, 2048);&#xD;
    unsigned long long nativeDisplacement;&#xD;
    if (check_numeric_i(offset, nativeOffset) &amp;&amp; &#xD;
        check_numeric_i(line, nativeLine) &amp;&amp;&#xD;
        check_numeric_i(displacement, nativeDisplacement))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetLineByOffset(nativeOffset, &amp;nativeLine, nativeFileBuffer, 2048, NULL, &amp;nativeDisplacement)));&#xD;
      reset_numeric_i(line, nativeLine);&#xD;
      reset_string&lt;ansi&gt;(fileBuffer, nativeFileBuffer);&#xD;
      reset_numeric_i(displacement, nativeDisplacement);&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugSymbolsPtr:GetNameByOffset@UInt64@AnsiString@UInt64*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugSymbolsPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    unsigned long long nativeOffset;&#xD;
    char nativeNameBuffer[2048];&#xD;
    ZeroMemory(nativeNameBuffer, 2048);&#xD;
    unsigned long long nativeDisplacement;&#xD;
    if (check_numeric_i(offset, nativeOffset) &amp;&amp;&#xD;
        check_numeric_i(displacement, nativeDisplacement))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetNameByOffset(nativeOffset, nativeNameBuffer, 2048, NULL, &amp;nativeDisplacement)));&#xD;
      reset_string&lt;ansi&gt;(nameBuffer, nativeNameBuffer);&#xD;
      reset_numeric_i(displacement, nativeDisplacement);&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugSymbolsPtr:GetNearNameByOffset@UInt64@Int32@AnsiString@UInt64*@Int32" Type="Implementation-body">&#xD;
  boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
  IDebugSymbolsPtr valuePtr = value();&#xD;
  if (valuePtr != NULL)&#xD;
  {&#xD;
    unsigned long long nativeOffset;&#xD;
    long nativeDelta;&#xD;
    char nativeNameBuffer[2048];&#xD;
    ZeroMemory(nativeNameBuffer, 2048);&#xD;
    unsigned long long nativeDisplacement;&#xD;
    if (check_numeric_i(offset, nativeOffset) &amp;&amp; &#xD;
        check_numeric_i(delta, nativeDelta) &amp;&amp;&#xD;
        check_numeric_i(displacement, nativeDisplacement))&#xD;
    {&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(valuePtr-&gt;GetNearNameByOffset(nativeOffset, nativeDelta, nativeNameBuffer, 2048, NULL, &amp;nativeDisplacement)));&#xD;
      reset_string&lt;ansi&gt;(nameBuffer, nativeNameBuffer);&#xD;
      reset_numeric_i(displacement, nativeDisplacement);&#xD;
    }&#xD;
  }&#xD;
  return res;&#xD;
</Content>
      <Content Target="IDebugSymbolsPtr:GetSourceFileLineOffsets@AnsiString@UInt64@Int32" Type="Implementation-body">&#xD;
	boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; res(new Numeric&lt;EncodingT&gt;());&#xD;
	IDebugSymbolsPtr valuePtr = value();&#xD;
	if (valuePtr != NULL)&#xD;
	{&#xD;
		typename ansi::string_t nativeFile;&#xD;
    std::vector&lt; unsigned long long &gt; nativeAddresses;&#xD;
		if (check_string&lt;ansi&gt;(file, nativeFile) &amp;&amp;&#xD;
        check_array(addresses, nativeAddresses, check_numeric_i&lt;EncodingT,unsigned long long&gt;))&#xD;
		{&#xD;
      unsigned long nlines = 0;&#xD;
      HRESULT hr = valuePtr-&gt;GetSourceFileLineOffsets(nativeFile.c_str(), NULL, 0, &amp;nlines);&#xD;
      if (SUCCEEDED(hr))&#xD;
      {&#xD;
        nativeAddresses.resize(nlines);&#xD;
        hr = valuePtr-&gt;GetSourceFileLineOffsets(nativeFile.c_str(), nativeAddresses.data(), nlines, NULL);&#xD;
        boost::shared_ptr&lt; Array&lt;EncodingT&gt; &gt; addressesArray  = dynamic_pointer_cast&lt; Array&lt;EncodingT&gt; &gt;(addresses);&#xD;
        if (addressesArray)&#xD;
        {&#xD;
            for (size_t i = 0; i &lt; nlines; ++i)&#xD;
            {&#xD;
              boost::shared_ptr&lt; Base&lt;EncodingT&gt; &gt; item(new Numeric&lt;EncodingT&gt;(nativeAddresses[i]));&#xD;
              addressesArray-&gt;addValue(item);&#xD;
            }&#xD;
        }&#xD;
      }&#xD;
      res.reset(new Numeric&lt;EncodingT&gt;(hr));&#xD;
		}&#xD;
	}&#xD;
	return res;&#xD;
</Content>
    </File>
    <File Name="ImageFileMachine">
      <Entity Class="Enumeration" Name="ImageFileMachine">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="467" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_AM33" Type="UInt64"/>
        <Attribute Default="34404" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_AMD64" Type="UInt64"/>
        <Attribute Default="448" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_ARM" Type="UInt64"/>
        <Attribute Default="452" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_ARMV7" Type="UInt64"/>
        <Attribute Default="3772" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_EBC" Type="UInt64"/>
        <Attribute Default="332" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_I386" Type="UInt64"/>
        <Attribute Default="512" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_IA64" Type="UInt64"/>
        <Attribute Default="36929" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_M32R" Type="UInt64"/>
        <Attribute Default="614" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_MIPS16" Type="UInt64"/>
        <Attribute Default="870" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_MIPSFPU" Type="UInt64"/>
        <Attribute Default="1126" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_MIPSFPU16" Type="UInt64"/>
        <Attribute Default="496" Modifier="Const Static " Name="IMAGE_FILE_MACHINE_POWERPC" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="DebugBreakpoint">
      <Entity Class="Enumeration" Name="DebugBreakpoint">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="0" Modifier="Const Static " Name="DEBUG_BREAKPOINT_CODE" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_BREAKPOINT_DATA" Type="UInt64"/>
        <Attribute Default="-1" Modifier="Const Static " Name="DEBUG_ANY_ID" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="DebugBreakpointFlag">
      <Entity Class="Enumeration" Name="DebugBreakpointFlag">
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Default="1" Modifier="Const Static " Name="DEBUG_BREAKPOINT_GO_ONLY" Type="UInt64"/>
        <Attribute Default="2" Modifier="Const Static " Name="DEBUG_BREAKPOINT_DEFERRED" Type="UInt64"/>
        <Attribute Default="4" Modifier="Const Static " Name="DEBUG_BREAKPOINT_ENABLED" Type="UInt64"/>
        <Attribute Default="8" Modifier="Const Static " Name="DEBUG_BREAKPOINT_ADDER_ONLY" Type="UInt64"/>
        <Attribute Default="16" Modifier="Const Static " Name="DEBUG_BREAKPOINT_ONE_SHOT" Type="UInt64"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
    <File Name="IDebugBreakpointPtr">
      <Entity Class="Data" Name="IDebugBreakpointPtr">
        <Comments> Classe permettant d'accéder aux informations d'un breakpoint.</Comments>
        <Attribute Modifier="Id Const Virtual " Name="Id" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetOffset" Name="IDebugBreakpointPtr:SetOffset@UInt64@Int32">
        <Comments> Sets the location that triggers a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetOffset" Type="Int32"/>
        <Attribute Modifier="Const " Name="offset" Type="UInt64"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetOffsetExpression" Name="IDebugBreakpointPtr:SetOffsetExpression@AnsiString@Int32">
        <Comments> The SetOffsetExpression methods set an expression string that evaluates to the location that triggers a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetOffsetExpression" Type="Int32"/>
        <Attribute Modifier="Const " Name="expression" Type="AnsiString"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetFlags" Name="IDebugBreakpointPtr:SetFlags@UInt32@Int32">
        <Comments> Sets the flags for a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetFlags" Type="Int32"/>
        <Attribute Modifier="Const " Name="flags" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="SetPassCount" Name="IDebugBreakpointPtr:SetPassCount@UInt32@Int32">
        <Comments> The SetPassCount method sets the number of times that the target must reach the breakpoint location before the breakpoint is triggered.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="SetPassCount" Type="Int32"/>
        <Attribute Modifier="Const " Name="count" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetPassCount" Name="IDebugBreakpointPtr:GetPassCount@UInt32*@Int32">
        <Comments> The GetPassCount method returns the number of times that the target was originally required to reach the breakpoint location before the breakpoint is triggered.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetPassCount" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="count" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetCurrentPassCount" Name="IDebugBreakpointPtr:GetCurrentPassCount@UInt32*@Int32">
        <Comments> The GetCurrentPassCount method returns the remaining number of times that the target must reach the breakpoint location before the breakpoint is triggered.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetCurrentPassCount" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="count" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetId" Name="IDebugBreakpointPtr:GetId@UInt32*@Int32">
        <Comments> The GetId method returns a breakpoint ID, which is the engine's unique identifier for a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetId" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="bpId" Type="UInt32"/>
      </Entity>
      <Entity Class="Function" FunctionName="GetOffset" Name="IDebugBreakpointPtr:GetOffset@UInt64*@Int32">
        <Comments> The GetOffset method returns the location that triggers a breakpoint.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="Ref Contextual " Name="IDebugBreakpointPtr" Type="UInt64"/>
        <Attribute Modifier="Auto " Name="GetOffset" Type="Int32"/>
        <Attribute Modifier="Virtual " Name="offset" Type="UInt64"/>
      </Entity>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:SetOffset@UInt64@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:SetOffset@UInt64@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:SetOffsetExpression@AnsiString@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:SetOffsetExpression@AnsiString@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:SetFlags@UInt32@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:SetFlags@UInt32@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:SetPassCount@UInt32@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:SetPassCount@UInt32@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:GetPassCount@UInt32*@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:GetPassCount@UInt32*@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:GetCurrentPassCount@UInt32*@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:GetCurrentPassCount@UInt32*@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:GetId@UInt32*@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:GetId@UInt32*@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Relation Multiplicity="Zero-One" Name="R_IDebugBreakpointPtr:GetOffset@UInt64*@Int32_IDebugBreakpointPtr" Source="IDebugBreakpointPtr" SourceREF="Id" Target="IDebugBreakpointPtr:GetOffset@UInt64*@Int32" TargetREF="IDebugBreakpointPtr"/>
      <Content Type="Global-inclusion">&#xD;
#include "DebugPtr.h"&#xD;
typedef IDebugBreakpoint* IDebugBreakpointPtr;&#xD;
</Content>
    </File>
    <File Name="DEBUG_STACK_FRAME">
      <Entity Class="Data" Name="DEBUG_STACK_FRAME">
        <Comments> The DEBUG_STACK_FRAME structure describes a stack frame and the address of the current instruction for the stack frame.</Comments>
        <Attribute Modifier="Id Const " Name="Id" Type="UInt64"/>
        <Attribute Modifier="" Name="InstructionOffset" Type="UInt64"/>
        <Attribute Modifier="" Name="ReturnOffset" Type="UInt64"/>
        <Attribute Modifier="" Name="FrameOffset" Type="UInt64"/>
        <Attribute Modifier="" Name="StackOffset" Type="UInt64"/>
        <Attribute Modifier="" Name="FuncTableEntry" Type="UInt64"/>
        <Attribute Modifier="" Name="Virtual" Type="Boolean"/>
        <Attribute Modifier="" Name="FrameNumber" Type="UInt32"/>
      </Entity>
      <Content Type="Global-inclusion">&#xD;
</Content>    </File>
  </Workspace>

</document_schema>
