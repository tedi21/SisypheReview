/*
 * DEBUG_VALUEInterpreter_impl.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
DEBUG_VALUEInterpreter<EncodingT>::DEBUG_VALUEInterpreter()
{
}

template <class EncodingT>
void DEBUG_VALUEInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
DEBUG_VALUEInterpreter<EncodingT>::~DEBUG_VALUEInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void DEBUG_VALUEInterpreter<EncodingT>::initValue(const DEBUG_VALUE& object)
{
	m_object = object;
}

template <class EncodingT>
DEBUG_VALUE& DEBUG_VALUEInterpreter<EncodingT>::value()
{
	return m_object;
}

template <class EncodingT>
const DEBUG_VALUE& DEBUG_VALUEInterpreter<EncodingT>::value() const
{
	return m_object;
}

template <class EncodingT>
DEBUG_VALUEInterpreter<EncodingT>::DEBUG_VALUEInterpreter(const DEBUG_VALUE& object)
{
	initValue(object);
}

template <class EncodingT>
DEBUG_VALUEInterpreter<EncodingT>::DEBUG_VALUEInterpreter(const DEBUG_VALUEInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
DEBUG_VALUEInterpreter<EncodingT>& DEBUG_VALUEInterpreter<EncodingT>::operator=(const DEBUG_VALUEInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const DEBUG_VALUE& DEBUG_VALUEInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void DEBUG_VALUEInterpreter<EncodingT>::setValue(DEBUG_VALUE const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t DEBUG_VALUEInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new DEBUG_VALUEInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t DEBUG_VALUEInterpreter<EncodingT>::getClassName() const
{
	return C("DEBUG_VALUE");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("DEBUG_VALUE"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in DEBUG_VALUE, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::geti8() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().I8));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::geti16() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().I16));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::geti32() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().I32));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::geti64() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().I64));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::getf32() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().F32));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::getf64() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().F64));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::gettype() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().Type));
	return res;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > DEBUG_VALUEInterpreter<EncodingT>::gettailOfRawBytes() const
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>(value().TailOfRawBytes));
	return res;
}


template <class EncodingT>
bool check_DEBUG_VALUE(shared_ptr< Base<EncodingT> > const& val, DEBUG_VALUE& a)
{
	shared_ptr< DEBUG_VALUEInterpreter<EncodingT> > value  = dynamic_pointer_cast< DEBUG_VALUEInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "DEBUG_VALUE expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_DEBUG_VALUE(shared_ptr< Base<EncodingT> >& val, DEBUG_VALUE const& a)
{
	shared_ptr< DEBUG_VALUEInterpreter<EncodingT> > value  = dynamic_pointer_cast< DEBUG_VALUEInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "DEBUG_VALUE expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C