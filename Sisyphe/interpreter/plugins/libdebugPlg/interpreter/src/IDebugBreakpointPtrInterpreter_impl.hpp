/*
 * IDebugBreakpointPtrInterpreter_impl.hpp
 *
 *
 * @date 21-06-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
IDebugBreakpointPtrInterpreter<EncodingT>::IDebugBreakpointPtrInterpreter()
{
}

template <class EncodingT>
void IDebugBreakpointPtrInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
IDebugBreakpointPtrInterpreter<EncodingT>::~IDebugBreakpointPtrInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void IDebugBreakpointPtrInterpreter<EncodingT>::initValue(const IDebugBreakpointPtr& object)
{
	m_object = object;
}

template <class EncodingT>
IDebugBreakpointPtr& IDebugBreakpointPtrInterpreter<EncodingT>::value()
{
	return m_object;
}

template <class EncodingT>
const IDebugBreakpointPtr& IDebugBreakpointPtrInterpreter<EncodingT>::value() const
{
	return m_object;
}

template <class EncodingT>
IDebugBreakpointPtrInterpreter<EncodingT>::IDebugBreakpointPtrInterpreter(const IDebugBreakpointPtr& object)
{
	initValue(object);
}

template <class EncodingT>
IDebugBreakpointPtrInterpreter<EncodingT>::IDebugBreakpointPtrInterpreter(const IDebugBreakpointPtrInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
IDebugBreakpointPtrInterpreter<EncodingT>& IDebugBreakpointPtrInterpreter<EncodingT>::operator=(const IDebugBreakpointPtrInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const IDebugBreakpointPtr& IDebugBreakpointPtrInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void IDebugBreakpointPtrInterpreter<EncodingT>::setValue(IDebugBreakpointPtr const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t IDebugBreakpointPtrInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugBreakpointPtrInterpreter<EncodingT>::clone() const
{
	return shared_ptr< Base<EncodingT> >(new IDebugBreakpointPtrInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t IDebugBreakpointPtrInterpreter<EncodingT>::getClassName() const
{
	return C("IDebugBreakpointPtr");
}

template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugBreakpointPtrInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< shared_ptr< Base<EncodingT> > >& params)
{
	shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("IDebugBreakpointPtr"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in IDebugBreakpointPtr, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Sets the location that triggers a breakpoint.
template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugBreakpointPtrInterpreter<EncodingT>::setOffset(const shared_ptr< Base<EncodingT> >& offset)
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	unsigned long long nativeOffset;
	if (check_numeric(offset, nativeOffset))
	{
		res.reset(new Numeric<EncodingT>(value()->SetOffset(nativeOffset)));
	}
	return res;
}

// Sets the flags for a breakpoint.
template <class EncodingT>
shared_ptr< Base<EncodingT> > IDebugBreakpointPtrInterpreter<EncodingT>::setFlags(const shared_ptr< Base<EncodingT> >& flags)
{
	shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	unsigned long nativeFlags;
	if (check_numeric(flags, nativeFlags))
	{
		res.reset(new Numeric<EncodingT>(value()->SetFlags(nativeFlags)));
	}
	return res;
}


template <class EncodingT>
bool check_IDebugBreakpointPtr(shared_ptr< Base<EncodingT> > const& val, IDebugBreakpointPtr& a)
{
	shared_ptr< IDebugBreakpointPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugBreakpointPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugBreakpointPtr expected, got " << A(val->getClassName());
	}
	return value;
}

template <class EncodingT>
bool reset_IDebugBreakpointPtr(shared_ptr< Base<EncodingT> >& val, IDebugBreakpointPtr const& a)
{
	shared_ptr< IDebugBreakpointPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugBreakpointPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugBreakpointPtr expected, got " << A(val->getClassName());
	}
	return value;
}

NAMESPACE_END

#undef A
#undef C