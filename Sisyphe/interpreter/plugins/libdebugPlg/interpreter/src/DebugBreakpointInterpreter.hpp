/*
 * DebugBreakpointInterpreter.hpp
 *
 *
 * @date 24-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUGBREAKPOINT_INTERPRETER_H_
#define _DEBUGBREAKPOINT_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "String.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	template <class EncodingT>
	class DebugBreakpointInterpreter
	: public Base<EncodingT>
	{
	private:

		void tidyValue();

	public:
		DebugBreakpointInterpreter();

		~DebugBreakpointInterpreter();

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_CODE() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_BREAKPOINT_DATA() const;

		boost::shared_ptr< Base<EncodingT> > getDEBUG_ANY_ID() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DebugBreakpointInterpreter, C("DebugBreakpoint") );
			METHOD_KEY_REGISTER ( DebugBreakpointInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_CODE, const_t, C("DebugBreakpoint::DEBUG_BREAKPOINT_CODE") );
			METHOD_KEY_REGISTER ( DebugBreakpointInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_BREAKPOINT_DATA, const_t, C("DebugBreakpoint::DEBUG_BREAKPOINT_DATA") );
			METHOD_KEY_REGISTER ( DebugBreakpointInterpreter, boost::shared_ptr< Base<EncodingT> >, getDEBUG_ANY_ID, const_t, C("DebugBreakpoint::DEBUG_ANY_ID") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("DebugBreakpoint") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpoint::DEBUG_BREAKPOINT_CODE") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpoint::DEBUG_BREAKPOINT_DATA") );
			METHOD_KEY_UNREGISTER ( C("DebugBreakpoint::DEBUG_ANY_ID") );
		FACTORY_END_UNREGISTER
	};

NAMESPACE_END

#undef A
#undef C
#include "DebugBreakpointInterpreter_impl.hpp"

#endif