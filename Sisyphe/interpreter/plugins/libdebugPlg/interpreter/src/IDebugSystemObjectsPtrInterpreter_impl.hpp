/*
 * IDebugSystemObjectsPtrInterpreter_impl.hpp
 *
 *
 * @date 24-09-2016
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

NAMESPACE_BEGIN(interp)


template <class EncodingT>
IDebugSystemObjectsPtrInterpreter<EncodingT>::IDebugSystemObjectsPtrInterpreter()
{
}

template <class EncodingT>
void IDebugSystemObjectsPtrInterpreter<EncodingT>::tidyValue()
{
}

template <class EncodingT>
IDebugSystemObjectsPtrInterpreter<EncodingT>::~IDebugSystemObjectsPtrInterpreter()
{
	tidyValue();
}

template <class EncodingT>
void IDebugSystemObjectsPtrInterpreter<EncodingT>::initValue(const IDebugSystemObjectsPtr& object)
{
	m_object = object;
}

template <class EncodingT>
IDebugSystemObjectsPtr& IDebugSystemObjectsPtrInterpreter<EncodingT>::value()
{
	return m_object;
}

template <class EncodingT>
const IDebugSystemObjectsPtr& IDebugSystemObjectsPtrInterpreter<EncodingT>::value() const
{
	return m_object;
}

template <class EncodingT>
IDebugSystemObjectsPtrInterpreter<EncodingT>::IDebugSystemObjectsPtrInterpreter(const IDebugSystemObjectsPtr& object)
{
	initValue(object);
}

template <class EncodingT>
IDebugSystemObjectsPtrInterpreter<EncodingT>::IDebugSystemObjectsPtrInterpreter(const IDebugSystemObjectsPtrInterpreter<EncodingT>& rhs)
{
	initValue(rhs.value());
}

template <class EncodingT>
IDebugSystemObjectsPtrInterpreter<EncodingT>& IDebugSystemObjectsPtrInterpreter<EncodingT>::operator=(const IDebugSystemObjectsPtrInterpreter<EncodingT>& rhs)
{
	setValue(rhs.value());
	return *this;
}

template <class EncodingT>
const IDebugSystemObjectsPtr& IDebugSystemObjectsPtrInterpreter<EncodingT>::getValue() const
{
	return value();
}

template <class EncodingT>
void IDebugSystemObjectsPtrInterpreter<EncodingT>::setValue(IDebugSystemObjectsPtr const& object)
{
	tidyValue();
	initValue(object);
}

template <class EncodingT>
typename EncodingT::string_t IDebugSystemObjectsPtrInterpreter<EncodingT>::toString() const
{
	return EncodingT::EMPTY;
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugSystemObjectsPtrInterpreter<EncodingT>::clone() const
{
	return boost::shared_ptr< Base<EncodingT> >(new IDebugSystemObjectsPtrInterpreter<EncodingT>(*this));
}

template <class EncodingT>
typename EncodingT::string_t IDebugSystemObjectsPtrInterpreter<EncodingT>::getClassName() const
{
	return C("IDebugSystemObjectsPtr");
}

template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugSystemObjectsPtrInterpreter<EncodingT>::invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params)
{
	boost::shared_ptr< Base<EncodingT> > obj(new Base<EncodingT>());
	ParameterArray args, ret;
	if (check_parameters_array(params, args))
	{
		if (tryInvoke(this, C("IDebugSystemObjectsPtr"), method, args, ret))
		{
			find_parameter(ret, FACTORY_RETURN_PARAMETER, obj);
			for (size_t i = 0; i < params.size(); ++i)
			{
				find_parameter(ret, i, params[i]);
			}
		}
		else
		{
			Category* logger = &Category::getInstance(LOGNAME);
			logger->errorStream() << "Unexpected call in IDebugSystemObjectsPtr, no method \"" << A(method) << "\" exists.";
		}
	}
	return obj;
}

// Returns the engine process ID for the current process.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugSystemObjectsPtrInterpreter<EncodingT>::getCurrentProcessId(boost::shared_ptr< Base<EncodingT> >& processId)
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	unsigned long nativeProcessId;
	if (check_numeric(processId, nativeProcessId))
	{
		res.reset(new Numeric<EncodingT>(value()->GetCurrentProcessId(&nativeProcessId)));
		reset_numeric(processId, nativeProcessId);
	}
	return res;
}

// Returns the location of the system data structure describing the current process.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugSystemObjectsPtrInterpreter<EncodingT>::getCurrentProcessDataOffset(boost::shared_ptr< Base<EncodingT> >& offset)
{
	boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	unsigned long long nativeOffset;
	if (check_numeric(offset, nativeOffset))
	{
		res.reset(new Numeric<EncodingT>(value()->GetCurrentProcessDataOffset(&nativeOffset)));
		reset_numeric(offset, nativeOffset);
	}
	return res;
}

// Returns the name of executable file loaded in the current process.
template <class EncodingT>
boost::shared_ptr< Base<EncodingT> > IDebugSystemObjectsPtrInterpreter<EncodingT>::getCurrentProcessExecutableName(boost::shared_ptr< Base<EncodingT> >& buffer)
{
boost::shared_ptr< Base<EncodingT> > res(new Numeric<EncodingT>());
	char nativeBuffer[MAX_PATH];
  res.reset(new Numeric<EncodingT>(value()->GetCurrentProcessExecutableName(nativeBuffer, MAX_PATH, NULL)));
	reset_string<ansi>(buffer, nativeBuffer);
	return res;
}


template <class EncodingT>
bool check_IDebugSystemObjectsPtr(boost::shared_ptr< Base<EncodingT> > const& val, IDebugSystemObjectsPtr& a)
{
	boost::shared_ptr< IDebugSystemObjectsPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugSystemObjectsPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		a = value->getValue();
	}
	else
	{
		Category * logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugSystemObjectsPtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

template <class EncodingT>
bool reset_IDebugSystemObjectsPtr(boost::shared_ptr< Base<EncodingT> >& val, IDebugSystemObjectsPtr const& a)
{
	boost::shared_ptr< IDebugSystemObjectsPtrInterpreter<EncodingT> > value  = dynamic_pointer_cast< IDebugSystemObjectsPtrInterpreter<EncodingT> >(val);
	if (value)
	{
		value->setValue(a);
	}
	else
	{
		Category* logger = &Category::getInstance(LOGNAME);
		logger->errorStream() << "IDebugSystemObjectsPtr expected, got " << A(val->getClassName());
	}
	return (value != NULL);
}

NAMESPACE_END

#undef A
#undef C