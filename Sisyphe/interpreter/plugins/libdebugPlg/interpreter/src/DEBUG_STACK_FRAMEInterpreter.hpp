/*
 * DEBUG_STACK_FRAMEInterpreter.hpp
 *
 *
 * @date 20-10-2018
 * @author Teddy DIDE
 * @version 1.00
 * Debug Interpreter generated by gensources.
 */

#ifndef _DEBUG_STACK_FRAME_INTERPRETER_H_
#define _DEBUG_STACK_FRAME_INTERPRETER_H_

#include "config.hpp"
#include "macros.hpp"
#include "Base.hpp"
#include "Array.hpp"


#define A(str) encode<EncodingT,ansi>(str)
#define C(str) encode<ansi,EncodingT>(str)

using namespace boost;

NAMESPACE_BEGIN(interp)

	// The DEBUG_STACK_FRAME structure describes a stack frame and the address of the current instruction for the stack frame.
	template <class EncodingT>
	class DEBUG_STACK_FRAMEInterpreter
	: public Base<EncodingT>
	{
	private:
		DEBUG_STACK_FRAME m_object;

		void initValue(const DEBUG_STACK_FRAME& object);

		DEBUG_STACK_FRAME& refValue();

		const DEBUG_STACK_FRAME& refValue() const;

		void tidyValue();

	public:
		DEBUG_STACK_FRAMEInterpreter();

		~DEBUG_STACK_FRAMEInterpreter();

		DEBUG_STACK_FRAMEInterpreter(const DEBUG_STACK_FRAME& object);

		DEBUG_STACK_FRAMEInterpreter(const DEBUG_STACK_FRAMEInterpreter<EncodingT>& rhs);

		DEBUG_STACK_FRAMEInterpreter<EncodingT>& operator=(const DEBUG_STACK_FRAMEInterpreter<EncodingT>& rhs);

		const DEBUG_STACK_FRAME& value() const;

		void value(DEBUG_STACK_FRAME const& object);

		virtual typename EncodingT::string_t toString() const;

		virtual boost::shared_ptr< Base<EncodingT> > clone() const;

		virtual typename EncodingT::string_t getClassName() const;

		virtual boost::shared_ptr< Base<EncodingT> > invoke(const typename EncodingT::string_t& method, std::vector< boost::shared_ptr< Base<EncodingT> > >& params);

		boost::shared_ptr< Base<EncodingT> > getinstructionOffset() const;

		boost::shared_ptr< Base<EncodingT> > getreturnOffset() const;

		boost::shared_ptr< Base<EncodingT> > getframeOffset() const;

		boost::shared_ptr< Base<EncodingT> > getstackOffset() const;

		boost::shared_ptr< Base<EncodingT> > getfuncTableEntry() const;

		boost::shared_ptr< Base<EncodingT> > getvirtual() const;

		boost::shared_ptr< Base<EncodingT> > getframeNumber() const;

		FACTORY_BEGIN_REGISTER
			CLASS_KEY_REGISTER  ( DEBUG_STACK_FRAMEInterpreter, C("DEBUG_STACK_FRAME") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getinstructionOffset, const_t, C("DEBUG_STACK_FRAME::InstructionOffset") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getreturnOffset, const_t, C("DEBUG_STACK_FRAME::ReturnOffset") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getframeOffset, const_t, C("DEBUG_STACK_FRAME::FrameOffset") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getstackOffset, const_t, C("DEBUG_STACK_FRAME::StackOffset") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getfuncTableEntry, const_t, C("DEBUG_STACK_FRAME::FuncTableEntry") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getvirtual, const_t, C("DEBUG_STACK_FRAME::Virtual") );
			METHOD_KEY_REGISTER ( DEBUG_STACK_FRAMEInterpreter, boost::shared_ptr< Base<EncodingT> >, getframeNumber, const_t, C("DEBUG_STACK_FRAME::FrameNumber") );
		FACTORY_END_REGISTER

		FACTORY_BEGIN_UNREGISTER
			CLASS_KEY_UNREGISTER  ( C("DEBUG_STACK_FRAME") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::InstructionOffset") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::ReturnOffset") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::FrameOffset") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::StackOffset") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::FuncTableEntry") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::Virtual") );
			METHOD_KEY_UNREGISTER ( C("DEBUG_STACK_FRAME::FrameNumber") );
		FACTORY_END_UNREGISTER
	};

	template <class EncodingT>
	bool check_DEBUG_STACK_FRAME(boost::shared_ptr< Base<EncodingT> > const& val, DEBUG_STACK_FRAME& a);

	template <class EncodingT>
	bool reset_DEBUG_STACK_FRAME(boost::shared_ptr< Base<EncodingT> >& val, DEBUG_STACK_FRAME const& a);

NAMESPACE_END

#undef A
#undef C
#include "DEBUG_STACK_FRAMEInterpreter_impl.hpp"

#endif