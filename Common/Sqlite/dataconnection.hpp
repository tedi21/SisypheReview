/** 
 * SqliteDataConnection.hpp
 *
 *
 * @date: 19-07-2012
 * @author: Teddy DIDÉ
 * @version: 2.00
 * @brief: Project generated by gensources
 */

#ifndef _SQLITE_DATA_CONNECTION_HPP_
#define _SQLITE_DATA_CONNECTION_HPP_

#include "config.hpp"
#include "DBExport.h"
#include "encoding.hpp"
#include "datastatement.hpp"
#include <boost/container/vector.hpp>

#include <sqlite3.h>

NAMESPACE_BEGIN(data_access)

using namespace log4cpp;
using namespace enc;

// Class handling connection to sqlite
template <class EncodingT>
class DB_API _DataConnection
{ 
private:
	// Static members
    static sqlite3* connection_handle;
    static _DataConnection<EncodingT>* m_instance;
	
	// Private members
    Category* m_logger;
    bool transaction_inProgress;
    _DataStatement<EncodingT> current_statement;

    // Private constructor
    _DataConnection();
	
    _DataStatement<EncodingT>&
    prepareStatement(typename ucs::string_t const& query);
	
    _DataStatement<EncodingT>&
    prepareStatement(typename ansi::string_t const& query);

    // Private methods
    typename EncodingT::string_t 
    formatSelect(std::vector<typename EncodingT::string_t> const& columns,
                 std::vector<typename EncodingT::string_t> const& tables,
                 typename EncodingT::string_t const& filter = EncodingT::EMPTY,
                 bool forUpdate = false, bool noWait = false) const;

    typename EncodingT::string_t
	formatInsert(typename EncodingT::string_t const& table,
                 std::vector<typename EncodingT::string_t> const& columns) const;

    typename EncodingT::string_t
	formatDeleteFrom(typename EncodingT::string_t const& table,
                     typename EncodingT::string_t const& filter = EncodingT::EMPTY) const;

    typename EncodingT::string_t 
	formatUpdate(typename EncodingT::string_t const& table,
                 std::vector<typename EncodingT::string_t> const& columns,
                 typename EncodingT::string_t const& filter = EncodingT::EMPTY) const;

public:
	// Static methods
	// Open connection to sqlite
    static bool 
	openConnection(typename EncodingT::string_t const& host,
                   int port,
                   typename EncodingT::string_t const& db,
                   typename EncodingT::string_t const& user,
                   typename EncodingT::string_t const& passwd);

	// Close connection
    static void 
	closeConnection();

	// Get single instance of DataConnection object
    static _DataConnection<EncodingT>* 
	getInstance();

	// Get prepared statement
    _DataStatement<EncodingT>&
	select(std::vector<typename EncodingT::string_t> const& columns,
           std::vector<typename EncodingT::string_t> const& tables,
           typename EncodingT::string_t const& filter = EncodingT::EMPTY);

    _DataStatement<EncodingT>&
	selectForUpdate(std::vector<typename EncodingT::string_t> const& columns,
                    std::vector<typename EncodingT::string_t> const& tables,
                    typename EncodingT::string_t const& filter = EncodingT::EMPTY,
                    bool nowait = false);

    _DataStatement<EncodingT>&
	insert(typename EncodingT::string_t const& table,
           std::vector<typename EncodingT::string_t> const& columns);

    _DataStatement<EncodingT>&
	deleteFrom(typename EncodingT::string_t const& table,
               typename EncodingT::string_t const& filter = EncodingT::EMPTY);

    _DataStatement<EncodingT>&
	update(typename EncodingT::string_t const& table,
           std::vector<typename EncodingT::string_t> const& columns,
           typename EncodingT::string_t const& filter = EncodingT::EMPTY);

	// Unary query
    int 
	getLastInsertID() const;

    int 
	selectMaxID(typename EncodingT::string_t const& columnid,
                typename EncodingT::string_t const& table) const;

    bool 
	commit();

    bool 
	rollback();

    bool
	startTransaction();

    bool
	isTransactionInProgress() const;

    void
    setPragma(typename EncodingT::string_t const& pragma);
};

typedef _DataConnection<ucs>        UniDataConnection;
typedef _DataConnection<ansi>       DataConnection;

NAMESPACE_END

#if !defined(HAS_DB_DLL) || defined(BUILD_DB_DLL)
#include "DataConnection_impl.hpp"
#endif // !defined(HAS_DB_DLL) || defined(BUILD_DB_DLL)

#endif
