/** 
 * SqliteDataParameters.hpp
 *
 *
 * @date: 19-07-2012
 * @author: Teddy DIDÉ
 * @version: 2.00
 * @brief: Project generated by gensources
 */

#ifndef _SQLITE_DATA_PARAMETERS_HPP_
#define _SQLITE_DATA_PARAMETERS_HPP_

#include "config.hpp"
#include "encoding.hpp"
#include "datastatement.hpp"
#include "databaseparameter.hpp"
#include <boost/container/vector.hpp>
#include <boost/ptr_container/ptr_vector.hpp>

NAMESPACE_BEGIN(data_access)

using namespace boost::container;
using namespace boost;
using namespace log4cpp;
using namespace enc;
namespace bc = boost::container;

// Class representing sqlite parameters
template <class EncodingT>
class DB_API _DataParameters
{ 
private:
	typedef boost::ptr_vector< _DataBaseParameter<EncodingT> > vector_parameters;
	typedef typename vector_parameters::const_iterator  parameters_const_iterator;
	typedef typename vector_parameters::iterator  		parameters_iterator;
	// Private members
	Category* m_logger;
	vector_parameters m_parameters;
	

public:
	// Constructor
	_DataParameters();

	// Fill Statement
	bool 
	fill(_DataStatement<EncodingT>& statement) const;
	
	// Add Value
	void 
	addBlob		(const bc::vector<unsigned char>& value);
	
	void 
	addDouble	(double value);
	
	void 
	addInt		(int value);
	
	void 
	addInt64	(long long value);
	
	void 
	addText		(const typename EncodingT::string_t& value);
	
	void 
	addNull		();
};

typedef _DataParameters<ucs>        UniDataParameters;
typedef _DataParameters<ansi>       DataParameters;

NAMESPACE_END

#if !defined(HAS_DB_DLL) || defined(BUILD_DB_DLL)
#include "DataParameters_impl.hpp"
#endif // !defined(HAS_DB_DLL) || defined(BUILD_DB_DLL)

#endif
